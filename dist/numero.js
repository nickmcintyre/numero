var num=function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=13)}([function(t,n,e){"use strict";e.r(n),function(t,r,o,i){e.d(n,"AdadeltaOptimizer",(function(){return xd})),e.d(n,"AdagradOptimizer",(function(){return bd})),e.d(n,"AdamOptimizer",(function(){return wd})),e.d(n,"AdamaxOptimizer",(function(){return Cd})),e.d(n,"Add",(function(){return xr})),e.d(n,"AddN",(function(){return br})),e.d(n,"BroadcastTo",(function(){return Sr})),e.d(n,"DataStorage",(function(){return si})),e.d(n,"Div",(function(){return wr})),e.d(n,"ENV",(function(){return d})),e.d(n,"Environment",(function(){return l})),e.d(n,"FromPixels",(function(){return Fr})),e.d(n,"FusedBatchNorm",(function(){return Cr})),e.d(n,"Identity",(function(){return Tr})),e.d(n,"KernelBackend",(function(){return ci})),e.d(n,"MaxPoolWithArgmax",(function(){return _r})),e.d(n,"MomentumOptimizer",(function(){return Rd})),e.d(n,"NonMaxSuppressionV5",(function(){return kr})),e.d(n,"OneHot",(function(){return Ar})),e.d(n,"Optimizer",(function(){return yd})),e.d(n,"PadV2",(function(){return Nr})),e.d(n,"RMSPropOptimizer",(function(){return Id})),e.d(n,"Rank",(function(){return Rt})),e.d(n,"Reduction",(function(){return rf})),e.d(n,"SGDOptimizer",(function(){return Ed})),e.d(n,"Square",(function(){return Rr})),e.d(n,"SquaredDifference",(function(){return Er})),e.d(n,"Tensor",(function(){return Et})),e.d(n,"TensorBuffer",(function(){return xt})),e.d(n,"Tile",(function(){return Dr})),e.d(n,"Transpose",(function(){return Ir})),e.d(n,"Variable",(function(){return Tt})),e.d(n,"abs",(function(){return Lr})),e.d(n,"acos",(function(){return Wr})),e.d(n,"acosh",(function(){return Ur})),e.d(n,"add",(function(){return Or})),e.d(n,"addN",(function(){return Ts})),e.d(n,"addStrict",(function(){return xo})),e.d(n,"all",(function(){return Cl})),e.d(n,"any",(function(){return El})),e.d(n,"argMax",(function(){return Rl})),e.d(n,"argMin",(function(){return Il})),e.d(n,"asin",(function(){return zr})),e.d(n,"asinh",(function(){return Vr})),e.d(n,"atan",(function(){return Gr})),e.d(n,"atan2",(function(){return bo})),e.d(n,"atanh",(function(){return Hr})),e.d(n,"avgPool",(function(){return fl})),e.d(n,"avgPool3d",(function(){return pl})),e.d(n,"backend",(function(){return fe})),e.d(n,"backend_util",(function(){return ki})),e.d(n,"basicLSTMCell",(function(){return zl})),e.d(n,"batchNorm",(function(){return Ms})),e.d(n,"batchNorm2d",(function(){return Ls})),e.d(n,"batchNorm3d",(function(){return zs})),e.d(n,"batchNorm4d",(function(){return Hs})),e.d(n,"batchNormalization",(function(){return Os})),e.d(n,"batchNormalization2d",(function(){return Ps})),e.d(n,"batchNormalization3d",(function(){return Us})),e.d(n,"batchNormalization4d",(function(){return Gs})),e.d(n,"batchToSpaceND",(function(){return rr})),e.d(n,"booleanMaskAsync",(function(){return Wc})),e.d(n,"broadcastTo",(function(){return qs})),e.d(n,"browser",(function(){return fd})),e.d(n,"buffer",(function(){return nr})),e.d(n,"cast",(function(){return or})),e.d(n,"ceil",(function(){return qr})),e.d(n,"clipByValue",(function(){return Kr})),e.d(n,"clone",(function(){return Ks})),e.d(n,"complex",(function(){return Te})),e.d(n,"concat",(function(){return Ye})),e.d(n,"concat1d",(function(){return $e})),e.d(n,"concat2d",(function(){return Qe})),e.d(n,"concat3d",(function(){return Je})),e.d(n,"concat4d",(function(){return Ze})),e.d(n,"conv1d",(function(){return Gc})),e.d(n,"conv2d",(function(){return Hc})),e.d(n,"conv2dTranspose",(function(){return Jc})),e.d(n,"conv3d",(function(){return qc})),e.d(n,"conv3dTranspose",(function(){return Zc})),e.d(n,"cos",(function(){return jr})),e.d(n,"cosh",(function(){return Xr})),e.d(n,"cumsum",(function(){return ir})),e.d(n,"customGrad",(function(){return ri})),e.d(n,"deprecationWarn",(function(){return Yn})),e.d(n,"depthToSpace",(function(){return ar})),e.d(n,"depthwiseConv2d",(function(){return Xc})),e.d(n,"diag",(function(){return tf})),e.d(n,"disableDeprecationWarnings",(function(){return Xn})),e.d(n,"dispose",(function(){return ne})),e.d(n,"disposeVariables",(function(){return $n})),e.d(n,"div",(function(){return Bo})),e.d(n,"divNoNan",(function(){return Zs})),e.d(n,"divStrict",(function(){return wo})),e.d(n,"dot",(function(){return nl})),e.d(n,"dropout",(function(){return nf})),e.d(n,"elu",(function(){return _l})),e.d(n,"enableDebugMode",(function(){return jn})),e.d(n,"enableProdMode",(function(){return Kn})),e.d(n,"engine",(function(){return Qn})),e.d(n,"env",(function(){return h})),e.d(n,"equal",(function(){return Ec})),e.d(n,"equalStrict",(function(){return Rc})),e.d(n,"erf",(function(){return Yr})),e.d(n,"exp",(function(){return $r})),e.d(n,"expandDims",(function(){return ur})),e.d(n,"expm1",(function(){return Qr})),e.d(n,"eye",(function(){return nc})),e.d(n,"fft",(function(){return jl})),e.d(n,"fill",(function(){return He})),e.d(n,"findBackend",(function(){return se})),e.d(n,"findBackendFactory",(function(){return ce})),e.d(n,"floor",(function(){return Jr})),e.d(n,"floorDiv",(function(){return Co})),e.d(n,"frame",(function(){return uf})),e.d(n,"fused",(function(){return Uf})),e.d(n,"gather",(function(){return Pc})),e.d(n,"gatherND",(function(){return Zl})),e.d(n,"gather_util",(function(){return Lo})),e.d(n,"getBackend",(function(){return ae})),e.d(n,"getGradient",(function(){return g})),e.d(n,"getKernel",(function(){return m})),e.d(n,"getKernelsForBackend",(function(){return y})),e.d(n,"grad",(function(){return Jo})),e.d(n,"grads",(function(){return Zo})),e.d(n,"greater",(function(){return Ic})),e.d(n,"greaterEqual",(function(){return kc})),e.d(n,"greaterEqualStrict",(function(){return Sc})),e.d(n,"greaterStrict",(function(){return Ac})),e.d(n,"hammingWindow",(function(){return af})),e.d(n,"hannWindow",(function(){return of})),e.d(n,"ifft",(function(){return Xl})),e.d(n,"imag",(function(){return Ne})),e.d(n,"image",(function(){return Ff})),e.d(n,"inTopKAsync",(function(){return lf})),e.d(n,"io",(function(){return ud})),e.d(n,"irfft",(function(){return $l})),e.d(n,"isFinite",(function(){return lo})),e.d(n,"isInf",(function(){return co})),e.d(n,"isNaN",(function(){return so})),e.d(n,"keep",(function(){return ee})),e.d(n,"leakyRelu",(function(){return Ol})),e.d(n,"less",(function(){return Tc})),e.d(n,"lessEqual",(function(){return Dc})),e.d(n,"lessEqualStrict",(function(){return Nc})),e.d(n,"lessStrict",(function(){return Fc})),e.d(n,"linalg",(function(){return If})),e.d(n,"linspace",(function(){return qe})),e.d(n,"localResponseNormalization",(function(){return Wl})),e.d(n,"log",(function(){return Zr})),e.d(n,"log1p",(function(){return to})),e.d(n,"logSigmoid",(function(){return no})),e.d(n,"logSoftmax",(function(){return ai})),e.d(n,"logSumExp",(function(){return kl})),e.d(n,"logicalAnd",(function(){return js})),e.d(n,"logicalNot",(function(){return Xs})),e.d(n,"logicalOr",(function(){return Ys})),e.d(n,"logicalXor",(function(){return $s})),e.d(n,"losses",(function(){return bf})),e.d(n,"matMul",(function(){return tl})),e.d(n,"math",(function(){return cd})),e.d(n,"max",(function(){return Sl})),e.d(n,"maxPool",(function(){return ll})),e.d(n,"maxPool3d",(function(){return dl})),e.d(n,"maxPoolWithArgmax",(function(){return vl})),e.d(n,"maximum",(function(){return Eo})),e.d(n,"maximumStrict",(function(){return Ro})),e.d(n,"mean",(function(){return Al})),e.d(n,"memory",(function(){return Jn})),e.d(n,"min",(function(){return Tl})),e.d(n,"minimum",(function(){return Io})),e.d(n,"minimumStrict",(function(){return ko})),e.d(n,"mod",(function(){return So})),e.d(n,"modStrict",(function(){return Ao})),e.d(n,"moments",(function(){return Dl})),e.d(n,"movingAverage",(function(){return Gl})),e.d(n,"mul",(function(){return To})),e.d(n,"mulStrict",(function(){return Do})),e.d(n,"multiRNNCell",(function(){return Vl})),e.d(n,"multinomial",(function(){return ec})),e.d(n,"neg",(function(){return eo})),e.d(n,"nextFrame",(function(){return Td})),e.d(n,"norm",(function(){return Ul})),e.d(n,"notEqual",(function(){return _c})),e.d(n,"notEqualStrict",(function(){return Oc})),e.d(n,"oneHot",(function(){return rc})),e.d(n,"ones",(function(){return Ve})),e.d(n,"onesLike",(function(){return je})),e.d(n,"op",(function(){return Ae})),e.d(n,"outerProduct",(function(){return el})),e.d(n,"pad",(function(){return oc})),e.d(n,"pad1d",(function(){return ic})),e.d(n,"pad2d",(function(){return ac})),e.d(n,"pad3d",(function(){return uc})),e.d(n,"pad4d",(function(){return sc})),e.d(n,"pool",(function(){return hl})),e.d(n,"pow",(function(){return No})),e.d(n,"powStrict",(function(){return Fo})),e.d(n,"prelu",(function(){return Ml})),e.d(n,"print",(function(){return er})),e.d(n,"prod",(function(){return Fl})),e.d(n,"profile",(function(){return Zn})),e.d(n,"rand",(function(){return cc})),e.d(n,"randomGamma",(function(){return gc})),e.d(n,"randomNormal",(function(){return yc})),e.d(n,"randomUniform",(function(){return xc})),e.d(n,"range",(function(){return Ke})),e.d(n,"ready",(function(){return ie})),e.d(n,"real",(function(){return De})),e.d(n,"reciprocal",(function(){return ro})),e.d(n,"registerBackend",(function(){return le})),e.d(n,"registerGradient",(function(){return b})),e.d(n,"registerKernel",(function(){return x})),e.d(n,"relu",(function(){return Bl})),e.d(n,"relu6",(function(){return Pl})),e.d(n,"removeBackend",(function(){return ue})),e.d(n,"reshape",(function(){return sr})),e.d(n,"reverse",(function(){return rl})),e.d(n,"reverse1d",(function(){return ol})),e.d(n,"reverse2d",(function(){return il})),e.d(n,"reverse3d",(function(){return al})),e.d(n,"reverse4d",(function(){return ul})),e.d(n,"rfft",(function(){return Yl})),e.d(n,"round",(function(){return oo})),e.d(n,"rsqrt",(function(){return io})),e.d(n,"scalar",(function(){return Oe})),e.d(n,"scatterND",(function(){return Kl})),e.d(n,"scatter_util",(function(){return Go})),e.d(n,"selu",(function(){return Ll})),e.d(n,"separableConv2d",(function(){return Qc})),e.d(n,"serialization",(function(){return vd})),e.d(n,"setBackend",(function(){return oe})),e.d(n,"setPlatform",(function(){return he})),e.d(n,"setdiff1dAsync",(function(){return dr})),e.d(n,"sigmoid",(function(){return ao})),e.d(n,"sign",(function(){return uo})),e.d(n,"signal",(function(){return cf})),e.d(n,"sin",(function(){return fo})),e.d(n,"sinh",(function(){return ho})),e.d(n,"slice",(function(){return ml})),e.d(n,"slice1d",(function(){return gl})),e.d(n,"slice2d",(function(){return yl})),e.d(n,"slice3d",(function(){return xl})),e.d(n,"slice4d",(function(){return bl})),e.d(n,"slice_util",(function(){return Qo})),e.d(n,"softmax",(function(){return ii})),e.d(n,"softplus",(function(){return po})),e.d(n,"spaceToBatchND",(function(){return cr})),e.d(n,"sparseToDense",(function(){return Jl})),e.d(n,"spectral",(function(){return Ql})),e.d(n,"split",(function(){return tr})),e.d(n,"sqrt",(function(){return vo})),e.d(n,"square",(function(){return bc})),e.d(n,"squaredDifference",(function(){return wc})),e.d(n,"squaredDifferenceStrict",(function(){return _o})),e.d(n,"squeeze",(function(){return lr})),e.d(n,"stack",(function(){return fr})),e.d(n,"step",(function(){return mo})),e.d(n,"stft",(function(){return sf})),e.d(n,"stridedSlice",(function(){return Hl})),e.d(n,"sub",(function(){return Oo})),e.d(n,"subStrict",(function(){return Mo})),e.d(n,"sum",(function(){return Nl})),e.d(n,"sumOutType",(function(){return Ft})),e.d(n,"tan",(function(){return go})),e.d(n,"tanh",(function(){return yo})),e.d(n,"tensor",(function(){return Fe})),e.d(n,"tensor1d",(function(){return Me})),e.d(n,"tensor2d",(function(){return Be})),e.d(n,"tensor3d",(function(){return Pe})),e.d(n,"tensor4d",(function(){return Le})),e.d(n,"tensor5d",(function(){return We})),e.d(n,"tensor6d",(function(){return Ue})),e.d(n,"tensor_util",(function(){return Pt})),e.d(n,"test_util",(function(){return dc})),e.d(n,"tidy",(function(){return te})),e.d(n,"tile",(function(){return tc})),e.d(n,"time",(function(){return re})),e.d(n,"topk",(function(){return ql})),e.d(n,"train",(function(){return Sd})),e.d(n,"transpose",(function(){return ui})),e.d(n,"truncatedNormal",(function(){return Cc})),e.d(n,"unregisterGradient",(function(){return C})),e.d(n,"unregisterKernel",(function(){return w})),e.d(n,"unsortedSegmentSum",(function(){return Lc})),e.d(n,"unstack",(function(){return hr})),e.d(n,"util",(function(){return dt})),e.d(n,"valueAndGrad",(function(){return ti})),e.d(n,"valueAndGrads",(function(){return ni})),e.d(n,"variable",(function(){return ze})),e.d(n,"variableGrads",(function(){return ei})),e.d(n,"version_core",(function(){return md})),e.d(n,"webgl",(function(){return gd})),e.d(n,"where",(function(){return Qs})),e.d(n,"whereAsync",(function(){return Js})),e.d(n,"zeros",(function(){return Ge})),e.d(n,"zerosLike",(function(){return Xe}));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var a=function(t,n){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)};function u(t,n){function e(){this.constructor=t}a(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function s(t,n,e,r){return new(e||(e=Promise))((function(o,i){function a(t){try{s(r.next(t))}catch(t){i(t)}}function u(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){t.done?o(t.value):new e((function(n){n(t.value)})).then(a,u)}s((r=r.apply(t,n||[])).next())}))}function c(t,n){var e,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(t,a)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}var l=function(){function t(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}return t.prototype.setPlatform=function(t,n){null!=this.platform&&console.warn("Platform "+this.platformName+" has already been set. Overwriting the platform with "+n+"."),this.platformName=t,this.platform=n},t.prototype.registerFlag=function(t,n,e){if(this.flagRegistry[t]={evaluationFn:n,setHook:e},null!=this.urlFlags[t]){var r=this.urlFlags[t];console.warn("Setting feature override from URL "+t+": "+r+"."),this.set(t,r)}},t.prototype.get=function(t){return t in this.flags||(this.flags[t]=this.evaluateFlag(t)),this.flags[t]},t.prototype.getNumber=function(t){return this.get(t)},t.prototype.getBool=function(t){return this.get(t)},t.prototype.getFlags=function(){return this.flags},Object.defineProperty(t.prototype,"features",{get:function(){return this.flags},enumerable:!0,configurable:!0}),t.prototype.set=function(t,n){if(null==this.flagRegistry[t])throw new Error("Cannot set flag "+t+" as it has not been registered.");this.flags[t]=n,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(n)},t.prototype.evaluateFlag=function(t){if(null==this.flagRegistry[t])throw new Error("Cannot evaluate flag '"+t+"': no evaluation function found.");return this.flagRegistry[t].evaluationFn()},t.prototype.setFlags=function(t){this.flags=Object.assign({},t)},t.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags()},t.prototype.populateURLFlags=function(){var t=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var n,e,r=(n=this.global.location.search,e={},n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return f(e,n[0],n[1]),n.join("=")})),e);"tfjsflags"in r&&r.tfjsflags.split(",").forEach((function(n){var e=n.split(":"),r=e[0],o=e[1];t.urlFlags[r]=function(t,n){if("true"===(n=n.toLowerCase())||"false"===n)return"true"===n;if(""+ +n===n)return+n;throw new Error("Could not parse value flag value "+n+" for flag "+t+".")}(r,o)}))}},t}();function f(t,n,e){t[decodeURIComponent(n)]=decodeURIComponent(e||"")}function h(){return d}var d=null,p=new Map,v=new Map;function m(t,n){var e=E(t,n);return p.get(e)}function g(t){return v.get(t)}function y(t){for(var n=p.entries(),e=[];;){var r=n.next(),o=r.done,i=r.value;if(o)break;var a=i[0],u=i[1];a.split("_")[0]===t&&e.push(u)}return e}function x(t){var n=t.kernelName,e=t.backendName,r=E(n,e);if(p.has(r))throw new Error("The kernel '"+n+"' for backend '"+e+"' is already registered");p.set(r,t)}function b(t){var n=t.kernelName;v.has(n)&&console.warn("Overriding the gradient for '"+n+"'"),v.set(n,t)}function w(t,n){var e=E(t,n);if(!p.has(e))throw new Error("The kernel '"+t+"' for backend '"+n+"' is not registered");p.delete(e)}function C(t){if(!v.has(t))throw new Error("The gradient '"+t+"' for backend is not registered");v.delete(t)}function E(t,n){return n+"_"+t}function R(t){for(var n=t.length,e=0,r=0;n>0;)r=Math.random()*n|0,e=t[--n],t[n]=t[r],t[r]=e}function I(t,n,e){return Math.max(t,Math.min(n,e))}function k(t){return t%2==0?t:t+1}function S(t){for(var n=0,e=0;e<t.length;e++)n+=t[e];return n}function A(t,n){if(!t)throw new Error("string"==typeof n?n:n())}function T(t,n,e){void 0===e&&(e=""),A(_(t,n),(function(){return e+" Shapes "+t+" and "+n+" must match"}))}function D(t){A(null!=t,(function(){return"The input to the tensor constructor must be a non-null value."}))}function N(t,n,e){if(void 0===n&&(n=[]),void 0===e&&(e=!1),null==n&&(n=[]),Array.isArray(t)||j(t)&&!e)for(var r=0;r<t.length;++r)N(t[r],n,e);else n.push(t);return n}function F(t){if(0===t.length)return 1;for(var n=t[0],e=1;e<t.length;e++)n*=t[e];return n}function _(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(t.length!==n.length)return!1;for(var e=0;e<t.length;e++)if(t[e]!==n[e])return!1;return!0}function O(t){return t%1==0}function M(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var n=Math.exp(2*t);return(n-1)/(n+1)}function B(t){var n=Math.ceil(Math.sqrt(t));return[n,Math.ceil(t/n)]}function P(t,n){return n<=t.length?t:t+" ".repeat(n-t.length)}function L(t,n,e){return void 0===n&&(n=function(t){return 0}),new Promise((function(r,o){var i=0,a=function(){if(t())r();else{i++;var u=n(i);null!=e&&i>=e?o():setTimeout(a,u)}};a()}))}function W(t,n){for(var e=1,r=-1,o=0;o<t.length;++o)if(t[o]>=0)e*=t[o];else if(-1===t[o]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found -1 at dim "+r+" and dim "+o);r=o}else if(t[o]<0)throw Error("Shapes can not be < 0. Found "+t[o]+" at dim "+o);if(-1===r){if(n>0&&n!==e)throw Error("Size("+n+") must match the product of shape "+t);return t}if(0===e)throw Error("Cannot infer the missing size in ["+t+"] when there are 0 elements");if(n%e!=0)throw Error("The implicit shape can't be a fractional number. Got "+n+" / "+e);var i=t.slice();return i[r]=n/e,i}function U(t,n){var e=n.length;return A((t=null==t?n.map((function(t,n){return n})):[].concat(t)).every((function(t){return t>=-e&&t<e})),(function(){return"All values in axis param must be in range [-"+e+", "+e+") but got axis "+t})),A(t.every((function(t){return O(t)})),(function(){return"All values in axis param must be integers but got axis "+t})),t.map((function(t){return t<0?e+t:t}))}function z(t,n){for(var e=[],r=[],o=null!=n&&Array.isArray(n)&&0===n.length,i=null==n||o?null:U(n,t).sort(),a=0,u=0;u<t.length;++u){if(null!=i){if(i[a]===u&&1!==t[u])throw new Error("Can't squeeze axis "+u+" since its dim '"+t[u]+"' is not 1");(null==i[a]||i[a]>u)&&1===t[u]&&(e.push(t[u]),r.push(u)),i[a]<=u&&a++}1!==t[u]&&(e.push(t[u]),r.push(u))}return{newShape:e,keptDims:r}}function V(t,n){var e=null;if(null==t||"float32"===t)e=new Float32Array(n);else if("int32"===t)e=new Int32Array(n);else{if("bool"!==t)throw new Error("Unknown data type "+t);e=new Uint8Array(n)}return e}function G(t,n){var e=null;if(null==t||"float32"===t)e=new Float32Array(n);else if("int32"===t)e=new Int32Array(n);else if("bool"===t)e=new Uint8Array(n);else{if("string"!==t)throw new Error("Unknown data type "+t);e=new Array(n)}return e}function H(t,n){for(var e=0;e<t.length;e++){var r=t[e];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type "+n+" being uploaded contains "+r+".")}}function q(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function K(t,n){return!("complex64"===n||"float32"===n&&"complex64"!==t||"int32"===n&&"float32"!==t&&"complex64"!==t||"bool"===n&&"bool"===t)}function j(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function X(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function Y(t){if(null==t)return 0;var n=0;return t.forEach((function(t){return n+=t.length})),n}function $(t){return"string"==typeof t||t instanceof String}function Q(t){return"boolean"==typeof t}function J(t){return"number"==typeof t}function Z(t){return Array.isArray(t)?Z(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":J(t)?"float32":$(t)?"string":Q(t)?"bool":"float32"}function tt(t){return!!(t&&t.constructor&&t.call&&t.apply)}function nt(t,n){for(var e=n;e<t;++e)if(t%e==0)return e;return t}function et(t){var n=t.length;if(n<2)return[];var e=new Array(n-1);e[n-2]=t[n-1];for(var r=n-3;r>=0;--r)e[r]=e[r+1]*t[r+1];return e}function rt(t,n,e){if("string"===n)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=N(t)),e&&H(t,n),function(t,n){return t instanceof Float32Array&&"float32"===n||t instanceof Int32Array&&"int32"===n||t instanceof Uint8Array&&"bool"===n}(t,n))return t;if(null==n||"float32"===n||"complex64"===n)return new Float32Array(t);if("int32"===n)return new Int32Array(t);if("bool"===n){for(var r=new Uint8Array(t.length),o=0;o<r.length;++o)0!==Math.round(t[o])&&(r[o]=1);return r}throw new Error("Unknown data type "+n)}function ot(t,n){if(0===t.length)return n[0];var e=t.reduce((function(t,n){return t*n}));if(0===e)return[];if(e!==n.length)throw new Error("["+t+"] does not match the input size.");return function t(n,e,r){var o=new Array;if(1===e.length)for(var i=e[0],a=0;a<i;a++)o[a]=r[n+a];else{i=e[0];var u=e.slice(1),s=u.reduce((function(t,n){return t*n}));for(a=0;a<i;a++)o[a]=t(n+a*s,u,r)}return o}(0,t,n)}function it(t,n){for(var e=at(t,n),r=0;r<e.length;r++)e[r]=1;return e}function at(t,n){if(null==n||"float32"===n||"complex64"===n)return new Float32Array(t);if("int32"===n)return new Int32Array(t);if("bool"===n)return new Uint8Array(t);throw new Error("Unknown data type "+n)}function ut(){return h().platform.now()}function st(t){t.forEach((function(n){A(Number.isInteger(n)&&n>=0,(function(){return"Tensor must have a shape comprised of positive integers but got shape ["+t+"]."}))}))}function ct(t,n){return void 0===n&&(n="utf-8"),n=n||"utf-8",h().platform.encode(t,n)}function lt(t,n){return void 0===n&&(n="utf-8"),n=n||"utf-8",h().platform.decode(t,n)}function ft(t,n,e){if(0===n)return 0;if(1===n)return t[0];for(var r=t[t.length-1],o=0;o<t.length-1;++o)r+=e[o]*t[o];return r}function ht(t,n,e){if(0===n)return[];if(1===n)return[t];for(var r=new Array(n),o=0;o<r.length-1;++o)r[o]=Math.floor(t/e[o]),t-=r[o]*e[o];return r[r.length-1]=t,r}var dt=Object.freeze({shuffle:R,clamp:I,nearestLargerEven:k,sum:S,randUniform:function(t,n){var e=Math.random();return n*e+(1-e)*t},distSquared:function(t,n){for(var e=0,r=0;r<t.length;r++){var o=Number(t[r])-Number(n[r]);e+=o*o}return e},assert:A,assertShapesMatch:T,assertNonNull:D,flatten:N,sizeFromShape:F,isScalarShape:function(t){return 0===t.length},arraysEqual:_,isInt:O,tanh:M,sizeToSquarishShape:B,createShuffledIndices:function(t){for(var n=new Uint32Array(t),e=0;e<t;++e)n[e]=e;return R(n),n},rightPad:P,repeatedTry:L,inferFromImplicitShape:W,parseAxisParam:U,squeezeShape:z,getTypedArrayFromDType:V,getArrayFromDType:G,checkConversionForErrors:H,isValidDtype:q,hasEncodingLoss:K,isTypedArray:j,bytesPerElement:X,bytesFromStringArray:Y,isString:$,isBoolean:Q,isNumber:J,inferDtype:Z,isFunction:tt,nearestDivisor:nt,computeStrides:et,toTypedArray:rt,toNestedArray:ot,makeOnesTypedArray:it,makeZerosTypedArray:at,now:ut,assertNonNegativeIntegerDimensions:st,fetch:function(t,n){return h().platform.fetch(t,n)},encodeString:ct,decodeString:lt,locToIndex:ft,indexToLoc:ht}),pt=function(){function t(t,n){this.backendTimer=t,this.logger=n,null==n&&(this.logger=new vt)}return t.prototype.profileKernel=function(t,n,e){var r,o=this,i=this.backendTimer.time((function(){r=e()}));return r.forEach((function(e){e.data().then((function(r){!function(t,n,e){if("float32"!==n)return!1;for(var r=0;r<t.length;r++){var o=t[r];if(isNaN(o)||!isFinite(o))return console.warn("Found "+o+" in the result of '"+e+"'"),!0}}(r,e.dtype,t),i.then((function(i){var a="";null!=i.getExtraProfileInfo&&(a=i.getExtraProfileInfo()),o.logger.logKernelProfile(t,e,r,i.kernelMs,n,a)}))}))})),r},t}(),vt=function(){function t(){}return t.prototype.logKernelProfile=function(t,n,e,r,o,i){var a="number"==typeof r?P(r+"ms",9):r.error,u=P(t,25),s=n.rank,c=n.size,l=P(n.shape.toString(),14),f="";for(var h in o){var d=o[h].shape||n.shape,p=d.length;f+=h+": "+p+"D "+(p>0?d:"")+" "}console.log("%c"+u+"\t%c"+a+"\t%c"+s+"D "+l+"\t%c"+c+"\t%c"+f+"\t%c"+i,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")},t}();function mt(t,n,e){return P(Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":$(t)?"'"+t+"'":"bool"===e?gt(t):parseFloat(t.toFixed(7)).toString(),n)}function gt(t){return 0===t?"false":"true"}function yt(t){for(var n=[],e=0;e<t.length;e+=2)n.push([t[e],t[e+1]]);return n}var xt=function(){function t(t,n,e){var r=this;if(this.dtype=n,this.shape=t.slice(),this.size=F(t),null!=e){var o=e.length;A(o===this.size,(function(){return"Length of values '"+o+"' does not match the size inferred by the shape '"+r.size+"'."}))}if("complex64"===n)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=e||G(n,this.size),this.strides=et(t)}return t.prototype.set=function(t){for(var n=this,e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];0===e.length&&(e=[0]),A(e.length===this.rank,(function(){return"The number of provided coordinates ("+e.length+") must match the rank ("+n.rank+")"}));var o=this.locToIndex(e);this.values[o]=t},t.prototype.get=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];0===t.length&&(t=[0]);for(var e=0,r=0,o=t;r<o.length;r++){var i=o[r];if(i<0||i>=this.shape[e]){var a="Requested out of range element at "+t+".   Buffer shape="+this.shape;throw new Error(a)}e++}for(var u=t[t.length-1],s=0;s<t.length-1;++s)u+=this.strides[s]*t[s];return this.values[u]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var n=t[t.length-1],e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return n},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var n=new Array(this.shape.length),e=0;e<n.length-1;++e)n[e]=Math.floor(t/this.strides[e]),t-=n[e]*this.strides[e];return n[n.length-1]=t,n},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return bt().makeTensor(this.values,this.shape,this.dtype)},t}(),bt=null,wt=null,Ct=null,Et=function(){function t(t,n,e,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=n||"float32",this.size=F(t),this.strides=et(t),this.dataId=e,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}return t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),A(1===this.size,(function(){return"The array must have only 1 element."})),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,n){return this.throwIfDisposed(),this.reshape([t,n])},t.prototype.as3D=function(t,n,e){return this.throwIfDisposed(),this.reshape([t,n,e])},t.prototype.as4D=function(t,n,e,r){return this.throwIfDisposed(),this.reshape([t,n,e,r])},t.prototype.as5D=function(t,n,e,r,o){return this.throwIfDisposed(),this.reshape([t,n,e,r,o])},t.prototype.asType=function(t){return this.throwIfDisposed(),wt.cast(this,t)},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.buffer=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return[4,this.data()];case 1:return t=n.sent(),[2,wt.buffer(this.shape,this.dtype,t)]}}))}))},t.prototype.bufferSync=function(){return wt.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.array=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return[4,this.data()];case 1:return t=n.sent(),[2,ot(this.shape,t)]}}))}))},t.prototype.arraySync=function(){return ot(this.shape,this.dataSync())},t.prototype.data=function(){return s(this,void 0,void 0,(function(){var t,n;return c(this,(function(e){switch(e.label){case 0:return this.throwIfDisposed(),t=bt().read(this.dataId),"string"!==this.dtype?[3,2]:[4,t];case 1:n=e.sent();try{return[2,n.map((function(t){return lt(t)}))]}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}e.label=2;case 2:return[2,t]}}))}))},t.prototype.dataSync=function(){this.throwIfDisposed();var t=bt().readSync(this.dataId);if("string"===this.dtype)try{return t.map((function(t){return lt(t)}))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t},t.prototype.bytes=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),[4,bt().read(this.dataId)];case 1:return t=n.sent(),"string"===this.dtype?[2,t]:[2,new Uint8Array(t.buffer)]}}))}))},t.prototype.dispose=function(){this.isDisposed||(bt().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,"isDisposed",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},t.prototype.toFloat=function(){return this.asType("float32")},t.prototype.toInt=function(){return this.asType("int32")},t.prototype.toBool=function(){return this.asType("bool")},t.prototype.print=function(t){return void 0===t&&(t=!1),wt.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),wt.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),wt.expandDims(this,t)},t.prototype.cumsum=function(t,n,e){return void 0===t&&(t=0),void 0===n&&(n=!1),void 0===e&&(e=!1),wt.cumsum(this,t,n,e)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),wt.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),wt.clone(this)},t.prototype.toString=function(t){return void 0===t&&(t=!1),function(t,n,e,r){var o=et(n),i=function(t,n,e,r){var o=F(n),i=r[r.length-1],a=new Array(i).fill(0),u=n.length,s="complex64"===e?yt(t):t;if(u>1)for(var c=0;c<o/i;c++)for(var l=c*i,f=0;f<i;f++)a[f]=Math.max(a[f],mt(s[l+f],0,e).length);return a}(t,n,e,o),a=n.length,u=function t(n,e,r,o,i,a){void 0===a&&(a=!0);var u="complex64"===r?2:1,s=e[0],c=e.length;if(0===c)return"complex64"===r?[mt(yt(n)[0],0,r)]:"bool"===r?[gt(n[0])]:[n[0].toString()];if(1===c){if(s>20){var l=3*u,f=Array.from(n.slice(0,l)),h=Array.from(n.slice((s-3)*u,s*u));return"complex64"===r&&(f=yt(f),h=yt(h)),["["+f.map((function(t,n){return mt(t,i[n],r)})).join(", ")+", ..., "+h.map((function(t,n){return mt(t,i[s-3+n],r)})).join(", ")+"]"]}return["["+("complex64"===r?yt(n):Array.from(n)).map((function(t,n){return mt(t,i[n],r)})).join(", ")+"]"]}var d=e.slice(1),p=o.slice(1),v=o[0]*u,m=[];if(s>20){for(var g=0;g<3;g++){var y=(x=g*v)+v;m.push.apply(m,t(n.slice(x,y),d,r,p,i,!1))}for(m.push("..."),g=s-3;g<s;g++)y=(x=g*v)+v,m.push.apply(m,t(n.slice(x,y),d,r,p,i,g===s-1))}else for(g=0;g<s;g++){var x;y=(x=g*v)+v,m.push.apply(m,t(n.slice(x,y),d,r,p,i,g===s-1))}var b=2===c?",":"";for(m[0]="["+m[0]+b,g=1;g<m.length-1;g++)m[g]=" "+m[g]+b;var w=",\n";for(g=2;g<c;g++)w+="\n";return m[m.length-1]=" "+m[m.length-1]+"]"+(a?"":w),m}(t,n,e,o,i),s=["Tensor"];return r&&(s.push("  dtype: "+e),s.push("  rank: "+a),s.push("  shape: ["+n+"]"),s.push("  values:")),s.push(u.map((function(t){return"    "+t})).join("\n")),s.join("\n")}(this.dataSync(),this.shape,this.dtype,t)},t.prototype.gather=function(t,n){return void 0===n&&(n=0),this.throwIfDisposed(),wt.gather(this,t,n)},t.prototype.matMul=function(t,n,e){return void 0===n&&(n=!1),void 0===e&&(e=!1),this.throwIfDisposed(),wt.matMul(this,t,n,e)},t.prototype.dot=function(t){return this.throwIfDisposed(),wt.dot(this,t)},t.prototype.norm=function(t,n,e){return void 0===t&&(t="euclidean"),void 0===n&&(n=null),void 0===e&&(e=!1),this.throwIfDisposed(),wt.norm(this,t,n,e)},t.prototype.slice=function(t,n){return this.throwIfDisposed(),wt.slice(this,t,n)},t.prototype.reverse=function(t){return this.throwIfDisposed(),wt.reverse(this,t)},t.prototype.concat=function(n,e){return void 0===e&&(e=0),this.throwIfDisposed(),n instanceof t&&(n=[n]),wt.concat([this].concat(n),e)},t.prototype.split=function(t,n){return void 0===n&&(n=0),this.throwIfDisposed(),wt.split(this,t,n)},t.prototype.stack=function(t,n){return void 0===n&&(n=0),wt.stack([this,t],n)},t.prototype.unstack=function(t){return void 0===t&&(t=0),wt.unstack(this,t)},t.prototype.batchNormalization=function(t,n,e,r,o){return void 0===e&&(e=.001),Ct("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"),this.batchNorm(t,n,o,r,e)},t.prototype.all=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.all(this,t,n)},t.prototype.any=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.any(this,t,n)},t.prototype.logSumExp=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.logSumExp(this,t,n)},t.prototype.sum=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.sum(this,t,n)},t.prototype.prod=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.prod(this,t,n)},t.prototype.mean=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.mean(this,t,n)},t.prototype.min=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.min(this,t,n)},t.prototype.max=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.max(this,t,n)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),wt.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),wt.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),wt.cast(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),wt.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),wt.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),wt.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),wt.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),wt.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),wt.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),wt.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),wt.mulStrict(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),wt.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),wt.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),wt.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),wt.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),wt.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),wt.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),wt.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),wt.modStrict(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),wt.squaredDifferenceStrict(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),wt.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),wt.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),wt.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),wt.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),wt.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),wt.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),wt.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),wt.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),wt.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),wt.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),wt.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),wt.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),wt.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),wt.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),wt.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),wt.logicalXor(this,t)},t.prototype.where=function(t,n){return this.throwIfDisposed(),wt.where(t,this,n)},t.prototype.neg=function(){return this.throwIfDisposed(),wt.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),wt.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),wt.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),wt.sign(this)},t.prototype.isNaN=function(){return this.throwIfDisposed(),wt.isNaN(this)},t.prototype.isInf=function(){return this.throwIfDisposed(),wt.isInf(this)},t.prototype.isFinite=function(){return this.throwIfDisposed(),wt.isFinite(this)},t.prototype.exp=function(){return this.throwIfDisposed(),wt.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),wt.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),wt.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),wt.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),wt.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),wt.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),wt.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),wt.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),wt.abs(this)},t.prototype.clipByValue=function(t,n){return this.throwIfDisposed(),wt.clipByValue(this,t,n)},t.prototype.relu=function(){return this.throwIfDisposed(),wt.relu(this)},t.prototype.relu6=function(){return this.throwIfDisposed(),wt.relu6(this)},t.prototype.elu=function(){return this.throwIfDisposed(),wt.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),wt.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),wt.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),wt.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),wt.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),wt.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),wt.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),wt.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),wt.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),wt.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),wt.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),wt.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),wt.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),wt.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),wt.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),wt.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),wt.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),wt.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),wt.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),wt.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),wt.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),wt.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),wt.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),wt.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),wt.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),wt.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,n){return void 0===n&&(n=!1),this.throwIfDisposed(),wt.image.resizeBilinear(this,t,n)},t.prototype.resizeNearestNeighbor=function(t,n){return void 0===n&&(n=!1),this.throwIfDisposed(),wt.image.resizeNearestNeighbor(this,t,n)},t.prototype.conv1d=function(t,n,e,r,o,i){return void 0===r&&(r="NWC"),void 0===o&&(o=1),this.throwIfDisposed(),wt.conv1d(this,t,n,e,r,o,i)},t.prototype.conv2d=function(t,n,e,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),wt.conv2d(this,t,n,e,r,o,i)},t.prototype.conv2dTranspose=function(t,n,e,r,o){return this.throwIfDisposed(),wt.conv2dTranspose(this,t,n,e,r,o)},t.prototype.depthwiseConv2D=function(t,n,e,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),wt.depthwiseConv2d(this,t,n,e,r,o,i)},t.prototype.separableConv2d=function(t,n,e,r,o,i){return void 0===o&&(o=[1,1]),void 0===i&&(i="NHWC"),this.throwIfDisposed(),wt.separableConv2d(this,t,n,e,r,o,i)},t.prototype.avgPool=function(t,n,e,r){return this.throwIfDisposed(),wt.avgPool(this,t,n,e,r)},t.prototype.maxPool=function(t,n,e,r){return this.throwIfDisposed(),wt.maxPool(this,t,n,e,r)},t.prototype.localResponseNormalization=function(t,n,e,r){return void 0===t&&(t=5),void 0===n&&(n=1),void 0===e&&(e=1),void 0===r&&(r=.5),wt.localResponseNormalization(this,t,n,e,r)},t.prototype.pool=function(t,n,e,r,o){return this.throwIfDisposed(),wt.pool(this,t,n,e,r,o)},t.prototype.variable=function(t,n,e){return void 0===t&&(t=!0),this.throwIfDisposed(),bt().makeVariable(this,t,n,e)},t.prototype.unsortedSegmentSum=function(t,n){return this.throwIfDisposed(),wt.unsortedSegmentSum(this,t,n)},t.prototype.batchToSpaceND=function(t,n){return this.throwIfDisposed(),wt.batchToSpaceND(this,t,n)},t.prototype.spaceToBatchND=function(t,n){return this.throwIfDisposed(),wt.spaceToBatchND(this,t,n)},t.prototype.topk=function(t,n){return void 0===t&&(t=1),void 0===n&&(n=!0),this.throwIfDisposed(),wt.topk(this,t,n)},t.prototype.stridedSlice=function(t,n,e,r,o,i,a,u){return void 0===r&&(r=0),void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===u&&(u=0),this.throwIfDisposed(),wt.stridedSlice(this,t,n,e,r,o,i,a,u)},t.prototype.depthToSpace=function(t,n){return this.throwIfDisposed(),wt.depthToSpace(this,t,n)},t.prototype.fft=function(){return this.throwIfDisposed(),wt.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),wt.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),wt.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),wt.spectral.irfft(this)},t}();Object.defineProperty(Et,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var Rt,It,kt,St,At,Tt=function(t){function n(n,e,r,o){var i=t.call(this,n.shape,n.dtype,n.dataId,o)||this;return i.trainable=e,i.name=r,i}return u(n,t),n.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value ("+t.dtype+") and previous value ("+this.dtype+") must match");if(!_(t.shape,this.shape))throw new Error("shape of the new value ("+t.shape+") and previous value ("+this.shape+") must match");bt().disposeTensor(this),this.dataId=t.dataId,bt().incRef(this,null)},n.prototype.dispose=function(){bt().disposeVariable(this),this.isDisposedInternal=!0},n}(Et);Object.defineProperty(Tt,Symbol.hasInstance,{value:function(t){return t instanceof Et&&null!=t.assign&&t.assign instanceof Function}}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(Rt||(Rt={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(It||(It={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(kt||(kt={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(St||(St={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(At||(At={}));var Dt={float32:St,int32:It,bool:kt,complex64:At};function Nt(t,n){if("string"===t||"string"===n){if("string"===t&&"string"===n)return"string";throw new Error("Can not upcast "+t+" with "+n)}return Dt[t][n]}function Ft(t){return Nt(t,"int32")}function _t(t,n){if(t.dtype===n.dtype)return[t,n];var e=Nt(t.dtype,n.dtype);return[t.cast(e),n.cast(e)]}function Ot(t,n){A(t.dtype===n.dtype,(function(){return"The dtypes of the first("+t.dtype+") and second("+n.dtype+") input must match"}))}function Mt(t){var n=[];return function t(n,e,r){if(null!=n)if(n instanceof Et)e.push(n);else if(o=n,Array.isArray(o)||"object"==typeof o){var o,i=n;for(var a in i){var u=i[a];r.has(u)||(r.add(u),t(u,e,r))}}}(t,n,new Set),n}var Bt,Pt=Object.freeze({makeTypesMatch:_t,assertTypesMatch:Ot,isTensorInList:function(t,n){return n.some((function(n){return n.id===t.id}))},getTensorsInContainer:Mt}),Lt=function(){function t(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return t.prototype.dispose=function(){for(var t in this.registeredVariables)this.registeredVariables[t].dispose()},t}(),Wt=function(){function t(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Lt}return t.prototype.ready=function(){return s(this,void 0,void 0,(function(){var t,n,e;return c(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return[2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return[2];t=this.getSortedBackends(),n=0,r.label=1;case 1:return n<t.length?(e=t[n],[4,this.initializeBackend(e).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(e)]:[3,4];case 3:return r.sent(),[2];case 4:return n++,[3,1];case 5:throw new Error("Could not initialize any backends, all backend initializations failed.")}}))}))},Object.defineProperty(t.prototype,"backend",{get:function(){if(null!=this.pendingBackendInit)throw new Error("Backend '"+this.backendName+"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");if(null==this.backendInstance){var t=this.initializeBackendsAndReturnBest(),n=t.name;if(t.asyncInit)throw new Error("The highest priority backend '"+n+"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");this.setBackend(n)}return this.backendInstance},enumerable:!0,configurable:!0}),t.prototype.backendNames=function(){return Object.keys(this.registryFactory)},t.prototype.findBackend=function(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;if(this.initializeBackend(t).asyncInit)return null}return this.registry[t]},t.prototype.findBackendFactory=function(t){return t in this.registryFactory?this.registryFactory[t].factory:null},t.prototype.registerBackend=function(t,n,e){return void 0===e&&(e=1),t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:n,priority:e},!0)},t.prototype.setBackend=function(t){return s(this,void 0,void 0,(function(){var n,e,r;return c(this,(function(o){switch(o.label){case 0:if(null==this.registryFactory[t])throw new Error("Backend name '"+t+"' not found in registry");return this.backendName=t,null!=this.registry[t]?[3,4]:(this.backendInstance=null,n=this.initializeBackend(t),e=n.success,n.asyncInit?[4,e]:[3,2]);case 1:return r=o.sent(),[3,3];case 2:r=e,o.label=3;case 3:if(!r)return[2,!1];o.label=4;case 4:return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new pt(this.backendInstance),[2,!0]}}))}))},t.prototype.setupRegisteredKernels=function(){var t=this;y(this.backendName).forEach((function(n){null!=n.setupFunc&&n.setupFunc(t.backendInstance)}))},t.prototype.disposeRegisteredKernels=function(t){var n=this;y(t).forEach((function(e){null!=e.disposeFunc&&e.disposeFunc(n.registry[t])}))},t.prototype.initializeBackend=function(t){var n=this,e=this.registryFactory[t];if(null==e)throw new Error("Cannot initialize backend "+t+", no registration found.");try{var r=e.factory();if(Promise.resolve(r)===r){var o=++this.pendingBackendInitId,i=r.then((function(e){return!(o<n.pendingBackendInitId||(n.registry[t]=e,n.pendingBackendInit=null,0))})).catch((function(e){return!(o<n.pendingBackendInitId||(n.pendingBackendInit=null,console.warn("Initialization of backend "+t+" failed"),console.warn(e.stack||e.message),1))}));return this.pendingBackendInit=i,{success:i,asyncInit:!0}}return this.registry[t]=r,{success:!0,asyncInit:!1}}catch(n){return console.warn("Initialization of backend "+t+" failed"),console.warn(n.stack||n.message),{success:!1,asyncInit:!1}}},t.prototype.removeBackend=function(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)},t.prototype.getSortedBackends=function(){var t=this;if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((function(n,e){return t.registryFactory[e].priority-t.registryFactory[n].priority}))},t.prototype.initializeBackendsAndReturnBest=function(){for(var t=this.getSortedBackends(),n=0;n<t.length;n++){var e=t[n],r=this.initializeBackend(e),o=r.success,i=r.asyncInit;if(i||o)return{name:e,asyncInit:i}}throw new Error("Could not initialize any backends, all backend initializations failed.")},t.prototype.moveData=function(t,n){var e=this.state.tensorInfo.get(n),r=e.backend,o=this.readSync(n);r.disposeData(n),e.backend=t,t.move(n,o,e.shape,e.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++},t.prototype.tidy=function(t,n){var e,r=this,o=null;if(null==n){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");n=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof n)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}return this.scopedRun((function(){return r.startScope(o)}),(function(){return r.endScope(e)}),(function(){return(e=n())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),e}))},t.prototype.scopedRun=function(t,n,e){t();try{var r=e();return n(),r}catch(t){throw n(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.clone=function(t){var n=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),e={x:t};return this.addTapeNode(this.state.activeScope.name,e,[n],(function(t){return{x:function(){return t.toFloat()}}}),[],{}),n},t.prototype.runKernel=function(t,n,e,r,o){return this.runKernelFunc(null,n,null,t,e,r,o)},t.prototype.shouldCheckForMemLeaks=function(){return this.ENV.getBool("IS_TEST")},t.prototype.checkKernelForMemLeak=function(t,n,e){var r=this.backend.numDataIds(),o=0;e.forEach((function(t){o+="complex64"===t.dtype?3:1}));var i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=r-n-o-i;if(a>0)throw new Error("Backend '"+this.backendName+"' has an internal memory leak ("+a+" data ids) after running '"+t+"'")},t.prototype.runKernelFunc=function(t,n,e,r,o,i,a){var u,s=this,c=[],l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");var f,h=this.state.numBytes,d=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);var p,v=m(r,this.backendName);if(null!=v)f=function(){var t=s.backend.numDataIds();p=v.kernelFunc({inputs:n,attrs:o,backend:s.backend});var e=Array.isArray(p)?p:[p];s.shouldCheckForMemLeaks()&&s.checkKernelForMemLeak(r,t,e);var u=e.map((function(t){var n=t.dataId,e=t.shape,r=t.dtype;return s.makeTensorFromDataId(n,e,r)}));if(l){var f=s.getTensorsForGradient(r,n,u);if(null==f){null==a&&(a=[]);var h=u.filter((function(t,n){return a[n]}));f=(i||[]).slice().concat(h)}c=s.saveTensorsForBackwardMode(f)}return u};else{var g=function(t){l&&(c=t.map((function(t){return s.keep(s.clone(t))})))};f=function(){var n=s.backend.numDataIds();p=s.tidy((function(){return t(s.backend,g)}));var e=Array.isArray(p)?p:[p];return s.shouldCheckForMemLeaks()&&s.checkKernelForMemLeak(r,n,e),e}}return this.scopedRun((function(){return s.state.kernelDepth++}),(function(){return s.state.kernelDepth--}),(function(){u=s.ENV.getBool("DEBUG")?s.profiler.profileKernel(r,n,(function(){return f()})):f()})),l&&this.addTapeNode(r,n,u,e,c,o),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-h,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-d,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(n).map((function(t){return n[t].shape})),outputShapes:u.map((function(t){return t.shape}))}),Array.isArray(p)?u:u[0]},t.prototype.saveTensorsForBackwardMode=function(t){var n=this;return t.map((function(t){return n.keep(n.clone(t))}))},t.prototype.getTensorsForGradient=function(t,n,e){var r=g(t);if(null!=r){var o=r.inputsToSave||[],i=r.outputsToSave||[],a=void 0;r.saveAllInputs?(A(Array.isArray(n),(function(){return"saveAllInputs is true, expected inputs to be an array."})),a=Object.keys(n).map((function(t){return n[t]}))):a=o.map((function(t){return n[t]}));var u=e.filter((function(t,n){return i[n]}));return a.concat(u)}return null},t.prototype.makeTensor=function(t,n,e,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");e=e||"float32",r=r||this.backend;var o=t;"string"===e&&$(t[0])&&(o=t.map((function(t){return ct(t)})));var i=r.write(o,n,e),a=new Et(n,e,i,this.nextTensorId());if(this.incRef(a,r),"string"===e){var u=this.state.tensorInfo.get(i),s=Y(o);this.state.numBytes+=s-u.bytes,u.bytes=s}return a},t.prototype.makeTensorFromDataId=function(t,n,e,r){var o=new Et(n,e=e||"float32",t,this.nextTensorId());return this.incRef(o,r),o},t.prototype.makeVariable=function(t,n,e,r){void 0===n&&(n=!0),e=e||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.asType(r));var o=new Tt(t,n,e,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error("Variable with name "+o.name+" was already registered");return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o},t.prototype.incRef=function(t,n){var e=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===e){this.state.numDataBuffers++;var r=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(r=t.size*X(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:n||this.backend,dtype:t.dtype,shape:t.shape,bytes:r,refCount:0}),this.state.numBytes+=r}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof Tt||this.track(t)},t.prototype.disposeTensor=function(t){if(this.state.tensorInfo.has(t.dataId)){this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;var n=this.state.tensorInfo.get(t.dataId);n.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=n.bytes),this.state.numDataBuffers--,n.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}},t.prototype.disposeVariables=function(){for(var t in this.state.registeredVariables){var n=this.state.registeredVariables[t];this.disposeVariable(n)}},t.prototype.disposeVariable=function(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t},t.prototype.profile=function(t){return s(this,void 0,void 0,(function(){var n,e;return c(this,(function(r){return this.state.profiling=!0,n=this.state.numBytes,e=this.state.numTensors,this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(t){return t.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-n,this.state.activeProfile.newTensors=this.state.numTensors-e,[2,this.state.activeProfile]}))}))},t.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},t.prototype.addTapeNode=function(t,n,e,r,o,i){var a=this,u={id:this.state.nextTapeNodeId++,kernelName:t,inputs:n,outputs:e,saved:o},s=g(t);null!=s&&(r=s.gradFunc),null!=r&&(u.gradient=function(t){return t=t.map((function(t,n){if(null==t){var r=e[n],o=at(r.size,r.dtype);return a.makeTensor(o,r.shape,r.dtype)}return t})),r(t.length>1?t:t[0],o,i)}),this.state.activeTape.push(u)},t.prototype.keep=function(t){return t.kept=!0,t},t.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++},t.prototype.endTape=function(){this.state.gradientDepth--},t.prototype.startScope=function(t){var n={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(n.name=t),this.state.scopeStack.push(n),this.state.activeScope=n},t.prototype.endScope=function(t){for(var n=this,e=Mt(t),r=new Set(e.map((function(t){return t.id}))),o=0;o<this.state.activeScope.track.length;o++){var i=this.state.activeScope.track[o];i.kept||r.has(i.id)||i.dispose()}var a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach((function(t){t.kept||t.scopeId!==a.id||n.track(t)}))},t.prototype.gradients=function(t,n,e,r){var o=this;if(void 0===r&&(r=!1),A(n.length>0,(function(){return"gradients() received an empty list of xs."})),null!=e&&"float32"!==e.dtype)throw new Error("dy must have 'float32' dtype, but has '"+e.dtype+"'");var i=this.scopedRun((function(){return o.startTape()}),(function(){return o.endTape()}),(function(){return o.tidy("forward",t)}));A(i instanceof Et,(function(){return"The result y returned by f() must be a tensor."}));var a=function(t,n,e){for(var r={},o={},i=0;i<n.length;i++)r[n[i].id]=!0;for(i=0;i<t.length;i++){var a=(p=t[i]).inputs;for(var u in a){for(var s=a[u],c=!1,l=0;l<n.length;l++)if(r[s.id]){p.outputs.forEach((function(t){return r[t.id]=!0})),c=!0,o[p.id]=!0;break}if(c)break}}var f={};f[e.id]=!0;var h={};for(i=t.length-1;i>=0;i--)for(a=(p=t[i]).inputs,l=0;l<p.outputs.length;l++)if(f[p.outputs[l].id]){for(var u in a)f[a[u].id]=!0,h[p.id]=!0;break}var d=[];for(i=0;i<t.length;i++){var p;if(o[(p=t[i]).id]&&h[p.id]){var v={};for(var u in p.inputs){var m=p.inputs[u];r[m.id]&&(v[u]=m)}var g=Object.assign({},p);g.inputs=v,g.outputs=p.outputs,d.push(g)}}return d}(this.state.activeTape,n,i);if(!r&&0===a.length&&n.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(function(){var t,r,u={};u[i.id]=null==e?(r=it(F(t=i.shape),"float32"),Ut.makeTensor(r,t,"float32")):e,function(t,n,e){for(var r=function(r){var o=n[r],i=[];if(o.outputs.forEach((function(n){var e=t[n.id];null!=e?i.push(e):i.push(null)})),null==o.gradient)throw new Error("Cannot compute gradient: gradient function not found for "+o.kernelName+".");var a=o.gradient(i),u=function(n){if(!(n in a))throw new Error("Cannot backprop through input "+n+". Available gradients found: "+Object.keys(a)+".");var r=e((function(){return a[n]()}));if("float32"!==r.dtype)throw new Error("Error in gradient for op "+o.kernelName+". The gradient of input "+n+" must have 'float32' dtype, but has '"+r.dtype+"'");var i=o.inputs[n];if(!_(r.shape,i.shape))throw new Error("Error in gradient for op "+o.kernelName+". The gradient of input '"+n+"' has shape '"+r.shape+"', which does not match the shape of the input '"+i.shape+"'");if(null==t[i.id])t[i.id]=r;else{var u=t[i.id];t[i.id]=u.add(r),u.dispose()}};for(var s in o.inputs)u(s)},o=n.length-1;o>=0;o--)r(o)}(u,a,(function(t){return o.tidy(t)}));var s=n.map((function(t){return u[t.id]}));return 0===o.state.gradientDepth&&(o.state.activeTape.forEach((function(t){for(var n=0,e=t.saved;n<e.length;n++)e[n].dispose()})),o.state.activeTape=null),{value:i,grads:s}}))},t.prototype.customGrad=function(t){var n=this;return A(tt(t),(function(){return"The f passed in customGrad(f) must be a function."})),function(){for(var e,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];A(r.every((function(t){return t instanceof Et})),(function(){return"The args passed in customGrad(f)(x1, x2,...) must all be tensors"}));var i={};return r.forEach((function(t,n){i[n]=t})),n.runKernelFunc((function(n,o){return A((e=t.apply(void 0,r.concat([o]))).value instanceof Et,(function(){return"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"})),A(tt(e.gradFunc),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."})),e.value}),i,(function(t,n){var o=e.gradFunc(t,n),i=Array.isArray(o)?o:[o];A(i.length===r.length,(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."})),A(i.every((function(t){return t instanceof Et})),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."}));var a={};return i.forEach((function(t,n){a[n]=function(){return t}})),a}))}},t.prototype.readSync=function(t){return this.state.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.state.tensorInfo.get(t).backend.read(t)},t.prototype.time=function(t){return s(this,void 0,void 0,(function(){var n,e;return c(this,(function(r){switch(r.label){case 0:return n=ut(),[4,this.backend.time(t)];case 1:return(e=r.sent()).wallMs=ut()-n,[2,e]}}))}))},t.prototype.track=function(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t},Object.defineProperty(t.prototype,"registeredVariables",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),t.prototype.reset=function(){for(var t in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Lt,this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null},t.nextTensorId=0,t.nextVariableId=0,t}(),Ut=function(){var n=function(){if(null==Bt){var n=void 0;if("undefined"!=typeof window)n=window;else if(void 0!==t)n=t;else if(void 0!==r)n=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");n=self}Bt=n}return Bt}();if(null==n._tfengine){var e=new l(n);n._tfengine=new Wt(e)}return function(t){d=t}(n._tfengine.ENV),bt=function(){return n._tfengine},n._tfengine}();function zt(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Vt=h();Vt.registerFlag("DEBUG",(function(){return!1}),(function(t){t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Vt.registerFlag("IS_BROWSER",(function(){return zt()})),Vt.registerFlag("IS_NODE",(function(){return void 0!==r&&void 0!==r.versions&&void 0!==r.versions.node})),Vt.registerFlag("IS_CHROME",(function(){return"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),Vt.registerFlag("PROD",(function(){return!1})),Vt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(function(){return Vt.getBool("DEBUG")})),Vt.registerFlag("DEPRECATION_WARNINGS_ENABLED",(function(){return!0})),Vt.registerFlag("IS_TEST",(function(){return!1}));var Gt,Ht,qt,Kt={},jt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Xt(t,n){Kt[t]=n}function Yt(t){t in Kt||(Kt[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var n=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);return n.addEventListener("webglcontextlost",(function(n){n.preventDefault(),delete Kt[t]}),!1),1===t?n.getContext("webgl",jt)||n.getContext("experimental-webgl",jt):n.getContext("webgl2",jt)}(t));var n=Kt[t];return n.isContextLost()?(delete Kt[t],Yt(t)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),Kt[t])}function $t(t,n){return[n,t]}function Qt(t){var n=F(t);return B(Math.ceil(n/4))}function Jt(t,n){return[Math.max(1,Math.ceil(n/2)),Math.max(1,Math.ceil(t/2))]}function Zt(t,n){var e,r,o,i,a,u,s,c,l,f=t;return 2===h().getNumber("WEBGL_VERSION")?(e=f.R32F,r=f.R16F,o=f.RGBA16F,i=f.RGBA32F,a=f.RED,u=4,s=1,c=f.HALF_FLOAT,l=f.FLOAT):(e=t.RGBA,r=t.RGBA,o=t.RGBA,i=f.RGBA,a=t.RGBA,u=4,s=4,c=null!=n?n.HALF_FLOAT_OES:null,l=t.FLOAT),{internalFormatFloat:e,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:t.RGBA,downloadUnpackNumChannels:u,defaultNumChannels:s,textureTypeHalfFloat:c,textureTypeFloat:l}}function tn(t,n,e){var r=e();return n&&function(t){var n=t.getError();if(n!==t.NO_ERROR)throw new Error("WebGL Error: "+en(t,n))}(t),r}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(Gt||(Gt={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(Ht||(Ht={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(qt||(qt={}));function nn(t){return!!(h().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function en(t,n){switch(n){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+n}}function rn(t,n,e){return Sn(t,n,(function(){return t.getExtension(e)}),'Extension "'+e+'" not supported on this browser.')}function on(t,n,e){var r=Sn(t,n,(function(){return t.createShader(t.VERTEX_SHADER)}),"Unable to create vertex WebGLShader.");if(tn(t,n,(function(){return t.shaderSource(r,e)})),tn(t,n,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}function an(t,n,e){var r=Sn(t,n,(function(){return t.createShader(t.FRAGMENT_SHADER)}),"Unable to create fragment WebGLShader.");if(tn(t,n,(function(){return t.shaderSource(r,e)})),tn(t,n,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,n){var e=cn.exec(n);if(null==e)return console.log("Couldn't parse line number in error: "+n),void console.log(t);for(var r=+e[1],o=t.split("\n"),i=o.length.toString().length+2,a=o.map((function(t,n){return P((n+1).toString(),i)+t})),u=0,s=0;s<a.length;s++)u=Math.max(a[s].length,u);var c=a.slice(0,r-1),l=a.slice(r-1,r),f=a.slice(r);console.log(c.join("\n")),console.log(n.split("\n")[0]),console.log("%c "+P(l[0],u),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(f.join("\n"))}(e,t.getShaderInfoLog(r)),new Error("Failed to compile fragment shader.");return r}var un,sn,cn=/ERROR: [0-9]+:([0-9]+):/g;function ln(t,n){return Sn(t,n,(function(){return t.createProgram()}),"Unable to create WebGLProgram.")}function fn(t,n,e){if(tn(t,n,(function(){return t.linkProgram(e)})),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}function hn(t,n,e){if(tn(t,n,(function(){return t.validateProgram(e)})),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function dn(t,n,e){var r=Sn(t,n,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return tn(t,n,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),tn(t,n,(function(){return t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)})),r}function pn(t,n,e){var r=Sn(t,n,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return tn(t,n,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)})),tn(t,n,(function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW)})),r}function vn(t,n){return Sn(t,n,(function(){return t.createTexture()}),"Unable to create WebGLTexture.")}function mn(t,n){var e=h().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||n<=0){var r="["+t+"x"+n+"]";throw new Error("Requested texture size "+r+" is invalid.")}if(t>e||n>e)throw r="["+t+"x"+n+"]",new Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU ["+e+"x"+e+"].")}function gn(t,n){return Sn(t,n,(function(){return t.createFramebuffer()}),"Unable to create WebGLFramebuffer.")}function yn(t,n,e,r,o,i,a,u){var s=t.getAttribLocation(e,r);return-1!==s&&(tn(t,n,(function(){return t.bindBuffer(t.ARRAY_BUFFER,o)})),tn(t,n,(function(){return t.vertexAttribPointer(s,i,t.FLOAT,!1,a,u)})),tn(t,n,(function(){return t.enableVertexAttribArray(s)})),!0)}function xn(t,n,e,r){An(t,r),tn(t,n,(function(){return t.activeTexture(t.TEXTURE0+r)})),tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,e)}))}function bn(t,n,e,r){return Sn(t,n,(function(){return t.getUniformLocation(e,r)}),'uniform "'+r+'" not present in program.')}function wn(t,n,e){return t.getUniformLocation(n,e)}function Cn(t,n,e,r,o,i){tn(t,n,(function(){return xn(t,n,r,i)})),tn(t,n,(function(){return t.uniform1i(o,i)}))}function En(t,n,e,r){tn(t,n,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,r)})),tn(t,n,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)}))}function Rn(t,n,e){tn(t,n,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,e)})),tn(t,n,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)}))}function In(t){var n=t.checkFramebufferStatus(t.FRAMEBUFFER);if(n!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+kn(t,n))}function kn(t,n){switch(n){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+n}}function Sn(t,n,e,r){var o=tn(t,n,(function(){return e()}));if(null==o)throw new Error(r);return o}function An(t,n){var e=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=n+t.TEXTURE0;if(r<t.TEXTURE0||r>e)throw new Error("textureUnit must be in [gl.TEXTURE0, gl.TEXTURE"+e+"].")}function Tn(t,n){return void 0===n&&(n=2),F(t.slice(0,t.length-n))}function Dn(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function Nn(t){var n=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(n=[Tn(t)].concat(Dn(t))),n}function Fn(t,n){var e;void 0===n&&(n=!1);var r=h().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n&&(r*=2,1===(t=t.map((function(n,e){return e>=t.length-2?k(t[e]):t[e]}))).length&&(t=[2,t[0]])),2!==t.length){var o=z(t);t=o.newShape}var i=F(t);if(t.length<=1&&i<=r)return[1,i];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(n){var a=Tn(t),u=2,s=2;return t.length&&(u=(e=Dn(t))[0],s=e[1]),B(i=a*(u/2)*(s/2)).map((function(t){return 2*t}))}return B(i)}function _n(t){return t%2==0}function On(t,n){if(_(t=t.slice(-2),n=n.slice(-2)))return!0;if(!t.length||!n.length)return!0;if(0===t[0]||0===t[1]||0===n[0]||0===n[1])return!0;if(t.length!==n.length){var e=t.slice(-1)[0],r=n.slice(-1)[0];if(e===r)return!0;if(_n(e)&&_n(r)&&(1===t[0]||1===n[0]))return!0}return t[1]===n[1]&&_n(t[0])&&_n(n[0])}function Mn(t){if(null==un){var n=Yt(t);un=n.getParameter(n.MAX_TEXTURE_SIZE)}return un}function Bn(t){if(null==sn){var n=Yt(t);sn=n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,sn)}function Pn(t){if(0===t)return 0;var n=Yt(t);return Ln(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:Ln(n,"EXT_disjoint_timer_query")?1:0}function Ln(t,n){return null!=t.getExtension(n)}function Wn(t){try{if(null!=Yt(t))return!0}catch(t){return!1}return!1}function Un(t){if(0===t)return!1;var n=Yt(t);if(1===t){if(!Ln(n,"OES_texture_float"))return!1}else if(!Ln(n,"EXT_color_buffer_float"))return!1;return Vn(n)}function zn(t){if(0===t)return!1;var n=Yt(t);if(1!==t){if(Ln(n,"EXT_color_buffer_float"))return Vn(n);if(Ln(n,"EXT_color_buffer_half_float")){var e=n.getExtension("EXT_color_buffer_half_float");return function(t,n){var e=Zt(t,n),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r),t.texImage2D(t.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);var o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);var i=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),i}(n,e)}return!1}return!!Ln(n,"OES_texture_float")&&!!Ln(n,"WEBGL_color_buffer_float")&&Vn(n)}function Vn(t){var n=Zt(t),e=t.createTexture();t.bindTexture(t.TEXTURE_2D,e),t.texImage2D(t.TEXTURE_2D,0,n.internalFormatFloat,1,1,0,n.textureFormatFloat,n.textureTypeFloat,null);var r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0);var o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(e),t.deleteFramebuffer(r),o}function Gn(t){return 2===t&&null!=Yt(t).fenceSync}var Hn=Object.freeze({callAndCheck:tn,canBeRepresented:nn,getWebGLErrorMessage:en,getExtensionOrThrow:rn,createVertexShader:on,createFragmentShader:an,createProgram:ln,linkProgram:fn,validateProgram:hn,createStaticVertexBuffer:dn,createStaticIndexBuffer:pn,getNumChannels:function(){return 2===h().getNumber("WEBGL_VERSION")?1:4},createTexture:vn,validateTextureSize:mn,createFramebuffer:gn,bindVertexBufferToProgramAttribute:yn,bindTextureUnit:xn,unbindTextureUnit:function(t,n,e){An(t,e),tn(t,n,(function(){return t.activeTexture(t.TEXTURE0+e)})),tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))},getProgramUniformLocationOrThrow:bn,getProgramUniformLocation:wn,bindTextureToProgramUniformSampler:Cn,bindCanvasToFramebuffer:function(t,n){tn(t,n,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),tn(t,n,(function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)})),tn(t,n,(function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)}))},bindColorTextureToFramebuffer:En,unbindColorTextureFromFramebuffer:Rn,validateFramebuffer:In,getFramebufferErrorMessage:kn,getBatchDim:Tn,getRowsCols:Dn,getShapeAs3D:Nn,getTextureShapeFromLogicalShape:Fn,isReshapeFree:On,getWebGLMaxTextureSize:Mn,resetMaxTextureSize:function(){un=null},resetMaxTexturesInShader:function(){sn=null},getMaxTexturesInShader:Bn,getWebGLDisjointQueryTimerVersion:Pn,hasExtension:Ln,isWebGLVersionEnabled:Wn,isCapableOfRenderingToFloatTexture:Un,isDownloadFloatTextureEnabled:zn,isWebGLFenceEnabled:Gn}),qn=h();function Kn(){h().set("PROD",!0)}function jn(){h().set("DEBUG",!0)}function Xn(){h().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function Yn(t){h().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function $n(){Ut.disposeVariables()}function Qn(){return Ut}function Jn(){return Ut.memory()}function Zn(t){return Ut.profile(t)}function te(t,n){return Ut.tidy(t,n)}function ne(t){Mt(t).forEach((function(t){return t.dispose()}))}function ee(t){return Ut.keep(t)}function re(t){return Ut.time(t)}function oe(t){return Ut.setBackend(t)}function ie(){return Ut.ready()}function ae(){return Ut.backendName}function ue(t){Ut.removeBackend(t)}function se(t){return Ut.findBackend(t)}function ce(t){return Ut.findBackendFactory(t)}function le(t,n,e){return void 0===e&&(e=1),Ut.registerBackend(t,n,e)}function fe(){return Ut.backend}function he(t,n){h().setPlatform(t,n)}function de(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];h().getBool("IS_TEST")||console.warn.apply(console,t)}function pe(t,n){var e=t;if(j(t))return"string"===n?[]:[t.length];if(!Array.isArray(t))return[];for(var r=[];Array.isArray(e)||j(e)&&"string"!==n;)r.push(e.length),e=e[0];return Array.isArray(t)&&h().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(n,e,r){if(r=r||[],Array.isArray(n)||j(n)){A(e.length>0,(function(){return"Element arr["+r.join("][")+"] should be a primitive, but is an array of "+n.length+" elements"})),A(n.length===e[0],(function(){return"Element arr["+r.join("][")+"] should have "+e[0]+" elements, but has "+n.length+" elements"}));for(var o=e.slice(1),i=0;i<n.length;++i)t(n[i],o,r.concat(i))}else A(0===e.length,(function(){return"Element arr["+r.join("][")+"] is a primitive, but should be an array/TypedArray of "+e[0]+" elements"}))}(t,r,[]),r}function ve(t,n,e,r){if(null!=t&&("numeric"!==t&&t!==n||"numeric"===t&&"string"===n))throw new Error("Argument '"+e+"' passed to '"+r+"' must be "+t+" tensor, but got "+n+" tensor")}function me(t,n,e,r){if(void 0===r&&(r="numeric"),t instanceof Et)return ve(r,t.dtype,n,e),t;var o=Z(t);if("string"!==o&&["bool","int32","float32"].indexOf(r)>=0&&(o=r),ve(r,o,n,e),null==t||!j(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){var i=null==t?"null":t.constructor.name;throw new Error("Argument '"+n+"' passed to '"+e+"' must be a Tensor or TensorLike, but got '"+i+"'")}var a=pe(t,o);j(t)||Array.isArray(t)||(t=[t]);var u="string"!==o?rt(t,o,h().getBool("DEBUG")):N(t,[],!0);return Ut.makeTensor(u,a,o)}function ge(t,n,e,r){if(void 0===r&&(r="numeric"),!Array.isArray(t))throw new Error("Argument "+n+" passed to "+e+" must be a `Tensor[]` or `TensorLike[]`");return t.map((function(t,r){return me(t,n+"["+r+"]",e)}),r)}function ye(t,n){for(var e=0;e<t.length;++e)if(t[t.length-e-1]!==n-1-e)return!1;return!0}function xe(t,n,e){for(var r=t.length+n.length,o=[],i=0,a=0,u=0;u<r;u++)-1===e.indexOf(u)?o.push(t[i++]):o.push(n[a++]);return o}function be(t,n){for(var e=[],r=t.length,o=0;o<r;o++)-1===n.indexOf(o)&&e.push(t[o]);return[e,n.map((function(n){return t[n]}))]}function we(t,n){return xe(t,n.map((function(t){return 1})),n)}function Ce(t,n,e){A(ye(n,e),(function(){return t+" supports only inner-most axes for now. Got axes "+n+" and rank-"+e+" input."}))}function Ee(t,n){if(ye(t,n))return null;for(var e=[],r=0;r<n;++r)-1===t.indexOf(r)&&e.push(r);return t.forEach((function(t){return e.push(t)})),e}function Re(t){return t.map((function(t,n){return[n,t]})).sort((function(t,n){return t[1]-n[1]})).map((function(t){return t[0]}))}function Ie(t,n){for(var e=[],r=n-t;r<n;++r)e.push(r);return e}function ke(t,n){var e=t[0].length;t.forEach((function(t,n){A(t.length===e,(function(){return"Error in concat"+e+"D: rank of tensors["+n+"] must be the same as the rank of the rest ("+e+")"}))})),A(n>=0&&n<e,(function(){return"Error in concat"+e+"D: axis must be between 0 and "+(e-1)+"."}));var r=t[0];t.forEach((function(t,o){for(var i=0;i<e;i++)A(i===n||t[i]===r[i],(function(){return"Error in concat"+e+"D: Shape of tensors["+o+"] ("+t+") does not match the shape of the rest ("+r+") along the non-concatenated axis "+o+"."}))}))}function Se(t,n){for(var e=t[0].slice(),r=1;r<t.length;r++)e[n]+=t[r][n];return e}function Ae(t){var n=Object.keys(t);if(1!==n.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+n.length+" keys.");var e=n[0],r=t[e];e.endsWith("_")&&(e=e.substring(0,e.length-1));var o=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];Ut.startScope(e);try{var o=r.apply(void 0,t);return o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Ut.endScope(o),o}catch(t){throw Ut.endScope(null),t}};return Object.defineProperty(o,"name",{value:e,configurable:!0}),o}qn.registerFlag("HAS_WEBGL",(function(){return qn.getNumber("WEBGL_VERSION")>0})),qn.registerFlag("WEBGL_VERSION",(function(){return Wn(2)?2:Wn(1)?1:0})),qn.registerFlag("WEBGL_BUFFER_SUPPORTED",(function(){return 2===qn.get("WEBGL_VERSION")})),qn.registerFlag("WEBGL_CPU_FORWARD",(function(){return!0})),qn.registerFlag("WEBGL_FORCE_F16_TEXTURES",(function(){return!1})),qn.registerFlag("WEBGL_PACK",(function(){return qn.getBool("HAS_WEBGL")})),qn.registerFlag("WEBGL_PACK_NORMALIZATION",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_PACK_CLIP",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_PACK_DEPTHWISECONV",(function(){return!1})),qn.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_PACK_REDUCE",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_LAZILY_UNPACK",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_CONV_IM2COL",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(function(){return Mn(qn.getNumber("WEBGL_VERSION"))})),qn.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(function(){return Bn(qn.getNumber("WEBGL_VERSION"))})),qn.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(function(){var t=qn.getNumber("WEBGL_VERSION");return 0===t?0:Pn(t)})),qn.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(function(){return qn.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&(t=navigator.userAgent||navigator.vendor||window.opera,!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))));var t})),qn.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(function(){return Un(qn.getNumber("WEBGL_VERSION"))})),qn.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(function(){return!qn.getBool("WEBGL_FORCE_F16_TEXTURES")&&qn.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")})),qn.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(function(){return zn(qn.getNumber("WEBGL_VERSION"))})),qn.registerFlag("WEBGL_FENCE_API_ENABLED",(function(){return Gn(qn.getNumber("WEBGL_VERSION"))})),qn.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(function(){return qn.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0})),Ct=Yn;var Te=Ae({complex_:function(t,n){var e=me(t,"real","complex"),r=me(n,"imag","complex");return T(e.shape,r.shape,"real and imag shapes, "+e.shape+" and "+r.shape+", must match in call to tf.complex()."),Ut.runKernelFunc((function(t){return t.complex(e,r)}),{$real:e,$imag:r})}}),De=Ae({real_:function(t){var n=me(t,"input","real");return Ut.runKernelFunc((function(t){return t.real(n)}),{$input:n})}}),Ne=Ae({imag_:function(t){var n=me(t,"input","imag");return Ut.runKernelFunc((function(t){return t.imag(n)}),{$input:n})}});function Fe(t,n,e){return _e(t,n,pe(t,e),e)}function _e(t,n,e,r){if(null==r&&(r=Z(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!j(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=n){st(n);var o=F(n),i=F(e);A(o===i,(function(){return"Based on the provided shape, ["+n+"], the tensor should have "+o+" values but has "+i}));for(var a=0;a<e.length;++a){var u=e[a],s=a!==e.length-1||u!==F(n.slice(a));A(e[a]===n[a]||!s,(function(){return"Error creating a new Tensor. Inferred shape ("+e+") does not match the provided shape ("+n+"). "}))}}return j(t)||Array.isArray(t)||(t=[t]),n=n||e,t="string"!==r?rt(t,r,h().getBool("DEBUG")):N(t,[],!0),Ut.makeTensor(t,n,r)}function Oe(t,n){if((j(t)&&"string"!==n||Array.isArray(t))&&"complex64"!==n)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===n&&j(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return _e(t,[],[],n)}function Me(t,n){D(t);var e=pe(t,n);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return _e(t,null,e,n)}function Be(t,n,e){if(D(t),null!=n&&2!==n.length)throw new Error("tensor2d() requires shape to have two numbers");var r=pe(t,e);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return _e(t,n,r,e)}function Pe(t,n,e){if(D(t),null!=n&&3!==n.length)throw new Error("tensor3d() requires shape to have three numbers");var r=pe(t,e);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return _e(t,n,r,e)}function Le(t,n,e){if(D(t),null!=n&&4!==n.length)throw new Error("tensor4d() requires shape to have four numbers");var r=pe(t,e);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return _e(t,n,r,e)}function We(t,n,e){if(D(t),null!=n&&5!==n.length)throw new Error("tensor5d() requires shape to have five numbers");var r=pe(t,e);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return _e(t,n,r,e)}function Ue(t,n,e){if(D(t),null!=n&&6!==n.length)throw new Error("tensor6d() requires shape to have six numbers");var r=pe(t,e);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return _e(t,n=n||r,r,e)}function ze(t,n,e,r){return void 0===n&&(n=!0),Ut.makeVariable(t,n,e,r)}function Ve(t,n){if(void 0===n&&(n="float32"),"complex64"===n){var e=Ve(t,"float32"),r=Ge(t,"float32");return Te(e,r)}var o=it(F(t),n);return Ut.makeTensor(o,t,n)}function Ge(t,n){if(void 0===n&&(n="float32"),"complex64"===n){var e=Ge(t,"float32"),r=Ge(t,"float32");return Te(e,r)}var o=at(F(t),n);return Ut.makeTensor(o,t,n)}function He(t,n,e){return Ut.runKernelFunc((function(r){return r.fill(t,n,e)}),{})}function qe(t,n,e){if(e<=0)throw new Error("The number of values should be positive.");return Ut.runKernelFunc((function(r){return r.linspace(t,n,e)}),{})}function Ke(t,n,e,r){if(void 0===e&&(e=1),void 0===r&&(r="float32"),0===e)throw new Error("Cannot have a step of zero");if(t===n||t<n&&e<0||n<t&&e>1)return Ge([0],r);var o=at(Math.abs(Math.ceil((n-t)/e)),r);n<t&&1===e&&(e=-1),o[0]=t;for(var i=1;i<o.length;i++)o[i]=o[i-1]+e;return Me(o,r)}var je=Ae({onesLike_:function(t){var n=me(t,"x","onesLike");if("complex64"===n.dtype){var e=je(De(n)),r=Xe(Ne(n));return Te(e,r)}return Ut.runKernelFunc((function(t){return t.onesLike(n)}),{x:n},(function(t,n){return{x:function(){return Xe(t)}}}),"OnesLike")}}),Xe=Ae({zerosLike_:function(t){var n=me(t,"x","zerosLike");return Ut.runKernelFunc((function(t){return t.zerosLike(n)}),{x:n},(function(t,n){return{x:function(){return Xe(t)}}}),"ZerosLike")}}),Ye=Ae({concat_:function(t,n){void 0===n&&(n=0),A(t.length>=1,(function(){return"Pass at least one tensor to concat"}));var e=ge(t,"tensors","concat");"complex64"===e[0].dtype&&e.forEach((function(t){if("complex64"!==t.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype "+t.dtype+". ")})),n=U(n,e[0].shape)[0];var r=Se(e.map((function(t){return t.shape})),n);if(0===F(r))return Fe([],r);if(1===(e=e.filter((function(t){return t.size>0}))).length)return e[0];var o=e.map((function(t){return t.shape}));ke(o,n);var i=e,a={axis:n};return Ut.runKernelFunc((function(t){return t.concat(e,n)}),i,(function(t){var e=o.map((function(t){return t[n]}));return tr(t,e,n).map((function(t){return function(){return t}}))}),"Concat",a)}}),$e=Ae({concat1d_:function(t){return Ye(t,0)}}),Qe=Ae({concat2d_:function(t,n){return Ye(t,n)}}),Je=Ae({concat3d_:function(t,n){return Ye(t,n)}}),Ze=Ae({concat4d_:function(t,n){return Ye(t,n)}}),tr=Ae({split_:function(t,n,e){void 0===e&&(e=0);var r,o=me(t,"x","split");return e=U(e,o.shape)[0],"number"==typeof n?(A(o.shape[e]%n==0,(function(){return"Number of splits must evenly divide the axis."})),r=new Array(n).fill(o.shape[e]/n)):(A(o.shape[e]===n.reduce((function(t,n){return t+n})),(function(){return"The sum of sizes must match the size of the axis dimension."})),r=n),Ut.runKernelFunc((function(t){return t.split(o,r,e)}),{$x:o},(function(t){return{$x:function(){return Ye(t,e)}}}))}});function nr(t,n,e){return void 0===n&&(n="float32"),n=n||"float32",st(t),new xt(t,n,e)}function er(t,n){void 0===n&&(n=!1),console.log(t.toString(n))}var rr=Ae({batchToSpaceND_:function(t,n,e){var r=me(t,"x","batchToSpaceND"),o=n.reduce((function(t,n){return t*n}));return A(r.rank>=1+n.length,(function(){return"input rank is "+r.rank+" but should be > than blockShape.length "+n.length})),A(e.length===n.length,(function(){return"crops.length is "+e.length+" but should be equal to blockShape.length  "+n.length})),A(r.shape[0]%o==0,(function(){return"input tensor batch is "+r.shape[0]+" but is not divisible by the product of the elements of blockShape "+n.join(" * ")+" === "+o})),Ut.runKernelFunc((function(t){return t.batchToSpaceND(r,n,e)}),{$x:r},(function(t){return{$x:function(){return t.spaceToBatchND(n,e)}}}))}}),or=Ae({cast_:function(t,n){var e=me(t,"x","cast");if(!q(n))throw new Error("Failed to cast to unknown dtype "+n);if("string"===n&&"string"!==e.dtype||"string"!==n&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");var r={dtype:n};return Ut.runKernelFunc((function(t){return t.cast(e,n)}),{x:e},(function(t){return{x:function(){return t.clone()}}}),"Cast",r)}}),ir=Ae({cumsum_:function(t,n,e,r){void 0===n&&(n=0),void 0===e&&(e=!1),void 0===r&&(r=!1);var o=me(t,"x","cumsum"),i=Ee([n|=0],o.rank),a=o;null!=i&&(a=o.transpose(i));var u=Ie(1,o.rank)[0],s=Ut.runKernelFunc((function(t){return t.cumsum(a,u,e,r)}),{permutedX:a},(function(t){return{permutedX:function(){return t.cumsum(n,e,!r)}}}));return null!=i&&(s=s.transpose(i)),s}}),ar=Ae({depthToSpace_:function(t,n,e){void 0===e&&(e="NHWC");var r=me(t,"x","depthToSpace"),o="NHWC"===e?r.shape[1]:r.shape[2],i="NHWC"===e?r.shape[2]:r.shape[3],a="NHWC"===e?r.shape[3]:r.shape[1];return A(o*n>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+o+" and "+n+"  for depthToSpace with input shape\n      "+r.shape})),A(i*n>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+i+" and "+n+" for depthToSpace with input shape\n          "+r.shape})),A(a%(n*n)==0,(function(){return"Dimension size must be evenly divisible by "+n*n+" but is "+a+" for depthToSpace with input shape "+r.shape})),Ut.runKernelFunc((function(t){return t.depthToSpace(r,n,e)}),{$x:r})}}),ur=Ae({expandDims_:function(t,n){void 0===n&&(n=0);var e=me(t,"x","expandDims",null);A(n<=e.rank,(function(){return"Axis must be <= rank of the tensor"}));var r=e.shape.slice();return n<0&&(A(-(e.rank+1)<=n,(function(){return"Axis must be in the interval ["+-(e.rank+1)+", "+e.rank+"]"})),n=e.rank+n+1),r.splice(n,0,1),sr(e,r)}}),sr=Ae({reshape_:function(t,n){var e=me(t,"x","reshape",null);n=W(n,e.size),A(e.size===F(n),(function(){return"new shape and old shape must have the same number of elements."}));var r={shape:n};return Ut.runKernelFunc((function(t){return t.reshape(e,n)}),{x:e},(function(t){return{x:function(){return t.reshape(e.shape)}}}),"Reshape",r)}}),cr=Ae({spaceToBatchND_:function(t,n,e){var r=me(t,"x","spaceToBatchND");return A(r.rank>=1+n.length,(function(){return"input rank "+r.rank+" should be > than [blockShape] "+n.length})),A(e.length===n.length,(function(){return"paddings.shape[0] "+e.length+" must be equal to [blockShape] "+n.length})),A(r.shape.reduce((function(t,r,o){return o>0&&o<=n.length?t&&(r+e[o-1][0]+e[o-1][1])%n[o-1]==0:t}),!0),(function(){return"input spatial dimensions "+r.shape.slice(1)+" with paddings "+e.toString()+" must be divisible by blockShapes "+n.toString()})),Ut.runKernelFunc((function(t){return t.spaceToBatchND(r,n,e)}),{$x:r},(function(t){return{$x:function(){return t.batchToSpaceND(n,e)}}}))}}),lr=Ae({squeeze_:function(t,n){var e=me(t,"x","squeeze");return sr(e,z(e.shape,n).newShape)}}),fr=Ae({stack_:function(t,n){void 0===n&&(n=0);var e=ge(t,"tensors","stack");if(A(e.length>=1,(function(){return"Pass at least one tensor to tf.stack"})),1===e.length)return e[0].expandDims(n);var r=e[0].rank,o=e[0].shape,i=e[0].dtype;A(n<=r,(function(){return"Axis must be <= rank of the tensor"})),e.forEach((function(t){T(o,t.shape,"All tensors passed to stack must have matching shapes")})),e.forEach((function(t){A(i===t.dtype,(function(){return"All tensors passed to stack must have matching dtypes"}))}));var a=e.map((function(t){return t.expandDims(n)}));return Ye(a,n)}}),hr=Ae({unstack_:function(t,n){void 0===n&&(n=0),n=n||0;var e=me(t,"x","unstack");A(n>=-e.shape.length&&n<e.shape.length,(function(){return"Axis = "+n+" is not in [-"+e.shape.length+", "+e.shape.length+")"})),n<0&&(n+=e.shape.length);var r={axis:n};return Ut.runKernelFunc((function(t){return t.unstack(e,n)}),{x:e},(function(t){return{x:function(){return fr(t,n)}}}),"Unpack",r)}}),dr=function(t,n){return s(this,void 0,void 0,(function(){var e,r,o,i,a,u,s,l,f,h;return c(this,(function(c){switch(c.label){case 0:return e=me(t,"x","setdiff1d"),r=me(n,"y","setdiff1d"),A(e.dtype===r.dtype,(function(){return"x and y should have the same dtype, but got x ("+e.dtype+") and y ("+r.dtype+")."})),A(1===e.rank,(function(){return"x should be 1D tensor, but got x ("+e.shape+")."})),A(1===r.rank,(function(){return"y should be 1D tensor, but got y ("+r.shape+")."})),[4,e.data()];case 1:return o=c.sent(),[4,r.data()];case 2:for(i=c.sent(),a=new Set(i),u=0,f=0;f<o.length;f++)a.has(o[f])||u++;for(s=new xt([u],e.dtype),l=new xt([u],"int32"),f=0,h=0;f<o.length;f++)a.has(o[f])||(s.values[h]=o[f],l.values[h]=f,h++);return[2,[s.toTensor(),l.toTensor()]]}}))}))};function pr(t,n,e,r){void 0===r&&(r=!0);var o=[];if(r)(o=o.concat(n.slice(0))).push(t[0]/e),o=o.concat(t.slice(1));else{o=o.concat(t[0]);for(var i=n.length,a=0;a<i;++a)o=o.concat([t[a+1]/n[a],n[a]]);o=o.concat(t.slice(i+1))}return o}function vr(t,n,e){void 0===e&&(e=!0);var r=[];if(e){r.push(n);for(var o=n+1;o<t;++o)o<=2*n?(r.push(o),r.push(o-(n+1))):r.push(o)}else{var i=[],a=[];for(o=1;o<t;++o)o>=2*n+1||o%2==1?a.push(o):i.push(o);r.push.apply(r,i),r.push(0),r.push.apply(r,a)}return r}function mr(t,n,e,r){void 0===r&&(r=!0);var o=[];r?o.push(t[0]/e):o.push(t[0]*e);for(var i=1;i<t.length;++i)i<=n.length?r?o.push(n[i-1]*t[i]):o.push(t[i]/n[i-1]):o.push(t[i]);return o}function gr(t,n){for(var e=[0],r=0;r<n;++r)e.push(t[r][0]);return e}function yr(t,n,e){for(var r=t.slice(0,1),o=0;o<e;++o)r.push(t[o+1]-n[o][0]-n[o][1]);return r}var xr="Add",br="AddN",wr="Div",Cr="FusedBatchNorm",Er="SquaredDifference",Rr="Square",Ir="Transpose",kr="NonMaxSuppressionV5",Sr="BroadcastTo",Ar="OneHot",Tr="Identity",Dr="Tile",Nr="PadV2",Fr="FromPixels",_r="MaxPoolWithArgmax",Or=Ae({add_:function(t,n){var e,r=me(t,"a","add"),o=me(n,"b","add");e=_t(r,o),r=e[0],o=e[1];var i={a:r,b:o};return Ut.runKernelFunc((function(t,n){var e=t.add(r,o);return n([r,o]),e}),i,null,xr)}});function Mr(t,n){for(var e=t.length,r=[],o=0;o<e;o++){var i=e-1-o,a=t[i]||1;(n[n.length-1-o]||1)>1&&1===a&&r.unshift(i)}return r}function Br(t,n){for(var e=[],r=0;r<n.length;r++){var o=t[t.length-r-1],i=n.length-r-1,a=n[i];(null==o||1===o&&a>1)&&e.unshift(i)}return e}function Pr(t,n){for(var e=[],r=Math.max(t.length,n.length),o=0;o<r;o++){var i=t[t.length-o-1];null==i&&(i=1);var a=n[n.length-o-1];if(null==a&&(a=1),1===i)e.unshift(a);else if(1===a)e.unshift(i);else{if(i!==a)throw Error("Operands could not be broadcast together with shapes "+t+" and "+n+".");e.unshift(i)}}return e}var Lr=Ae({abs_:function(t){var n=me(t,"x","abs");return"complex64"===n.dtype?Ut.runKernelFunc((function(t){return t.complexAbs(n)}),{$x:n}):Ut.runKernelFunc((function(t,e){var r=t.abs(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return t.mul(e.toFloat().step(-1))}}}),"Abs")}}),Wr=Ae({acos_:function(t){var n=me(t,"x","acos");return Ut.runKernelFunc((function(t,e){var r=t.acos(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.divStrict(Oe(1).sub(e.toFloat().square()).sqrt()).neg()}}}))}}),Ur=Ae({acosh_:function(t){var n=me(t,"x","acosh");return Ut.runKernelFunc((function(t,e){var r=t.acosh(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.divStrict(e.toFloat().square().sub(1).sqrt())}}}))}}),zr=Ae({asin_:function(t){var n=me(t,"x","asin");return Ut.runKernelFunc((function(t,e){var r=t.asin(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.divStrict(Oe(1).sub(e.toFloat().square()).sqrt())}}}))}}),Vr=Ae({asinh_:function(t){var n=me(t,"x","asinh");return Ut.runKernelFunc((function(t,e){var r=t.asinh(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.divStrict(Oe(1).add(e.toFloat().square()).sqrt())}}}))}}),Gr=Ae({atan_:function(t){var n=me(t,"x","atan");return Ut.runKernelFunc((function(t,e){var r=t.atan(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.div(e.toFloat().square().add(1))}}}))}}),Hr=Ae({atanh_:function(t){var n=me(t,"x","atanh");return Ut.runKernelFunc((function(t,e){var r=t.atanh(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.div(Oe(1).sub(e.toFloat().square()))}}}))}}),qr=Ae({ceil_:function(t){var n=me(t,"x","ceil");return Ut.runKernelFunc((function(t){return t.ceil(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),Kr=Ae({clipByValue_:function(t,n,e){var r=me(t,"x","clipByValue");A(n<=e,(function(){return"Error in clip: min ("+n+") must be less than or equal to max ("+e+")."}));var o=[r],i={min:n,max:e};return Ut.runKernelFunc((function(t,o){var i=t.clip(r,n,e);return o([r]),i}),{x:r},(function(t,r){var o=r[0];return{x:function(){return t.where(o.greaterEqual(n).logicalAnd(o.lessEqual(e)),Xe(t))}}}),"ClipByValue",i,o)}}),jr=Ae({cos_:function(t){var n=me(t,"x","cos"),e=[n];return Ut.runKernelFunc((function(t,e){var r=t.cos(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return e.toFloat().sin().neg().mul(t)}}}),"Cos",{},e)}}),Xr=Ae({cosh_:function(t){var n=me(t,"x","cosh");return Ut.runKernelFunc((function(t,e){var r=t.cosh(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return e.toFloat().sinh().mulStrict(t)}}}))}}),Yr=Ae({erf_:function(t){var n=me(t,"x","erf");return A("int32"===n.dtype||"float32"===n.dtype,(function(){return"Input dtype must be `int32` or `float32`."})),"int32"===n.dtype&&(n=n.toFloat()),Ut.runKernelFunc((function(t,e){var r=t.erf(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.mul(e.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}}))}}),$r=Ae({exp_:function(t){var n=me(t,"x","exp");return Ut.runKernelFunc((function(t,e){var r=t.exp(n);return e([r]),r}),{x:n},(function(t,n){return{x:function(){return t.mulStrict(n[0])}}}),"Exp",{},[],[!0])}}),Qr=Ae({expm1_:function(t){var n=me(t,"x","expm1");return Ut.runKernelFunc((function(t,e){var r=t.expm1(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.mul(e.exp())}}}))}}),Jr=Ae({floor_:function(t){var n=me(t,"x","floor");return Ut.runKernelFunc((function(t){return t.floor(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),Zr=Ae({log_:function(t){var n=me(t,"x","log"),e=[n];return Ut.runKernelFunc((function(t,e){var r=t.log(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return t.div(e.toFloat())}}}),"Log",{},e)}}),to=Ae({log1p_:function(t){var n=me(t,"x","log1p");return Ut.runKernelFunc((function(t,e){var r=t.log1p(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.div(e.add(1))}}}))}}),no=Ae({logSigmoid_:function(t){var n=me(t,"x","logSigmoid");return Ut.runKernelFunc((function(t,e){var r=t.softplus(n.neg()).neg();return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.mul(e.neg().sigmoid())}}}))}}),eo=Ae({neg_:function(t){var n=me(t,"x","neg"),e=[n];return Ut.runKernelFunc((function(t){return t.neg(n)}),{x:n},(function(t){return{x:function(){return t.neg()}}}),"Neg",{},e)}}),ro=Ae({reciprocal_:function(t){var n=me(t,"x","reciprocal");return Ut.runKernelFunc((function(t,e){var r=t.reciprocal(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.div(e.square().neg())}}}))}}),oo=Ae({round_:function(t){var n=me(t,"x","round");return Ut.runKernelFunc((function(t){return t.round(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),io=Ae({rsqrt_:function(t){var n=me(t,"x","rsqrt"),e=[n];return Ut.runKernelFunc((function(t,e){var r=t.rsqrt(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return t.div(e.pow(1.5).mul(2)).neg()}}}),"Rsqrt",{},e)}}),ao=Ae({sigmoid_:function(t){var n=me(t,"x","sigmoid");return Ut.runKernelFunc((function(t,e){var r=t.sigmoid(n);return e([r]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return t.mul(e.mul(Oe(1).sub(e)))}}}),"Sigmoid")}}),uo=Ae({sign_:function(t){var n=me(t,"x","sign");return Ut.runKernelFunc((function(t){return t.sign(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),so=Ae({isNaN_:function(t){var n=me(t,"x","isNaN");return Ut.runKernelFunc((function(t){return t.isNaN(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),co=Ae({isInf_:function(t){var n=me(t,"x","isInf");return Ut.runKernelFunc((function(t){return t.isInf(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),lo=Ae({isFinite_:function(t){var n=me(t,"x","isFinite");return Ut.runKernelFunc((function(t){return t.isFinite(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),fo=Ae({sin_:function(t){var n=me(t,"x","sin"),e=[n];return Ut.runKernelFunc((function(t,e){var r=t.sin(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return e.toFloat().cos().mul(t)}}}),"Sin",{},e)}}),ho=Ae({sinh_:function(t){var n=me(t,"x","sinh");return Ut.runKernelFunc((function(t,e){var r=t.sinh(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return e.toFloat().cosh().mulStrict(t)}}}))}}),po=Ae({softplus_:function(t){var n=me(t,"x","softplus");return Ut.runKernelFunc((function(t,e){var r=t.softplus(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.mul(e.sigmoid())}}}))}}),vo=Ae({sqrt_:function(t){var n=me(t,"x","sqrt");return Ut.runKernelFunc((function(t,e){var r=t.sqrt(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.div(e.toFloat().sqrt().mul(2))}}}))}}),mo=Ae({step_:function(t,n){void 0===n&&(n=0);var e=me(t,"x","step");return Ut.runKernelFunc((function(t){return t.step(e,n)}),{$x:e},(function(t){return{$x:function(){return Xe(t)}}}))}}),go=Ae({tan_:function(t){var n=me(t,"x","tan");return Ut.runKernelFunc((function(t,e){var r=t.tan(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.div(e.cos().square())}}}))}}),yo=Ae({tanh_:function(t){var n=me(t,"x","tanh");return Ut.runKernelFunc((function(t,e){var r=t.tanh(n);return e([r]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return Oe(1).sub(e.square()).mulStrict(t)}}}),"Tanh",{},null,[!0])}}),xo=Ae({addStrict_:function(t,n){var e=me(t,"a","addStrict"),r=me(n,"b","addStrict");return T(e.shape,r.shape,"Error in addStrict: "),e.add(r)}}),bo=Ae({atan2_:function(t,n){var e,r=me(t,"a","atan2"),o=me(n,"b","atan2");e=_t(r,o),r=e[0],o=e[1];var i=Pr(r.shape,o.shape);return Ut.runKernelFunc((function(t,n){var e=t.atan2(r,o);return n([r,o]),e}),{$a:r,$b:o},(function(t,n){var e=n[0],r=n[1];return{$a:function(){var n=Or(e.square(),r.square()),o=t.mul(r.div(n)),a=Br(e.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(e.shape)},$b:function(){var n=Or(e.square(),r.square()),o=eo(t.mul(e.div(n))),a=Br(r.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(r.shape)}}}))}}),wo=Ae({divStrict_:function(t,n){var e=me(t,"a","div"),r=me(n,"b","div");return T(e.shape,r.shape,"Error in divideStrict: "),e.div(r)}}),Co=Ae({floorDiv_:function(t,n){var e,r=me(t,"a","floorDiv"),o=me(n,"b","floorDiv");e=_t(r,o),r=e[0],o=e[1];var i=Pr(r.shape,o.shape);return Ut.runKernelFunc((function(t,n){var e=t.floorDiv(r,o);return n([r,o]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1];return{a:function(){var n=t.div(r.toFloat()),o=Br(e.shape,i);return o.length>0?n.sum(o).reshape(e.shape):n},b:function(){var n=t.mul(e.toFloat()),o=Br(r.shape,i);o.length>0&&(n=n.sum(o).reshape(r.shape));var a=r.square();return n.div(a.toFloat()).neg()}}}),"FloorDiv")}}),Eo=Ae({maximum_:function(t,n){var e,r=me(t,"a","maximum"),o=me(n,"b","maximum");return e=_t(r,o),r=e[0],o=e[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),Pr(r.shape,o.shape),Ut.runKernelFunc((function(t,n){var e=t.maximum(r,o);return n([r,o]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1];return{a:function(){return t.mul(e.greaterEqual(r).toFloat())},b:function(){return t.mul(e.less(r).toFloat())}}}),"Maximum")}}),Ro=Ae({maximumStrict_:function(t,n){var e=me(t,"a","maximumStrict"),r=me(n,"b","maximumStrict");return T(e.shape,r.shape,"Error in maximumStrict: "),e.maximum(r)}}),Io=Ae({minimum_:function(t,n){var e,r=me(t,"a","minimum"),o=me(n,"b","minimum");return e=_t(r,o),r=e[0],o=e[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),Pr(r.shape,o.shape),Ut.runKernelFunc((function(t,n){var e=t.minimum(r,o);return n([r,o]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1];return{a:function(){return t.mul(e.lessEqual(r).toFloat())},b:function(){return t.mul(e.greater(r).toFloat())}}}),"Minimum")}}),ko=Ae({minimumStrict_:function(t,n){var e=me(t,"a","minimumStrict"),r=me(n,"b","minimumStrict");return T(e.shape,r.shape,"Error in minimumStrict: "),e.minimum(r)}}),So=Ae({mod_:function(t,n){var e,r=me(t,"a","mod"),o=me(n,"b","mod");e=_t(r,o),r=e[0],o=e[1];var i=Pr(r.shape,o.shape);return Ut.runKernelFunc((function(t,n){var e=t.mod(r,o);return n([r,o]),e}),{$a:r,$b:o},(function(t,n){var e=n[0],r=n[1];return{$a:function(){var n=Br(e.shape,i);return n.length>0?t.sum(n).reshape(e.shape):t},$b:function(){var n=t.mul(e.div(r).floor().neg()),o=Br(r.shape,i);return o.length>0?n.sum(o).reshape(r.shape):n}}}))}}),Ao=Ae({modStrict_:function(t,n){var e=me(t,"a","modStrict"),r=me(n,"b","modStrict");return T(e.shape,r.shape,"Error in modStrict: "),e.mod(r)}}),To=Ae({mul_:function(t,n){var e,r=me(t,"a","mul"),o=me(n,"b","mul");e=_t(r,o),r=e[0],o=e[1];var i=Pr(r.shape,o.shape);return Ut.runKernelFunc((function(t,n){var e=t.multiply(r,o);return n([r,o]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1];return{a:function(){var n=t.mul(r.toFloat()),o=Br(e.shape,i);return o.length>0?n.sum(o).reshape(e.shape):n},b:function(){var n=t.mul(e.toFloat()),o=Br(r.shape,i);return o.length>0?n.sum(o).reshape(r.shape):n}}}),"Mul")}}),Do=Ae({mulStrict_:function(t,n){var e=me(t,"a","mul"),r=me(n,"b","mul");return T(e.shape,r.shape,"Error in multiplyStrict: "),e.mul(r)}}),No=Ae({pow_:function(t,n){var e,r=me(t,"base","pow"),o=me(n,"exp","pow");e=_t(r,o),r=e[0],o=e[1];var i=Pr(r.shape,o.shape),a=[r,o];return Ut.runKernelFunc((function(t,n){var e=t.pow(r,o);return n([r,o,e]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1],o=n[2];return{a:function(){var n=r.toFloat(),o=t.mul(n.mul(e.pow(n.sub(Oe(1))))),a=Br(e.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(e.shape)},b:function(){var n=e.greater(0),a=e.log().where(n,Xe(e)),u=t.mul(o.mul(a)),s=Br(r.shape,i);return s.length>0&&(u=u.sum(s)),u.reshape(r.shape)}}}),"Pow",{},a,[!0])}}),Fo=Ae({powStrict_:function(t,n){return T(t.shape,n.shape,"Error in powStrict: "),t.pow(n)}}),_o=Ae({squaredDifferenceStrict_:function(t,n){var e=me(t,"a","squaredDifferenceStrict"),r=me(n,"b","squaredDifferenceStrict");return T(e.shape,r.shape,"Error in squaredDifferenceStrict: "),e.squaredDifference(r)}}),Oo=Ae({sub_:function(t,n){var e,r=me(t,"a","sub"),o=me(n,"b","sub");e=_t(r,o),r=e[0],o=e[1];var i=Pr(r.shape,o.shape);return Ut.runKernelFunc((function(t){return t.subtract(r,o)}),{a:r,b:o},(function(t){return{a:function(){var n=t,e=Br(r.shape,i);return e.length>0&&(n=n.sum(e)),n.reshape(r.shape)},b:function(){var n=t,e=Br(o.shape,i);return e.length>0&&(n=n.sum(e)),n.neg().reshape(o.shape)}}}),"Sub")}}),Mo=Ae({subStrict_:function(t,n){var e=me(t,"a","subStrict"),r=me(n,"b","subStrict");return T(e.shape,r.shape,"Error in subStrict: "),e.sub(r)}}),Bo=Ae({div_:function(t,n){var e,r=me(t,"a","div"),o=me(n,"b","div");if(e=_t(r,o),r=e[0],o=e[1],"int32"===r.dtype&&"int32"===o.dtype)return Co(r,o);var i={a:r,b:o};return Ut.runKernelFunc((function(t,n){var e=t.realDivide(r,o);return n([r,o]),e}),i,null,wr,{})}});function Po(t,n){if(t.rank<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was "+t.rank+".");if(n.rank<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was "+n.rank+".");if("int32"!==n.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was "+n.dtype+".");if(n.shape[n.rank-1]>t.rank)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+n.shape[n.rank-1]+" vs. "+t.rank);if(0===t.size)throw new Error("Requested more than 0 entries, but input is empty. Input shape: "+t.shape+".");for(var e=n.shape,r=e[e.length-1],o=1,i=0;i<e.length-1;++i)o*=e[i];var a=t.shape,u=e.slice();u.pop();var s=1;for(i=r;i<t.rank;++i)s*=a[i],u.push(a[i]);var c=et(t.shape).map((function(t){return t/s})).concat([1]).slice(0,r);return[u,o,s,c]}var Lo=Object.freeze({prepareAndValidate:Po});function Wo(t){return t<=30?t:nt(t,Math.floor(Math.sqrt(t)))}function Uo(t,n,e){var r=n.rank>1?n.shape[n.rank-1]:1,o=n.rank>1?n.rank-1:1,i="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+e.shape+", indices.shape: "+n.shape+", shape: "+t+", sliceDim: "+r+", and batchDim: "+o+".";if(e.rank<o)throw new Error(i+" update.rank < "+o+". ");if(t.length<r+(e.rank-o))throw new Error(i+" Output shape length < "+(r+(e.rank-o)));if(e.rank!==o+t.length-r)throw new Error(i+" update.rank != "+(o+t.length-r));for(var a=0;a<o;++a)if(e.shape[a]!==n.shape[a])throw new Error(i+" updates.shape["+a+"] ("+e.shape[a]+") != indices.shape["+a+"] ("+n.shape[a]+").");for(a=0;a<e.rank-o;++a)if(e.shape[a+o]!==t[a+r])throw new Error(i+" updates.shape["+(a+o)+"] ("+e.shape[a+o]+") != shape["+(a+o)+"] ("+t[a+o]+")")}function zo(t,n,e){if(n.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was "+n.rank+".");if(t.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was "+t.rank+".");if("int32"!==n.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+n.dtype);if(e.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+e);if(0===e.length){if(0===n.size)throw new Error("Indices specified for empty output. indices shape: "+n.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}Uo(e,n,t)}function Vo(t,n,e){for(var r=n.shape.length,o=r>1?n.shape[r-1]:1,i=e.length,a=1,u=o;u<i;++u)a*=e[u];var s=o<1?1:o;return{sliceRank:o,numUpdates:F(n.shape)/s,sliceSize:a,strides:et(e.slice(0,o)).concat([1]),outputSize:F(e)}}var Go=Object.freeze({validateUpdateShape:Uo,validateInput:zo,calculateShapes:Vo});function Ho(t,n,e){A(t.rank===n.length,(function(){return"Error in slice"+t.rank+"D: Length of begin "+n+" must match the rank of the array ("+t.rank+")."})),A(t.rank===e.length,(function(){return"Error in slice"+t.rank+"D: Length of size "+e+" must match the rank of the array ("+t.rank+")."}));for(var r=function(r){A(n[r]+e[r]<=t.shape[r],(function(){return"Error in slice"+t.rank+"D: begin["+r+"] + size["+r+"] ("+(n[r]+e[r])+") would overflow input.shape["+r+"] ("+t.shape[r]+")"}))},o=0;o<t.rank;++o)r(o)}function qo(t){for(var n=[],e=0;t>0;)1&t&&n.push(e),t/=2,e++;return n}function Ko(t,n,e){for(var r=[],o=0;o<t.length;o++)r[o]=Math.ceil((n[o]-t[o])/e[o]);return r}function jo(t,n,e,r,o){var i=n[o],a=e[o]||1;(t&1<<o||null==i)&&(i=a>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var u=r[o];return i<0&&(i+=u),I(0,i,u-1)}function Xo(t,n,e,r,o){var i=n[o],a=e[o]||1;(t&1<<o||null==i)&&(i=a>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var u=r[o];return i<0&&(i+=u),a>0?I(0,i,u):I(-1,i,u-1)}function Yo(t,n,e){for(var r=e.length,o=0;o<e.length;o++)if(e[o]>1){r=o;break}for(o=r+1;o<e.length;o++)if(n[o]>0||e[o]!==t[o])return!1;return!0}function $o(t,n){for(var e=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)e+=t[r]*n[r];return e}var Qo=Object.freeze({assertParamsValid:Ho,maskToAxes:qo,computeOutShape:Ko,startForAxis:jo,stopForAxis:Xo,isSliceContinous:Yo,computeFlatOffset:$o});function Jo(t){return A(tt(t),(function(){return"The f passed in grad(f) must be a function"})),function(n,e){var r=me(n,"x","tf.grad",null),o=null!=e?me(e,"dy","tf.grad"):null;return Ut.tidy((function(){var n=Ut.gradients((function(){return t(r)}),[r],o),e=n.value,i=n.grads;return null!=o&&T(e.shape,o.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),oi(i),i[0]}))}}function Zo(t){return A(tt(t),(function(){return"The f passed in grads(f) must be a function"})),function(n,e){A(Array.isArray(n),(function(){return"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"}));var r=ge(n,"args","tf.grads",null),o=null!=e?me(e,"dy","tf.grads"):null;return Ut.tidy((function(){var n=Ut.gradients((function(){return t.apply(void 0,r)}),r,o),e=n.value,i=n.grads;return null!=o&&T(e.shape,o.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),oi(i),i}))}}function ti(t){return A(tt(t),(function(){return"The f passed in valueAndGrad(f) must be a function"})),function(n,e){A(n instanceof Et,(function(){return"The x passed in valueAndGrad(f)(x) must be a tensor"})),A(null==e||e instanceof Et,(function(){return"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"}));var r=Ut.gradients((function(){return t(n)}),[n],e),o=r.grads,i=r.value;return oi(o),{grad:o[0],value:i}}}function ni(t){return A(tt(t),(function(){return"The f passed in valueAndGrads(f) must be a function"})),function(n,e){A(Array.isArray(n)&&n.every((function(t){return t instanceof Et})),(function(){return"The args passed in valueAndGrads(f)(args) must be array of tensors"})),A(null==e||e instanceof Et,(function(){return"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"}));var r=Ut.gradients((function(){return t.apply(void 0,n)}),n,e);return null!=e&&T(r.value.shape,e.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),oi(r.grads),r}}function ei(t,n){A(tt(t),(function(){return"The f passed in variableGrads(f) must be a function"})),A(null==n||Array.isArray(n)&&n.every((function(t){return t instanceof Tt})),(function(){return"The varList passed in variableGrads(f, varList) must be an array of variables"}));var e=null!=n;if(!e)for(var r in n=[],Ut.registeredVariables)n.push(Ut.registeredVariables[r]);var o=e?n.filter((function(t){return!t.trainable})):null,i=n.length;A((n=n.filter((function(t){return t.trainable}))).length>0,(function(){return"variableGrads() expects at least one of the input variables to be trainable, but none of the "+i+" variables is trainable."}));var a=Ut.gradients(t,n,null,!0),u=a.value,s=a.grads;A(s.some((function(t){return null!=t})),(function(){return"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."})),A(0===u.rank,(function(){return"The f passed in variableGrads(f) must return a scalar, but it returned a rank-"+u.rank+" tensor"}));var c={};return n.forEach((function(t,n){null!=s[n]&&(c[t.name]=s[n])})),null!=o&&o.forEach((function(t){return c[t.name]=null})),{value:u,grads:c}}function ri(t){return Ut.customGrad(t)}function oi(t){if(t.filter((function(t){return null==t})).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}var ii=Ae({softmax_:function(t,n){void 0===n&&(n=-1);var e=me(t,"logits","softmax","float32");if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank "+e.rank+" and dim was "+n);return Ut.runKernelFunc((function(t,r){var o=t.softmax(e,n);return r([o]),o}),{logits:e},(function(t,e){var r=e[0],o=t.mul(r);return{logits:function(){return o.sub(o.sum([n],!0).mul(r))}}}),"Softmax",{dim:n},[],[!0])}}),ai=Ae({logSoftmax_:function(t,n){void 0===n&&(n=-1);var e=me(t,"logits","logSoftmax");if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank "+e.rank+" and axis was "+n);return ri((function(t,e){var r=t.max(n,!0),o=t.sub(r),i=o.toFloat().sub(o.exp().sum(n,!0).log());return e([i]),{value:i,gradFunc:function(t,e){var r=e[0].exp();return t.sub(t.sum(n,!0).mul(r))}}}))(e)}}),ui=Ae({transpose_:function(t,n){var e=me(t,"x","transpose");if(null==n&&(n=e.shape.map((function(t,n){return n})).reverse()),A(e.rank===n.length,(function(){return"Error in transpose: rank of input "+e.rank+" must match length of perm "+n+"."})),n.forEach((function(t){A(t>=0&&t<e.rank,(function(){return"All entries in 'perm' must be between 0 and "+(e.rank-1)+" but got "+n}))})),e.rank<=1)return e.clone();var r={perm:n};return Ut.runKernelFunc((function(t){return t.transpose(e,n)}),{x:e},null,"Transpose",r)}}),si=function(){function t(t,n){this.backend=t,this.dataMover=n,this.data=new WeakMap,this.dataIdsCount=0}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)},t.prototype.set=function(t,n){this.dataIdsCount++,this.data.set(t,n)},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.dataIdsCount--,this.data.delete(t)},t.prototype.numDataIds=function(){return this.dataIdsCount},t}(),ci=function(){function t(){}return t.prototype.time=function(t){return li("time")},t.prototype.read=function(t){return li("read")},t.prototype.readSync=function(t){return li("readSync")},t.prototype.numDataIds=function(){return li("numDataIds")},t.prototype.disposeData=function(t){return li("disposeData")},t.prototype.write=function(t,n,e){return li("write")},t.prototype.move=function(t,n,e,r){return li("move")},t.prototype.memory=function(){return li("memory")},t.prototype.floatPrecision=function(){return li("floatPrecision")},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.batchMatMul=function(t,n,e,r){return li("batchMatMul")},t.prototype.fusedBatchMatMul=function(t){return t.a,t.b,t.transposeA,t.transposeB,t.bias,t.activation,t.preluActivationWeights,li("fusedBatchMatMul")},t.prototype.slice=function(t,n,e){return li("slice")},t.prototype.stridedSlice=function(t,n,e,r){return li("stridedSlice")},t.prototype.unstack=function(t,n){return li("unstack")},t.prototype.reverse=function(t,n){return li("reverse")},t.prototype.concat=function(t,n){return li("concat")},t.prototype.neg=function(t){return li("neg")},t.prototype.add=function(t,n){return li("add")},t.prototype.addN=function(t){return li("addN")},t.prototype.subtract=function(t,n){return li("subtract")},t.prototype.multiply=function(t,n){return li("multiply")},t.prototype.realDivide=function(t,n){return li("realDivide")},t.prototype.floorDiv=function(t,n){return li("floorDiv")},t.prototype.sum=function(t,n){return li("sum")},t.prototype.prod=function(t,n){return li("prod")},t.prototype.unsortedSegmentSum=function(t,n,e){return li("unsortedSegmentSum")},t.prototype.argMin=function(t,n){return li("argMin")},t.prototype.argMax=function(t,n){return li("argMax")},t.prototype.equal=function(t,n){return li("equal")},t.prototype.notEqual=function(t,n){return li("notEqual")},t.prototype.less=function(t,n){return li("less")},t.prototype.lessEqual=function(t,n){return li("lessEqual")},t.prototype.greater=function(t,n){return li("greater")},t.prototype.greaterEqual=function(t,n){return li("greaterEqual")},t.prototype.logicalNot=function(t){return li("logicalNot")},t.prototype.logicalAnd=function(t,n){return li("logicalAnd")},t.prototype.logicalOr=function(t,n){return li("logicalOr")},t.prototype.where=function(t){return li("where")},t.prototype.select=function(t,n,e){return li("select")},t.prototype.topk=function(t,n,e){return li("topk")},t.prototype.min=function(t,n){return li("min")},t.prototype.minimum=function(t,n){return li("minimum")},t.prototype.mod=function(t,n){return li("mod")},t.prototype.max=function(t,n){return li("max")},t.prototype.maximum=function(t,n){return li("maximum")},t.prototype.all=function(t,n){return li("all")},t.prototype.any=function(t,n){return li("any")},t.prototype.squaredDifference=function(t,n){return li("squaredDifference")},t.prototype.ceil=function(t){return li("ceil")},t.prototype.floor=function(t){return li("floor")},t.prototype.round=function(t){return li("round")},t.prototype.sign=function(t){return li("sign")},t.prototype.isNaN=function(t){return li("isNaN")},t.prototype.isInf=function(t){return li("isInf")},t.prototype.isFinite=function(t){return li("isFinite")},t.prototype.pow=function(t,n){return li("pow")},t.prototype.exp=function(t){return li("exp")},t.prototype.expm1=function(t){return li("expm1")},t.prototype.softmax=function(t,n){return li("softmax")},t.prototype.log=function(t){return li("log")},t.prototype.log1p=function(t){return li("log1p")},t.prototype.sqrt=function(t){return li("sqrt")},t.prototype.rsqrt=function(t){return li("rsqrt")},t.prototype.square=function(t){return li("square")},t.prototype.reciprocal=function(t){return li("reciprocal")},t.prototype.relu=function(t){return li("relu")},t.prototype.relu6=function(t){return li("relu6")},t.prototype.prelu=function(t,n){return li("prelu")},t.prototype.elu=function(t){return li("elu")},t.prototype.eluDer=function(t,n){return li("eluDer")},t.prototype.selu=function(t){return li("selu")},t.prototype.int=function(t){return li("int")},t.prototype.clip=function(t,n,e){return li("clip")},t.prototype.abs=function(t){return li("abs")},t.prototype.complexAbs=function(t){return li("complexAbs")},t.prototype.sigmoid=function(t){return li("sigmoid")},t.prototype.softplus=function(t){return li("softplus")},t.prototype.sin=function(t){return li("sin")},t.prototype.cos=function(t){return li("cos")},t.prototype.tan=function(t){return li("tan")},t.prototype.asin=function(t){return li("asin")},t.prototype.acos=function(t){return li("acos")},t.prototype.atan=function(t){return li("atan")},t.prototype.atan2=function(t,n){return li("atan2")},t.prototype.sinh=function(t){return li("sinh")},t.prototype.cosh=function(t){return li("cosh")},t.prototype.tanh=function(t){return li("tanh")},t.prototype.asinh=function(t){return li("asinh")},t.prototype.acosh=function(t){return li("acosh")},t.prototype.atanh=function(t){return li("atanh")},t.prototype.erf=function(t){return li("erf")},t.prototype.step=function(t,n){return li("step")},t.prototype.fusedConv2d=function(t){return t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights,li("fusedConv2d")},t.prototype.conv2d=function(t,n,e){return li("conv2d")},t.prototype.conv2dDerInput=function(t,n,e){return li("conv2dDerInput")},t.prototype.conv2dDerFilter=function(t,n,e){return li("conv2dDerFilter")},t.prototype.fusedDepthwiseConv2D=function(t){return t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights,li("fusedDepthwiseConv2D")},t.prototype.depthwiseConv2D=function(t,n,e){return li("depthwiseConv2D")},t.prototype.depthwiseConv2DDerInput=function(t,n,e){return li("depthwiseConv2DDerInput")},t.prototype.depthwiseConv2DDerFilter=function(t,n,e){return li("depthwiseConv2DDerFilter")},t.prototype.conv3d=function(t,n,e){return li("conv3d")},t.prototype.conv3dDerInput=function(t,n,e){return li("conv3dDerInput")},t.prototype.conv3dDerFilter=function(t,n,e){return li("conv3dDerFilter")},t.prototype.maxPool=function(t,n){return li("maxPool")},t.prototype.maxPoolBackprop=function(t,n,e,r){return li("maxPoolBackprop")},t.prototype.avgPool=function(t,n){return li("avgPool")},t.prototype.avgPoolBackprop=function(t,n,e){return li("avgPoolBackprop")},t.prototype.avgPool3d=function(t,n){return li("avgPool3d")},t.prototype.avgPool3dBackprop=function(t,n,e){return li("avgPool3dBackprop")},t.prototype.maxPool3d=function(t,n){return li("maxPool3d")},t.prototype.maxPool3dBackprop=function(t,n,e,r){return li("maxPool3dBackprop")},t.prototype.reshape=function(t,n){return li("reshape")},t.prototype.cast=function(t,n){return li("cast")},t.prototype.tile=function(t,n){return li("tile")},t.prototype.pad=function(t,n,e){return li("pad")},t.prototype.transpose=function(t,n){return li("transpose")},t.prototype.gather=function(t,n,e){return li("gather")},t.prototype.gatherND=function(t,n){return li("gatherND")},t.prototype.scatterND=function(t,n,e){return li("scatterND")},t.prototype.batchToSpaceND=function(t,n,e){return li("batchToSpaceND")},t.prototype.spaceToBatchND=function(t,n,e){return li("spaceToBatchND")},t.prototype.resizeBilinear=function(t,n,e,r){return li("resizeBilinear")},t.prototype.resizeBilinearBackprop=function(t,n,e){return li("resizeBilinearBackprop")},t.prototype.resizeNearestNeighbor=function(t,n,e,r){return li("resizeNearestNeighbor")},t.prototype.resizeNearestNeighborBackprop=function(t,n,e){return li("resizeNearestNeighborBackprop")},t.prototype.batchNormalization=function(t,n,e,r,o,i){return li("batchNormalization")},t.prototype.localResponseNormalization4D=function(t,n,e,r,o){return li("localResponseNormalization4D")},t.prototype.LRNGrad=function(t,n,e,r,o,i,a){return li("LRNGrad")},t.prototype.multinomial=function(t,n,e,r){return li("multinomial")},t.prototype.oneHot=function(t,n,e,r){return li("oneHot")},t.prototype.cumsum=function(t,n,e,r){return li("cumsum")},t.prototype.nonMaxSuppression=function(t,n,e,r,o){return li("nonMaxSuppression")},t.prototype.fft=function(t){return li("fft")},t.prototype.ifft=function(t){return li("ifft")},t.prototype.complex=function(t,n){return li("complex")},t.prototype.real=function(t){return li("real")},t.prototype.imag=function(t){return li("imag")},t.prototype.cropAndResize=function(t,n,e,r,o,i){return li("cropAndResize")},t.prototype.depthToSpace=function(t,n,e){return li("depthToSpace")},t.prototype.split=function(t,n,e){return li("split")},t.prototype.sparseToDense=function(t,n,e,r){return li("sparseToDense")},t.prototype.diag=function(t){return li("diag")},t.prototype.fill=function(t,n,e){return li("fill")},t.prototype.onesLike=function(t){return li("onesLike")},t.prototype.zerosLike=function(t){return li("zerosLike")},t.prototype.linspace=function(t,n,e){return li("linspace")},t.prototype.dispose=function(){return li("dispose")},t}();function li(t){throw new Error("'"+t+"' not yet implemented or not found in the registry. Did you forget to import the kernel?")}function fi(t,n,e,r,o,i,a){void 0===a&&(a="channelsLast");var u,s=mi(n),c=s[0],l=s[1];if("channelsLast"===a)u=[c,l,t[3],t[3]];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);u=[c,l,t[1],t[1]]}return di(t,u,e,r,o,i,!1,a)}function hi(t,n,e,r,o,i,a){void 0===a&&(a="NDHWC");var u,s,c=gi(n),l=c[0],f=c[1],h=c[2];if("NDHWC"===a)s="channelsLast",u=[l,f,h,t[4],t[4]];else{if("NCDHW"!==a)throw new Error("Unknown dataFormat "+a);s="channelsFirst",u=[l,f,h,t[1],t[1]]}return pi(t,u,e,r,o,!1,s,i)}function di(t,n,e,r,o,i,a,u){void 0===a&&(a=!1),void 0===u&&(u="channelsLast");var s=[-1,-1,-1,-1],c=s[0],l=s[1],f=s[2],h=s[3];if("channelsLast"===u)c=t[0],l=t[1],f=t[2],h=t[3];else{if("channelsFirst"!==u)throw new Error("Unknown dataFormat "+u);c=t[0],h=t[1],l=t[2],f=t[3]}var d,p=n[0],v=n[1],m=n[3],g=mi(e),y=g[0],x=g[1],b=mi(r),w=b[0],C=b[1],E=yi(p,w),R=yi(v,C),I=function(t,n,e,r,o,i,a,u){var s,c,l;if("number"==typeof t){s={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};var f=function(t,n,e,r,o){null==r&&(r=vi(t,n,e));var i=t[1],a=xi((t[0]-n+2*r)/e+1,o);A(O(a),(function(){return"The output # of rows ("+a+") must be an integer. Change the stride and/or zero pad parameters"}));var u=xi((i-n+2*r)/e+1,o);return A(O(u),(function(){return"The output # of columns ("+u+") must be an integer. Change the stride and/or zero pad parameters"})),[a,u]}([n,e],i,r,t,u);c=f[0],l=f[1]}else if("same"===t){c=Math.ceil(n/r),l=Math.ceil(e/o);var h=Math.max(0,(c-1)*r+i-n),d=Math.max(0,(l-1)*o+a-e),p=Math.floor(h/2),v=h-p,m=Math.floor(d/2);s={top:p,bottom:v,left:m,right:d-m,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);s={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((n-i+1)/r),l=Math.ceil((e-a+1)/o)}return{padInfo:s,outHeight:c,outWidth:l}}(o,l,f,y,x,E,R,i),k=I.padInfo,S=I.outHeight,T=I.outWidth,D=a?m*h:m;return"channelsFirst"===u?d=[c,D,S,T]:"channelsLast"===u&&(d=[c,S,T,D]),{batchSize:c,dataFormat:u,inHeight:l,inWidth:f,inChannels:h,outHeight:S,outWidth:T,outChannels:D,padInfo:k,strideHeight:y,strideWidth:x,filterHeight:p,filterWidth:v,effectiveFilterHeight:E,effectiveFilterWidth:R,dilationHeight:w,dilationWidth:C,inShape:t,outShape:d,filterShape:n}}function pi(t,n,e,r,o,i,a,u){void 0===i&&(i=!1),void 0===a&&(a="channelsLast");var s=[-1,-1,-1,-1,-1],c=s[0],l=s[1],f=s[2],h=s[3],d=s[4];if("channelsLast"===a)c=t[0],l=t[1],f=t[2],h=t[3],d=t[4];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);c=t[0],d=t[1],l=t[2],f=t[3],h=t[4]}var p,v=n[0],m=n[1],g=n[2],y=n[4],x=gi(e),b=x[0],w=x[1],C=x[2],E=gi(r),R=E[0],I=E[1],k=E[2],S=yi(v,R),T=yi(m,I),D=yi(g,k),N=function(t,n,e,r,o,i,a,u,s,c,l){var f,h,d,p;if("number"==typeof t){f={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};var v=function(t,n,e,r,o,i){null==o&&(o=vi(t,n,r));var a=t[1],u=t[2],s=xi((t[0]-n+2*o)/r+1,i);A(O(s),(function(){return"The output # of depths ("+s+") must be an integer. Change the stride and/or zero pad parameters"}));var c=xi((a-n+2*o)/r+1,i);A(O(c),(function(){return"The output # of rows ("+c+") must be an integer. Change the stride and/or zero pad parameters"}));var l=xi((u-n+2*o)/r+1,i);return A(O(l),(function(){return"The output # of columns ("+l+") must be an integer. Change the stride and/or zero pad parameters"})),[s,c,l,1]}([n,e,r,1],u,0,o,t,l);h=v[0],d=v[1],p=v[2]}else if("same"===t){var m=((h=Math.ceil(n/o))-1)*o+u-n,g=((d=Math.ceil(e/i))-1)*i+s-e,y=((p=Math.ceil(r/a))-1)*a+c-r,x=Math.floor(m/2),b=m-x,w=Math.floor(g/2),C=g-w,E=Math.floor(y/2);f={top:w,bottom:C,left:E,right:y-E,front:x,back:b,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);f={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((n-u+1)/o),d=Math.ceil((e-s+1)/i),p=Math.ceil((r-c+1)/a)}return{padInfo:f,outDepth:h,outHeight:d,outWidth:p}}(o,l,f,h,b,w,C,S,T,D,u),F=N.padInfo,_=N.outDepth,M=N.outHeight,B=N.outWidth,P=i?y*d:y;return"channelsFirst"===a?p=[c,P,_,M,B]:"channelsLast"===a&&(p=[c,_,M,B,P]),{batchSize:c,dataFormat:a,inDepth:l,inHeight:f,inWidth:h,inChannels:d,outDepth:_,outHeight:M,outWidth:B,outChannels:P,padInfo:F,strideDepth:b,strideHeight:w,strideWidth:C,filterDepth:v,filterHeight:m,filterWidth:g,effectiveFilterDepth:S,effectiveFilterHeight:T,effectiveFilterWidth:D,dilationDepth:R,dilationHeight:I,dilationWidth:k,inShape:t,outShape:p,filterShape:n}}function vi(t,n,e,r){void 0===r&&(r=1);var o=yi(n,r);return Math.floor((t[0]*(e-1)-e+o)/2)}function mi(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function gi(t){return"number"==typeof t?[t,t,t]:t}function yi(t,n){return n<=1?t:t+(t-1)*(n-1)}function xi(t,n){if(!n)return t;switch(n){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+n)}}function bi(t){var n=mi(t),e=n[0],r=n[1],o=n[2];return 1===e&&1===r&&1===o}function wi(t,n){return bi(t)||bi(n)}function Ci(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}function Ei(t,n,e){if("complex64"===n){if("complex64"===t.dtype)return t.clone();var r=Ge(t.shape),o=t.toFloat(),i=e.complex(o,r);return r.dispose(),o.dispose(),i}if(!K(t.dtype,n))return Ut.makeTensorFromDataId(t.dataId,t.shape,n);if("complex64"===t.dtype){var a=e.real(t);return i=a.cast(n),a.dispose(),i}if("int32"===n)return e.int(t);if("bool"===n){var u=Oe(0,t.dtype);return i=e.notEqual(t,u),u.dispose(),i}throw new Error("Error in Cast: failed to cast "+t.dtype+" to "+n)}function Ri(t,n){return Ut.makeTensorFromDataId(t.dataId,n,t.dtype)}function Ii(t,n,e){var r=(n-t)/(e-1),o=at(e,"float32");o[0]=t;for(var i=1;i<o.length;i++)o[i]=o[i-1]+r;return Me(o,"float32")}var ki=Object.freeze({castTensor:Ei,reshapeTensor:Ri,linspaceImpl:Ii,upcastType:Nt,axesAreInnerMostDims:ye,combineLocations:xe,computeOutAndReduceShapes:be,expandShapeToKeepDim:we,assertAxesAreInnerMostDims:Ce,getAxesPermutation:Ee,getUndoAxesPermutation:Re,getInnerMostAxes:Ie,getBroadcastDims:Mr,getReductionAxes:Br,assertAndGetBroadcastShape:Pr,assertParamsConsistent:ke,computeOutShape:Se,computePool2DInfo:fi,computePool3DInfo:hi,computeConv2DInfo:di,computeConv3DInfo:pi,computeDefaultPad:vi,tupleValuesAreOne:bi,eitherStridesOrDilationsAreOne:wi,convertConv2DDataFormat:Ci,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:Wo});function Si(t,n){if(t.length!==n.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+t.length+", imag: "+n.length+".");for(var e=new Float32Array(2*t.length),r=0;r<e.length;r+=2)e[r]=t[r/2],e[r+1]=n[r/2];return e}function Ai(t,n){return{real:t[2*n],imag:t[2*n+1]}}function Ti(t,n,e,r){t[2*r]=n,t[2*r+1]=e}function Di(t,n,e){var r=(e?2:-2)*Math.PI*(t/n);return{real:Math.cos(r),imag:Math.sin(r)}}function Ni(t,n,e){var r=function(t,n,e){return function(t,n,e){for(var r=0,o=t.length,i=0,a=!1;r<o;){var u=e(n,t[i=r+(o-r>>>1)]);u>0?r=i+1:(o=i,a=!u)}return a?r:-r-1}(t,n,e||Fi)}(t,n,e),o=r<0?-(r+1):r;t.splice(o,0,n)}function Fi(t,n){return t>n?1:t<n?-1:0}function _i(t,n,e,r,o){return Mi(t,n,e,r,o,0).selectedIndices}function Oi(t,n,e,r,o,i){var a=Mi(t,n,e,r,o,i,!0);return a.numValidOutputs.dispose(),{selectedIndices:a.selectedIndices,selectedScores:a.selectedScores}}function Mi(t,n,e,r,o,i,a,u){void 0===a&&(a=!1),void 0===u&&(u=!1);for(var s=Array.from(n).map((function(t,n){return{score:t,boxIndex:n,suppressBeginIndex:0}})).filter((function(t){return t.score>o})).sort(Li),c=i>0?-.5/i:0,l=[],f=[];l.length<e&&s.length>0;){var h=s.pop(),d=h.score,p=h.boxIndex,v=h.suppressBeginIndex;if(d<o)break;for(var m=!1,g=l.length-1;g>=v;--g){var y=Bi(t,p,l[g]);if(y>=r){m=!0;break}if(h.score=h.score*Pi(r,c,y),h.score<=o)break}h.suppressBeginIndex=l.length,m||(h.score===d?(l.push(p),f.push(h.score)):h.score>o&&Ni(s,h,Li))}var x=l.length;return u&&(l.fill(0,x),f.fill(0,x)),{selectedIndices:Me(l,"int32"),selectedScores:Me(f,"float32"),numValidOutputs:Oe(x,"int32")}}function Bi(t,n,e){var r=t.subarray(4*n,4*n+4),o=t.subarray(4*e,4*e+4),i=Math.min(r[0],r[2]),a=Math.min(r[1],r[3]),u=Math.max(r[0],r[2]),s=Math.max(r[1],r[3]),c=Math.min(o[0],o[2]),l=Math.min(o[1],o[3]),f=Math.max(o[0],o[2]),h=Math.max(o[1],o[3]),d=(u-i)*(s-a),p=(f-c)*(h-l);if(d<=0||p<=0)return 0;var v=Math.max(i,c),m=Math.max(a,l),g=Math.min(u,f),y=Math.min(s,h),x=Math.max(g-v,0)*Math.max(y-m,0);return x/(d+p-x)}function Pi(t,n,e){var r=Math.exp(n*e*e);return e<=t?r:0}function Li(t,n){return t.score-n.score||t.score===n.score&&n.boxIndex-t.boxIndex}function Wi(t,n,e){var r=new Array(t.rank).fill(0),o=t.shape.slice();return n.map((function(n){o[e]=n;var i=t.slice(r,o);return r[e]+=n,i}))}function Ui(t,n){for(var e=new Array(t.rank),r=0;r<e.length;r++)e[r]=t.shape[r]*n[r];var o=nr(e,t.dtype);for(r=0;r<o.values.length;++r){for(var i=o.indexToLoc(r),a=new Array(t.rank),u=0;u<a.length;u++)a[u]=i[u]%t.shape[u];var s=t.locToIndex(a);o.values[r]=t.values[s]}return o.toTensor()}function zi(t,n,e,r,o){for(var i=n[n.length-1],a=[t.length/i,i],u=a[0],s=a[1],c=V(e,u*r),l=V("int32",u*r),f=0;f<u;f++){for(var h=f*s,d=t.subarray(h,h+s),p=[],v=0;v<d.length;v++)p.push({value:d[v],index:v});p.sort((function(t,n){return n.value-t.value}));var m=f*r,g=c.subarray(m,m+r),y=l.subarray(m,m+r);for(v=0;v<r;v++)g[v]=p[v].value,y[v]=p[v].index}var x=n.slice();return x[x.length-1]=r,[Fe(c,x,e),Fe(l,x,"int32")]}function Vi(t,n){for(var e=[],r=0;r<n.length;r++)n[r]&&e.push(r);var o=nr(t,"int32"),i=nr([e.length,t.length],"int32");for(r=0;r<e.length;r++){var a=o.indexToLoc(e[r]),u=r*t.length;i.values.set(a,u)}return i.toTensor()}var Gi=function(t,n){this.outputShape=[],this.outputShape=t,this.variableNames=n.map((function(t,n){return"T"+n}));var e=[];this.variableNames.forEach((function(t){e.push("float v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+e.join("\n        ")+"\n\n        float result = "+r+";\n        setOutput(result);\n      }\n    "},Hi=function(t,n){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=n.map((function(t,n){return"T"+n}));var e=[];this.variableNames.forEach((function(t){e.push("vec4 v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+e.join("\n        ")+"\n\n        vec4 result = "+r+";\n        setOutput(result);\n      }\n    "},qi=function(t,n,e){this.variableNames=["A"];var r=t.windowSize,o=t.batchSize,i=t.inSize,a=Math.ceil(i/r);e||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a];var u="max"===n?">":"<",s=e?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+r+";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < "+r+"; i++) {\n          int inIdx = "+s+";\n          float candidate = getA(batch, inIdx);\n          if (candidate "+u+" bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    "};function Ki(t,n){return["x","y","z","w","u","v"].slice(0,n).map((function(n){return t+"."+n}))}function ji(t,n){return 1===n?[t]:Ki(t,n)}function Xi(){var t,n,e,r,o,i,a,u,s,c;return 2===h().getNumber("WEBGL_VERSION")?(t="#version 300 es",n="in",e="out",r="in",o="texture",i="outputColor",a="out vec4 outputColor;",u="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",s="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",n="attribute",e="varying",r="varying",o="texture2D",i="gl_FragColor",a="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",s="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:n,varyingVs:e,varyingFs:r,texture2D:o,output:i,defineOutput:a,defineSpecialNaN:u,defineSpecialInf:s,defineRound:c}}function Yi(t,n,e){void 0===e&&(e="index");var r=et(n);return r.map((function(n,o){return"int "+t[o]+" = "+e+" / "+n+"; "+(o===r.length-1?"int "+t[o+1]+" = "+e+" - "+t[o]+" * "+n:"index -= "+t[o]+" * "+n)+";"})).join("")}function $i(t){var n=et(t).map((function(t){return t.toString()}));return"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * "+n[0]+" + coords.y * "+n[1]+" + coords.z;\n  }\n"}var Qi="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";function Ji(t,n,e,r){var o=[];t.forEach((function(t){var n=F(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?o.push("uniform float "+t.name+(n>1?"["+n+"]":"")+";"):(o.push("uniform sampler2D "+t.name+";"),o.push("uniform int offset"+t.name+";"))}));var i,a,u=o.join("\n"),s=t.map((function(t){return function(t,n,e){void 0===e&&(e=!1);var r="";r+=e?function t(n){var e,r,o;switch(n.shapeInfo.logicalShape.length){case 0:return e=n.name,r="get"+e.charAt(0).toUpperCase()+e.slice(1),o=Xi(),"\n    vec4 "+r+"() {\n      return "+o.texture2D+"("+e+", halfCR);\n    }\n  ";case 1:return function(t){var n=t.name,e="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],i=Xi();return"\n    vec4 "+e+"(int index) {\n      vec2 uv = packedUVfrom1D(\n        "+o[0]+", "+o[1]+", index);\n      return "+i.texture2D+"("+n+", uv);\n    }\n  "}(n);case 2:return function(t){var n=t.shapeInfo.logicalShape,e=t.name,r="get"+e.charAt(0).toUpperCase()+e.slice(1),o=t.shapeInfo.texShape,i=o[0],a=o[1],u=Xi();if(null!=o&&_(n,o))return"\n      vec4 "+r+"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2("+a+".0, "+i+".0);\n\n        return "+u.texture2D+"("+e+", uv);\n      }\n    ";var s=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return"\n    vec4 "+r+"(int row, int col) {\n      vec2 uv = packedUVfrom2D("+Math.ceil(n[1]/2)+", "+s[0]+", "+s[1]+", row, col);\n      return "+u.texture2D+"("+e+", uv);\n    }\n  "}(n);case 3:return function(n){var e=n.shapeInfo.logicalShape,r=n.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===e[0]){var u=aa(n,e.slice(1));return"\n        "+t(u)+"\n        vec4 "+o+"(int b, int row, int col) {\n          return "+o+"("+ua(["b","row","col"],[1,2])+");\n        }\n      "}var s=a[0],c=a[1],l=Math.ceil(e[2]/2);return"\n    vec4 "+o+"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        "+s+", "+c+", "+l*Math.ceil(e[1]/2)+", "+l+", b, row, col);\n      return "+Xi().texture2D+"("+r+", uv);\n    }\n  "}(n);default:return function(t){for(var n=t.shapeInfo.logicalShape,e=n.length,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=t.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=a[0],s=a[1],c=Math.ceil(n[e-1]/2),l=c*Math.ceil(n[e-2]/2),f="int b, int row, int col",h="b * "+l+" + (row / 2) * "+c+" + (col / 2)",d=2;d<e-1;d++)f="int b"+d+", "+f,h="b"+d+" * "+(l*=n[e-d-1])+" + "+h;return"\n    vec4 "+o+"("+f+") {\n      int index = "+h+";\n      int texR = index / "+s+";\n      int texC = index - texR * "+s+";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+s+", "+u+");\n      return "+Xi().texture2D+"("+r+", uv);\n    }\n  "}(n)}}(t):function t(n){var e=n.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){var n=t.name,e="get"+n.charAt(0).toUpperCase()+n.slice(1);if(t.shapeInfo.isUniform)return"float "+e+"() {return "+n+";}";var r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===o&&1===i)return"\n      float "+e+"() {\n        return sampleTexture("+n+", halfCR);\n      }\n    ";var a=t.shapeInfo.texShape;return"\n    float "+e+"() {\n      vec2 uv = uvFromFlat("+a[0]+", "+a[1]+", "+ra(n)+");\n      return sampleTexture("+n+", uv);\n    }\n  "}(n);case 1:return function(t){var n=t.name,e="get"+n.charAt(0).toUpperCase()+n.slice(1);if(t.shapeInfo.isUniform)return"\n      float "+e+"(int index) {\n        "+oa(t)+"\n      }\n    ";var r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===i&&1===o)return"\n      float "+e+"(int index) {\n        return sampleTexture("+n+", halfCR);\n      }\n    ";var a=ra(n);return 1===i?"\n      float "+e+"(int index) {\n        vec2 uv = vec2(0.5, (float(index + "+a+") + 0.5) / "+o+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":1===o?"\n      float "+e+"(int index) {\n        vec2 uv = vec2((float(index + "+a+") + 0.5) / "+i+".0, 0.5);\n        return sampleTexture("+n+", uv);\n      }\n    ":"\n    float "+e+"(int index) {\n      vec2 uv = uvFromFlat("+o+", "+i+", index + "+a+");\n      return sampleTexture("+n+", uv);\n    }\n  "}(n);case 2:return function(n){var e=n.shapeInfo.logicalShape,r=n.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n.shapeInfo.texShape;if(null!=i&&_(e,i)){var a=i[0];return"\n    float "+o+"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2("+i[1]+".0, "+a+".0);\n      return sampleTexture("+r+", uv);\n    }\n  "}var u=z(e),s=u.newShape,c=u.keptDims,l=s;if(l.length<e.length){var f=aa(n,l);return"\n      "+t(f)+"\n      float "+o+"(int row, int col) {\n        return "+o+"("+ua(["row","col"],c)+");\n      }\n    "}if(n.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2("+e[1]+", 1)));\n        "+oa(n)+"\n      }\n    ";var h=i[0],d=i[1],p=ra(r);return 1===d?"\n    float "+o+"(int row, int col) {\n      float index = dot(vec3(row, col, "+p+"), vec3("+e[1]+", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / "+h+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":1===h?"\n    float "+o+"(int row, int col) {\n      float index = dot(vec3(row, col, "+p+"), vec3("+e[1]+", 1, 1));\n      vec2 uv = vec2((index + 0.5) / "+d+".0, 0.5);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n  float "+o+"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * "+e[1]+" + col + "+p+";\n    vec2 uv = uvFromFlat("+h+", "+d+", index);\n    return sampleTexture("+r+", uv);\n  }\n"}(n);case 3:return function(n){var e=n.shapeInfo.logicalShape,r=n.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e[1]*e[2],a=e[2],u=z(e),s=u.newShape,c=u.keptDims,l=s;if(l.length<e.length){var f=aa(n,l);return"\n        "+t(f)+"\n        float "+o+"(int row, int col, int depth) {\n          return "+o+"("+ua(["row","col","depth"],c)+");\n        }\n      "}if(n.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3("+i+", "+a+", 1)));\n        "+oa(n)+"\n      }\n    ";var h=n.shapeInfo.texShape,d=h[0],p=h[1],v=n.shapeInfo.flatOffset;return p===i&&null==v?"\n        float "+o+"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2("+a+", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2("+p+".0, "+d+".0);\n          return sampleTexture("+r+", uv);\n        }\n      ":p===a&&null==v?"\n    float "+o+"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2("+e[1]+", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+p+".0, "+d+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n      float "+o+"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * "+i+" + col * "+a+" + depth + "+ra(r)+";\n        vec2 uv = uvFromFlat("+d+", "+p+", index);\n        return sampleTexture("+r+", uv);\n      }\n  "}(n);case 4:return function(n){var e=n.shapeInfo.logicalShape,r=n.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e[3],a=e[2]*i,u=e[1]*a,s=z(e),c=s.newShape,l=s.keptDims;if(c.length<e.length){var f=aa(n,c);return"\n      "+t(f)+"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        return "+o+"("+ua(["row","col","depth","depth2"],l)+");\n      }\n    "}if(n.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4("+u+", "+a+", "+i+", 1)));\n        "+oa(n)+"\n      }\n    ";var h=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,p=d[0],v=d[1];return v===u&&null==h?"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3("+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+v+".0, "+p+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":v===i&&null==h?"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3("+e[1]*e[2]+", "+e[2]+", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+v+".0, "+p+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+u+" + col * "+a+" +\n          depth * "+i+" + depth2;\n      vec2 uv = uvFromFlat("+p+", "+v+", index + "+ra(r)+");\n      return sampleTexture("+r+", uv);\n    }\n  "}(n);case 5:return function(n){var e=n.shapeInfo.logicalShape,r=n.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e[4],a=e[3]*i,u=e[2]*a,s=e[1]*u,c=z(e),l=c.newShape,f=c.keptDims;if(l.length<e.length){var h=aa(n,l);return"\n      "+t(h)+"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        return "+o+"("+ua(["row","col","depth","depth2","depth3"],f)+");\n      }\n    "}if(n.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+s+", "+u+", "+a+", "+i+")) +\n          depth3;\n        "+oa(n)+"\n      }\n    ";var d=n.shapeInfo.flatOffset,p=n.shapeInfo.texShape,v=p[0],m=p[1];return m===s&&null==d?"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4("+u+", "+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+m+".0, "+v+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":m===i&&null==d?"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+e[1]*e[2]*e[3]+",\n               "+e[2]*e[3]+", "+e[3]+", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+m+".0, "+v+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+s+" + col * "+u+" + depth * "+a+" +\n          depth2 * "+i+" + depth3 + "+ra(r)+";\n      vec2 uv = uvFromFlat("+v+", "+m+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(n);case 6:return function(n){var e=n.shapeInfo.logicalShape,r=n.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=z(e),a=i.newShape,u=i.keptDims;if(a.length<e.length){var s=aa(n,a);return"\n      "+t(s)+"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return "+o+"("+ua(["row","col","depth","depth2","depth3","depth4"],u)+");\n      }\n    "}var c=e[5],l=e[4]*c,f=e[3]*l,h=e[2]*f,d=e[1]*h;if(n.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4("+d+", "+h+", "+f+", "+l+")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2("+c+", 1)));\n        "+oa(n)+"\n      }\n    ";var p=n.shapeInfo.flatOffset,v=n.shapeInfo.texShape,m=v[0],g=v[1];return g===d&&null==p?"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4("+h+", "+f+", "+l+", "+c+")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+g+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":g===c&&null==p?"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4("+e[1]*e[2]*e[3]*e[4]+",\n               "+e[2]*e[3]*e[4]+",\n               "+e[3]*e[4]+",\n               "+e[4]+")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+g+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+d+" + col * "+h+" + depth * "+f+" +\n          depth2 * "+l+" + depth3 * "+c+" + depth4 + "+ra(r)+";\n      vec2 uv = uvFromFlat("+m+", "+g+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(n);default:throw new Error(e.length+"-D input sampling is not yet supported")}}(t);var o=t.shapeInfo.logicalShape,i=n.logicalShape;return o.length<=i.length&&(r+=e?function(t,n){var e,r=t.name,o=r.charAt(0).toUpperCase()+r.slice(1),i="get"+o+"AtOutCoords",a=t.shapeInfo.logicalShape.length,u=n.logicalShape.length,s=Mr(t.shapeInfo.logicalShape,n.logicalShape),c=ia(u),l=u-a,f=["x","y","z","w","u","v"];e=0===a?"":u<2&&s.length>=1?"coords = 0;":s.map((function(t){return"coords."+f[t+l]+" = 0;"})).join("\n");var h;h=u<2&&a>0?"coords":t.shapeInfo.logicalShape.map((function(t,n){return"coords."+f[n+l]})).join(", ");var d="return outputValue;",p=1===F(t.shapeInfo.logicalShape),v=1===F(n.logicalShape);if(1!==a||p||v){if(p&&!v)d=1===u?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(s.length){var m=a-2,g=a-1;s.indexOf(m)>-1&&s.indexOf(g)>-1?d="return vec4(outputValue.x);":s.indexOf(m)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":s.indexOf(g)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return"\n    vec4 "+i+"() {\n      "+c+" coords = getOutputCoords();\n      "+e+"\n      vec4 outputValue = get"+o+"("+h+");\n      "+d+"\n    }\n  "}(t,n):function(t,n){var e=t.name,r=e.charAt(0).toUpperCase()+e.slice(1),o="get"+r+"AtOutCoords",i=n.texShape,a=t.shapeInfo.texShape,u=t.shapeInfo.logicalShape.length,s=n.logicalShape.length;if(!t.shapeInfo.isUniform&&u===s&&null==t.shapeInfo.flatOffset&&_(a,i))return"\n      float "+o+"() {\n        return sampleTexture("+e+", resultUV);\n      }\n    ";var c=ia(s),l=Mr(t.shapeInfo.logicalShape,n.logicalShape),f=s-u,h=["x","y","z","w","u","v"];return"\n    float "+o+"() {\n      "+c+" coords = getOutputCoords();\n      "+(0===u?"":s<2&&l.length>=1?"coords = 0;":l.map((function(t){return"coords."+h[t+f]+" = 0;"})).join("\n"))+"\n      return get"+r+"("+(s<2&&u>0?"coords":t.shapeInfo.logicalShape.map((function(t,n){return"coords."+h[n+f]})).join(", "))+");\n    }\n  "}(t,n)),r}(t,n,r)})).join("\n"),c=n.texShape,l=Xi(),f=function(t){return"\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return "+t.texture2D+"(textureSampler, uv).r;\n    }\n  "}(l),h=function(t){return t.version+"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    "+t.varyingFs+" vec2 resultUV;\n    "+t.defineOutput+"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    "+t.defineSpecialNaN+"\n    "+t.defineSpecialInf+"\n    "+t.defineRound+"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    "+Zi+"\n    "+ta+"\n    "+na+"\n  "}(l);return n.isPacked?(i=function(t,n){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,n){var e=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return 1===e[0]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * "+e[1]+".0);\n      }\n    ":1===e[1]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * "+e[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      return 2 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n    }\n  "}(0,n);case 2:return function(t,n){var e=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];if(_(t,n))return"\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2("+e[0]+", "+e[1]+"));\n      }\n    ";var r=Math.ceil(t[1]/2);return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec2(r, c);\n    }\n  "}(t,n);case 3:return e=t,r=n,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=(i=Math.ceil(e[2]/2))*Math.ceil(e[1]/2),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+o[0]+", "+o[1]+"));\n      int index = resTexRC.x * "+o[1]+" + resTexRC.y;\n\n      int b = index / "+a+";\n      index -= b * "+a+";\n\n      int r = 2 * (index / "+i+");\n      int c = imod(index, "+i+") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";default:return function(t,n){for(var e=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2),i=o,a="",u="b, r, c",s=2;s<t.length-1;s++)a="\n      int b"+s+" = index / "+(i*=t[t.length-s-1])+";\n      index -= b"+s+" * "+i+";\n    "+a,u="b"+s+", "+u;return"\n    ivec"+t.length+" getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+a+"\n\n      int b = index / "+o+";\n      index -= b * "+o+";\n\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec"+t.length+"("+u+");\n    }\n  "}(t,n)}var e,r,o,i,a}(n.logicalShape,c),a=function(t){return"\n    void setOutput(vec4 val) {\n      "+t.output+" = val;\n    }\n  "}(l)):(i=function(t,n){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,n){return 1===n[0]?"\n      int getOutputCoords() {\n        return int(resultUV.x * "+n[1]+".0);\n      }\n    ":1===n[1]?"\n      int getOutputCoords() {\n        return int(resultUV.y * "+n[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      return resTexRC.x * "+n[1]+" + resTexRC.y;\n    }\n  "}(0,n);case 2:return function(t,n){return _(t,n)?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2("+n[0]+", "+n[1]+"));\n      }\n    ":1===t[1]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+n[0]+", "+n[1]+"));\n        int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":1===t[0]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+n[0]+", "+n[1]+"));\n        int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      int r = index / "+t[1]+";\n      int c = index - r * "+t[1]+";\n      return ivec2(r, c);\n    }\n  "}(t,n);case 3:return e=n,r=Yi(["r","c","d"],t),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      "+r+"\n      return ivec3(r, c, d);\n    }\n  ";case 4:return function(t,n){var e=Yi(["r","c","d","d2"],t);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      "+e+"\n      return ivec4(r, c, d, d2);\n    }\n  "}(t,n);case 5:return function(t,n){var e=Yi(["r","c","d","d2","d3"],t);return"\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2("+n[0]+",\n                             "+n[1]+"));\n\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      "+e+"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  "}(t,n);case 6:return function(t,n){var e=Yi(["r","c","d","d2","d3","d4"],t);return"\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      "+e+"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  "}(t,n);default:throw new Error(t.length+"-D output sampling is not yet supported")}var e,r}(n.logicalShape,c),a=function(t){return"\n    void setOutput(float val) {\n      "+t.output+" = vec4(val, 0, 0, 0);\n    }\n  "}(l)),r&&(h+=ea),[h,f,a,u,i,s,e].join("\n")}var Zi="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ta="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",na="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ea="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function ra(t){return"offset"+t}function oa(t){var n=t.name,e=F(t.shapeInfo.logicalShape);return e<2?"return "+n+";":"\n    for (int i = 0; i < "+e+"; i++) {\n      if (i == index) {\n        return "+n+"[i];\n      }\n    }\n  "}function ia(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error("GPU for rank "+t+" is not yet supported")}function aa(t,n){var e=JSON.parse(JSON.stringify(t));return e.shapeInfo.logicalShape=n,e}function ua(t,n){return n.map((function(n){return t[n]})).join(", ")}var sa=function(t,n,e,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,A(t.length>2,(function(){return"Packed arg"+(e.charAt(0).toUpperCase()+e.slice(1))+" supports only inputs with rank above 2."}));var o=t[t.length-1],i=Math.ceil(o/n);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");var a,u,s=this.outputShape,c=s.length,l=ia(c),f=ji("coords",c);if(1===i){var h=ia(u=c+1);a="\n        "+h+" sourceLocR = "+h+"("+f.join()+", 0);\n        ++"+f[c-1]+";\n        "+h+" sourceLocG = "+h+"("+f.join()+", 0);\n        ++"+f[c-2]+";\n        "+h+" sourceLocA = "+h+"("+f.join()+", 0);\n        --"+f[c-1]+";\n        "+h+" sourceLocB = "+h+"("+f.join()+", 0);\n        --"+f[c-2]+";"}else u=c,a="\n        "+l+" sourceLocR = coords;\n        ++"+f[c-1]+";\n        "+l+" sourceLocG = coords;\n        ++"+f[c-2]+";\n        "+l+" sourceLocA = coords;\n        --"+f[c-1]+";\n        "+l+" sourceLocB = coords;\n        --"+f[c-2]+";";var d=["x","y","z","w","u","v"].slice(0,u),p="."+d[u-1],v=d.map((function(t){return"int "+t})),m=ji("sourceLocR",u-1).concat("inIdx.r"),g=ji("sourceLocG",u-1).concat("inIdx.g"),y=ji("sourceLocB",u-1).concat("inIdx.b"),x=ji("sourceLocA",u-1).concat("inIdx.a"),b="max"===e?"greaterThan":"lessThan",w=r?"":"\n          inIdx = round(vec4(getBestIndicesAChannel("+m.join()+"),\n                             getBestIndicesAChannel("+g.join()+"),\n                             getBestIndicesAChannel("+y.join()+"),\n                             getBestIndicesAChannel("+x.join()+")));",C="vec4(\n            getAChannel("+m.join()+"),\n            hasNextCol ? getAChannel("+g.join()+") : 0.,\n            hasNextRow ? getAChannel("+y.join()+") : 0.,\n            hasNextRow && hasNextCol ? getAChannel("+x.join()+") : 0.)",E=r?"":"\n      float getBestIndicesAChannel("+v.join()+") {\n        return getChannel(getBestIndicesA("+d.join()+"),\n                                          vec2("+d.slice(-2).join()+"));\n      }";this.userCode="\n      float getAChannel("+v.join()+") {\n        return getChannel(getA("+d.join()+"),\n                               vec2("+d.slice(-2).join()+"));\n      }\n      "+E+"\n      void main() {\n        "+l+" coords = getOutputCoords();\n        bool hasNextCol = "+f[c-1]+" < "+(s[c-1]-1)+";\n        bool hasNextRow = "+f[c-2]+" < "+(s[c-2]-1)+";\n        "+a+"\n        ivec4 srcIdx = ivec4(sourceLocR"+p+", sourceLocG"+p+",\n          sourceLocB"+p+", sourceLocA"+p+") * "+n+";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = "+C+";\n\n        for (int i = 0; i < "+n+"; i++) {\n          inIdx = srcIdx;\n          "+w+"\n          vec4 candidate = "+C+";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4("+b+"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    "},ca=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var n=t.filterHeight,e=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,u=t.effectiveFilterHeight,s=t.effectiveFilterWidth,c=u-1-t.padInfo.top,l=s-1-t.padInfo.left,f=1/(n*e);this.userCode="\n      const ivec2 pads = ivec2("+c+", "+l+");\n      const float avgMultiplier = float("+f+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+u+";\n            wR += "+i+") {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+s+";\n            wC+= "+a+") {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},la=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var n=t.filterDepth,e=t.filterHeight,r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,u=t.dilationDepth,s=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,f=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=l-1-t.padInfo.front,p=f-1-t.padInfo.top,v=h-1-t.padInfo.left,m=1/(n*e*r);this.userCode="\n      const ivec3 pads = ivec3("+d+", "+p+", "+v+");\n      const float avgMultiplier = float("+m+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+u+") {\n          float dyD = float(dyDCorner + wD) / "+o+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+f+";\n              wR += "+s+") {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+h+";\n                wC += "+c+") {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},fa=function(t,n,e,r,o,i){this.outputShape=[],this.variableNames=["x","mean","variance"],Pr(t,n),Pr(t,e);var a="0.0";null!=r&&(Pr(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var u="1.0";null!=o&&(Pr(t,o),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = "+a+";\n        float scale = "+u+";\n        float inv = scale * inversesqrt(variance + float("+i+"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    "},ha=function(t,n,e,r,o,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Pr(t,n),Pr(t,e);var a="vec4(0.0)";null!=r&&(Pr(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var u="vec4(1.0)";null!=o&&(Pr(t,o),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        vec4 offset = "+a+";\n        vec4 scale = "+u+";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4("+i+"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    "},da=function(t,n,e){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Pr(n,e),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        "+t+"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    "},pa="return a + b;",va="return a - b;",ma="return a * b;",ga="return (a < 0.) ? b * a : a;",ya=function(t,n,e){this.variableNames=["A","B"],this.outputShape=Pr(n,e),this.userCode="\n      float binaryOperation(float a, float b) {\n        "+t+"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    "},xa="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",ba=function(t,n,e,r){void 0===r&&(r=!1),this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Pr(n,e);var o=this.outputShape.length,i="";if(r)if(0===o||1===F(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i="\n          "+ia(o)+" coords = getOutputCoords();\n        ",1===o)i+="\n            result.y = (coords + 1) >= "+this.outputShape[0]+" ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";else{var a=ji("coords",o);i+="\n            bool nextRowOutOfBounds =\n              ("+a[o-2]+" + 1) >= "+this.outputShape[o-2]+";\n            bool nextColOutOfBounds =\n              ("+a[o-1]+" + 1) >= "+this.outputShape[o-1]+";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          "}this.userCode="\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        "+t+"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        "+i+"\n\n        setOutput(result);\n      }\n    "},wa=function(){function t(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,n){var e=this;return function(r,o){null==e.minLoc&&(e.minLoc=r.getUniformLocationNoThrow(o,"minVal"),e.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(e.minLoc,t),r.gl.uniform1f(e.maxLoc,n)}},t}(),Ca=function(){function t(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,n){var e=this;return function(r,o){null==e.minLoc&&(e.minLoc=r.getUniformLocationNoThrow(o,"minVal"),e.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(e.minLoc,t),r.gl.uniform1f(e.maxLoc,n)}},t}(),Ea=function(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "},Ra=function(t){this.outputShape=[],this.outputShape=Se(t,1),this.variableNames=t.map((function(t,n){return"T"+n}));var n=new Array(t.length-1);n[0]=t[0][1];for(var e=1;e<n.length;e++)n[e]=n[e-1]+t[e][1];var r=["if (yC < "+n[0]+") setOutput(getT0(yR, yC));"];for(e=1;e<n.length;e++){var o=n[e-1];r.push("else if (yC < "+n[e]+") setOutput(getT"+e+"(yR, yC-"+o+"));")}var i=n.length,a=n[n.length-1];r.push("else setOutput(getT"+i+"(yR, yC-"+a+"));"),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        "+r.join("\n        ")+"\n      }\n    "},Ia=function(t,n){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Se(t,n);var e=this.outputShape,r=e.length,o=ia(r),i=ji("coords",r),a=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((function(t,n){return"T"+n}));var u=new Array(t.length-1);u[0]=t[0][n];for(var s=1;s<u.length;s++)u[s]=u[s-1]+t[s][n];var c=a[n],l=a.slice(-2),f=a.join(),h="if ("+c+" < "+u[0]+") {\n        return getChannel(\n            getT0("+f+"), vec2("+l.join()+"));\n        }";for(s=1;s<u.length;s++){var d=u[s-1];h+="\n        if ("+c+" < "+u[s]+"  && "+c+" >= "+u[s-1]+") {\n          return getChannel(\n            getT"+s+"("+ka(a,c,d)+"),\n            vec2("+ka(l,c,d)+"));\n        }"}var p=u.length,v=u[u.length-1];h+="\n        return getChannel(\n          getT"+p+"("+ka(a,c,v)+"),\n          vec2("+ka(l,c,v)+"));",this.userCode="\n      float getValue("+a.map((function(t){return"int "+t}))+") {\n        "+h+"\n      }\n\n      void main() {\n        "+o+" coords = getOutputCoords();\n        vec4 result = vec4(getValue("+i+"), 0., 0., 0.);\n\n        "+i[r-1]+" = "+i[r-1]+" + 1;\n        if ("+i[r-1]+" < "+e[r-1]+") {\n          result.g = getValue("+i+");\n        }\n\n        "+i[r-2]+" = "+i[r-2]+" + 1;\n        if ("+i[r-2]+" < "+e[r-2]+") {\n          result.a = getValue("+i+");\n        }\n\n        "+i[r-1]+" = "+i[r-1]+" - 1;\n        if ("+i[r-2]+" < "+e[r-2]+" &&\n            "+i[r-1]+" < "+e[r-1]+") {\n          result.b = getValue("+i+");\n        }\n        setOutput(result);\n      }\n    "};function ka(t,n,e){var r=t.indexOf(n);return t.map((function(t,n){return n===r?t+" - "+e:t})).join()}var Sa=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var n=t.strideHeight,e=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,i="channelsLast"===t.dataFormat;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+n+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+e+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              if ("+i+") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Aa=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var n=t.filterHeight,e=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i="channelsLast"===t.dataFormat,a=n-1-t.padInfo.top,u=e-1-t.padInfo.left,s=i?1:2,c=i?2:3,l=i?3:1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+u+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords["+l+"];\n\n        ivec2 dyCorner = ivec2(coords["+s+"], coords["+c+"]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+n+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+n+" - 1 - wR;\n\n          for (int wC = 0; wC < "+e+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+e+" - 1 - wC;\n\n            for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n\n              if ("+i+") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ta=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var n=t.strideDepth,e=t.strideHeight,r=t.strideWidth,o=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yF = 0; yF < "+t.outDepth+"; yF++) {\n            int xF = wF + yF * "+n+" - "+o+";\n\n            if (xF < 0 || xF >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n              int xR = wR + yR * "+e+" - "+i+";\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n                int xC = wC + yC * "+r+" - "+a+";\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Da=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var n=t.filterDepth,e=t.filterHeight,r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,u=n-1-t.padInfo.front,s=e-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode="\n      const ivec3 pads = ivec3("+u+", "+s+", "+c+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+n+"; wF++) {\n          float dyF = float(dyFCorner + wF) / "+o+".0;\n\n          if (dyF < 0.0 || dyF >= "+t.outDepth+".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = "+n+" - 1 - wF;\n\n          for (int wR = 0; wR < "+e+"; wR++) {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = "+e+" - 1 - wR;\n\n            for (int wC = 0; wC < "+r+"; wC++) {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = "+r+" - 1 - wC;\n\n              for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Na=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var n=t.strideHeight,e=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * "+i+" + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+n+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+e+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Fa=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var n=t.filterHeight,e=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i=n-1-t.padInfo.top,a=e-1-t.padInfo.left,u=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 pads = ivec2("+i+", "+a+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < "+n+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+n+" - 1 - wR;\n\n          for (int wC = 0; wC < "+e+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+e+" - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < "+u+"; dm++) {\n              int d2 = d1 * "+u+" + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},_a=function(t,n,e,r){void 0===n&&(n=!1),void 0===e&&(e=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.padInfo.top,i=t.padInfo.left,a=t.strideHeight,u=t.strideWidth,s=t.dilationHeight,c=t.dilationWidth,l=t.filterHeight,f=t.filterWidth,h=4*Math.floor(t.inChannels/4),d=t.inChannels%4,p="channelsLast"===t.dataFormat,v=p?1:2,m=p?2:3,g=p?3:1,y="",x="";e&&(y=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+e+"\n        }":"\n          float activation(float x) {\n            "+e+"\n          }\n        ",x="result = activation(result);");var b=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+y+"\n\n      const ivec2 strides = ivec2("+a+", "+u+");\n      const ivec2 pads = ivec2("+o+", "+i+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords["+g+"];\n\n        ivec2 xRCCorner =\n            ivec2(coords["+v+"], coords["+m+"]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+l+"; wR++) {\n          int xR = xRCorner + wR * "+s+";\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+f+"; wC++) {\n            int xC = xCCorner + wC * "+c+";\n\n            if (xC < 0 || xC >= "+t.inWidth+") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < "+h+"; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if ("+p+") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if ("+(1===d)+") {\n\n              if ("+p+") {\n                dotProd +=\n                    getX(batch, xR, xC, "+h+") *\n                    getW(wR, wC, "+h+", d2);\n              } else {\n                dotProd +=\n                    getX(batch, "+h+", xR, xC) *\n                    getW(wR, wC, "+h+", d2);\n              }\n\n            } else if ("+(2===d)+") {\n              vec2 wValues = vec2(\n                getW(wR, wC, "+h+", d2),\n                getW(wR, wC, "+h+" + 1, d2)\n              );\n\n              if ("+p+") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, "+h+"),\n                  getX(batch, xR, xC, "+h+" + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, "+h+", xR, xC),\n                  getX(batch, "+h+" + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if ("+(3===d)+") {\n              vec3 wValues = vec3(\n                getW(wR, wC, "+h+", d2),\n                getW(wR, wC, "+h+" + 1, d2),\n                getW(wR, wC, "+h+" + 2, d2)\n              );\n\n              if ("+p+") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, "+h+"),\n                  getX(batch, xR, xC, "+h+" + 1),\n                  getX(batch, xR, xC, "+h+" + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, "+h+", xR, xC),\n                  getX(batch, "+h+" + 1, xR, xC),\n                  getX(batch, "+h+" + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        "+b+"\n        "+x+"\n        setOutput(result);\n      }\n    "},Oa=function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var n=t.padInfo.front,e=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,u=t.dilationDepth,s=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,f=t.filterHeight,h=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+n+", "+e+", "+r+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+l+"; wF++) {\n          int xF = xFCorner + wF * "+u+";\n\n          if (xF < 0 || xF >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+f+"; wR++) {\n            int xR = xRCorner + wR * "+s+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+h+"; wC++) {\n              int xC = xCCorner + wC * "+c+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < "+d+"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if ("+(1===p)+") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, "+d+") *\n                  getW(wF, wR, wC, "+d+", d2);\n              } else if ("+(2===p)+") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, "+d+"),\n                  getX(batch, xF, xR, xC, "+d+" + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, "+d+", d2),\n                  getW(wF, wR, wC, "+d+" + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if ("+(3===p)+") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, "+d+"),\n                  getX(batch, xF, xR, xC, "+d+" + 1),\n                  getX(batch, xF, xR, xC, "+d+" + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, "+d+", d2),\n                  getW(wF, wR, wC, "+d+" + 1, d2),\n                  getW(wF, wR, wC, "+d+" + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ma=function(t,n,e,r){void 0===n&&(n=!1),void 0===e&&(e=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.inHeight,i=t.inWidth,a=t.padInfo.top,u=t.padInfo.left,s=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,f=t.dilationWidth,h=t.filterHeight,d=t.filterWidth,p=t.outChannels/t.inChannels,v="",m="";e&&(v=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+e+"\n        }":"\n          float activation(float x) {\n            "+e+"\n          }\n        ",m="result = activation(result);");var g=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+v+"\n\n      const ivec2 strides = ivec2("+s+", "+c+");\n      const ivec2 pads = ivec2("+a+", "+u+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / "+p+";\n        int q = d2 - d1 * "+p+";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < "+h+"; wR++) {\n          int xR = xRCorner + wR * "+l+";\n\n          if (xR < 0 || xR >= "+o+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+d+"; wC++) {\n            int xC = xCCorner + wC * "+f+";\n\n            if (xC < 0 || xC >= "+i+") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        "+g+"\n        "+m+"\n        setOutput(result);\n      }\n    "},Ba=function(t,n,e,r){void 0===n&&(n=!1),void 0===e&&(e=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;for(var o=t.inHeight,i=t.inWidth,a=t.padInfo.top,u=t.padInfo.left,s=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,f=t.dilationWidth,h=t.filterHeight,d=t.filterWidth,p=d,v="int xR; int xC; int xCOffset;",m=0;m<h;m++)for(var g=0;g<d;g++)v+="\n          vec4 xTexelR"+m+"C"+2*g+" = vec4(0.);\n          vec4 wR"+m+"C"+g+" = vec4(0.);\n          vec4 xR"+m+"C"+g+" = vec4(0.);";for(m=0;m<h;m++)for(var y=0;y<p;y++){if(v+="\n          xR = xRCorner + "+m*l+";\n          xC = xCCorner + "+(g=2*y)*f+";\n        ",1===c){if(g<d&&(v+=u%2==1?"\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+m+"C"+g+" = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= "+i+") {\n                    xTexelR"+m+"C"+g+".zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR"+m+"C"+g+" = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+i+") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= "+i+") {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR"+m+"C"+g+" = vec4(previous.zw, xTexelR"+m+"C"+g+".xy);\n                } else {\n                  xR"+m+"C"+g+" = vec4(0, 0, xTexelR"+m+"C"+g+".xy);\n                }\n              ":"\n                if(xR >= 0 && xR < "+o+" && xC >= 0 && xC < "+i+") {\n                  xTexelR"+m+"C"+g+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+m+"C"+g+" = vec4(0.);\n                }\n\n                xR"+m+"C"+g+" = xTexelR"+m+"C"+g+";\n              ",g+1<d)){var x=u%2==0?k(f):f;f%2==0&&u%2==1||f%2!=0&&u%2!=1?(v+="\n                  xCOffset = xC + "+u%2+" + "+x+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+i+") {\n                    xTexelR"+m+"C"+(g+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n                ",f>1&&(v+="\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < "+o+" &&\n                      xCOffset >= 0 && xCOffset < "+i+") {\n                      xTexelR"+m+"C"+g+" = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR"+m+"C"+g+" = vec4(0.);\n                    }\n                  "),v+="\n                  xR"+m+"C"+(g+1)+" = vec4(\n                    xTexelR"+m+"C"+g+".zw, xTexelR"+m+"C"+(g+2)+".xy);\n                "):v+="\n                  xCOffset = xC + "+x+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+i+") {\n                    xTexelR"+m+"C"+(g+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR"+m+"C"+(g+1)+" = xTexelR"+m+"C"+(g+2)+";\n                "}}else g<d&&(v+="\n              if(xR >= 0 && xR < "+o+") {\n            ",u%2==1?(v+="\n                xCOffset = xC + 1 - "+c+";\n                if(xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+m+"C"+g+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+m+"C"+g+" = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < "+i+") {\n                  xTexelR"+m+"C"+(g+2)+" = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR"+m+"C"+(g+2)+" = vec4(0.);\n                }\n\n                xR"+m+"C"+g+" = vec4(\n                  xTexelR"+m+"C"+g+".zw, xTexelR"+m+"C"+(g+2)+".zw);\n              ",g+1<d&&(v+="\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + "+c+";\n                  if(xCOffset >= 0 && xCOffset < "+i+") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR"+m+"C"+(g+1)+" = vec4(xTexelR"+m+"C"+(g+2)+".xy, final.xy);\n                ")):(v+="\n                if(xC >= 0 && xC < "+i+") {\n                  xTexelR"+m+"C"+g+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+m+"C"+g+" = vec4(0.);\n                }\n\n                xCOffset = xC + "+c+";\n                if(xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+m+"C"+(g+2)+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+m+"C"+(g+2)+" = vec4(0.);\n                }\n\n                xR"+m+"C"+g+" = vec4(\n                  xTexelR"+m+"C"+g+".xy, xTexelR"+m+"C"+(g+2)+".xy);\n              ",g+1<d&&(v+="\n                  xR"+m+"C"+(g+1)+" = vec4(\n                    xTexelR"+m+"C"+g+".zw, xTexelR"+m+"C"+(g+2)+".zw);\n                ")),v+="}");g<d&&(v+="\n            vec4 wTexelR"+m+"C"+g+" = getW("+m+", "+g+", d1, q);\n            wR"+m+"C"+g+" = vec4(wTexelR"+m+"C"+g+".xz, wTexelR"+m+"C"+g+".xz);\n          ",g+1<d&&(v+="\n              vec4 wTexelR"+m+"C"+(g+1)+" = getW("+m+", "+(g+1)+", d1, q);\n              wR"+m+"C"+(g+1)+" =\n                vec4(wTexelR"+m+"C"+(g+1)+".xz, wTexelR"+m+"C"+(g+1)+".xz);"))}for(m=0;m<h;m++)for(g=0;g<d;g++)v+="dotProd += xR"+m+"C"+g+" * wR"+m+"C"+g+";";var b="",w="";e&&(b=r?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+e+"\n        }":"vec4 activation(vec4 x) {\n          "+e+"\n        }",w="result = activation(result);");var C=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+b+"\n\n      const ivec2 strides = ivec2("+s+", "+c+");\n      const ivec2 pads = ivec2("+a+", "+u+");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        "+v+"\n\n        vec4 result = dotProd;\n        "+C+"\n        "+w+"\n        setOutput(result);\n      }\n    "},Pa=function(t,n,e,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];var i=t[0],a=t[1],u=t[2],s=t[3],c=n[0],l=e[0],f=e[1];this.outputShape=[c,l,f,s];var h="bilinear"===r?1:0,d=[a-1+".0",u-1+".0"],p=d[0],v=d[1],m=l>1?[""+(a-1)/(l-1),"(y2-y1) * height_ratio","y1*"+p+" + float(y)*(height_scale)"]:["0.0","0.0","0.5 * (y1+y2) * "+p],g=m[0],y=m[1],x=m[2],b=f>1?[""+(u-1)/(f-1),"(x2-x1) * width_ratio","x1*"+v+" + float(x)*(width_scale)"]:["0.0","0.0","0.5 * (x1+x2) * "+v],w=b[0],C=b[1],E=b[2];this.userCode="\n      const float height_ratio = float("+g+");\n      const float width_ratio = float("+w+");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= "+i+") {\n          return;\n        }\n\n        float height_scale = "+y+";\n        float width_scale = "+C+";\n\n        float in_y = "+x+";\n        if( in_y < 0.0 || in_y > "+p+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n        float in_x = "+E+";\n        if( in_x < 0.0 || in_x > "+v+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if("+h+" == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    "},La=function(t,n,e){this.variableNames=["x"],this.outputShape=t;var r=t.length,o=t[t.length-1],i=e?"<":">";this.userCode="\n      int getIndex(int i) {\n        "+(e?"return "+o+" -i - 1;":"return i;")+"\n      }\n\n      void main() {\n        "+ia(r)+" coords = getOutputCoords();\n        int end = "+Wa(r,"coords")+";\n        float val = 0.0;\n        for (int i = "+o+" - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx "+i+" end) {\n            continue;\n          }\n          if (idx == end && "+n+") {\n            continue;\n          }\n          "+Wa(r,"coords")+" = idx;\n          val += getX("+function(t,n){if(1===t)return""+n;if(2===t)return n+".x, "+n+".y";if(3===t)return n+".x, "+n+".y, "+n+".z";if(4===t)return n+".x, "+n+".y, "+n+".z, "+n+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}(r,"coords")+");\n        }\n        setOutput(val);\n      }\n    "};function Wa(t,n){if(1===t)return""+n;if(2===t)return n+".y";if(3===t)return n+".z";if(4===t)return n+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}var Ua=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Gt.DENSE;var n=Qt(t),e=Xi();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+Yi(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+n[0]+", "+n[1]+"));\n        int index = 4 * (resTexRC.x * "+n[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        "+e.output+" = result;\n      }\n    "},za=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Gt.DENSE;var n=Qt(t),e=Xi();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+Yi(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+n[0]+", "+n[1]+"));\n        int index = 4 * (resTexRC.x * "+n[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        "+e.output+" = result;\n      }\n    "},Va=function(){function t(t,n,e){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=n,this.dataFormat=e,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = "+this.getHeightCoordString()+";\n      int w = "+this.getWidthCoordString()+";\n      int d = "+this.getDepthCoordString()+";\n\n      int in_h = h / "+n+";\n      int offset_h = imod(h, "+n+");\n      int in_w = w / "+n+";\n      int offset_w = imod(w, "+n+");\n      int offset_d = (offset_h * "+n+" + offset_w) *\n        "+this.getOutputDepthSize()+";\n      int in_d = d + offset_d;\n\n      float result = "+this.getInputSamplingString()+";\n      setOutput(result);\n    }\n  "}return t.prototype.getHeightCoordString=function(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"},t.prototype.getWidthCoordString=function(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"},t.prototype.getDepthCoordString=function(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"},t.prototype.getOutputDepthSize=function(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},t.prototype.getInputSamplingString=function(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"},t}(),Ga=function(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "},Ha=function(t){this.variableNames=["A"],this.outTexUsage=Ht.DOWNLOAD;var n=Xi();this.outputShape=t,this.userCode="\n      "+Qi+"\n\n      void main() {\n        float x = getAAtOutCoords();\n        "+n.output+" = encode_float(x);\n      }\n    "},qa=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Ht.DOWNLOAD;var n=Xi();this.outputShape=t,this.userCode="\n      "+Qi+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        "+n.output+" = encode_float(x);\n      }\n    "},Ka=function(t,n,e){void 0===e&&(e=!1),this.variableNames=["A"];var r=Xi(),o=n[0],i=n[1];this.outputShape=t;var a="result";e&&(a="floor(result * 255. + 0.5)"),this.userCode="\n      "+$i(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / "+i+";\n        int c = imod(flatIndex, "+i+");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n        vec4 values = "+r.texture2D+"(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        "+r.output+" = vec4("+a+", 0., 0., 0.);\n      }\n    "},ja=function(t,n,e){void 0===e&&(e=!1),this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var r=Xi(),o=n[0],i=n[1];this.outputShape=t;var a="",u="result";e&&(u="floor(result * 255. + 0.5)");for(var s=0;s<=1;s++)for(var c=0;c<=1;c++){var l=2*s+c;a+="\n          localCoords = coords;\n          if(localCoords[2] + "+c+" < "+t[2]+") {\n            localCoords[2] += "+c+";\n            if(localCoords[1] + "+s+" < "+t[1]+") {\n              localCoords[1] += "+s+";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / "+i+";\n              c = imod(flatIndex, "+i+");\n              uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n              values = "+r.texture2D+"(A, uv);\n\n              if(offset == 0) {\n                result["+l+"] = values[0];\n              } else if(offset == 1) {\n                result["+l+"] = values[1];\n              } else if(offset == 2) {\n                result["+l+"] = values[2];\n              } else {\n                result["+l+"] = values[3];\n              }\n            }\n          }\n        "}this.userCode="\n      "+$i(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        "+a+"\n\n        "+r.output+" = "+u+";\n      }\n    "},Xa=function(t,n,e){this.variableNames=["real","imag"];var r=n[1];this.outputShape=n;var o=e?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,i=e?r+".0":"1.0";this.userCode="\n      const float exponentMultiplier = "+o+";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        "+t+"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float("+r+");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < "+r+"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / "+i+";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    "},Ya=function(){function t(t,n){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var n=this;return function(e,r){null==n.valueLoc&&(n.valueLoc=e.getUniformLocationNoThrow(r,"value")),e.gl.uniform1f(n.valueLoc,t)}},t}(),$a=function(t,n,e){this.variableNames=["A","indices"];var r=t.slice();r[e]=n,this.outputShape=r,this.rank=r.length;var o=ia(this.rank),i=function(t,n){var e=t.length;if(e>4)throw Error("Gather for rank "+e+" is not yet supported");if(1===e)return"int(getIndices(resRC))";for(var r=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],i=0;i<t.length;i++)i===n?o.push("int(getIndices("+r[i]+"))"):o.push(""+r[i]);return o.join()}(t,e);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},Qa=function(t,n,e){this.sliceDim=t,this.strides=n,this.variableNames=["x","indices"],this.outputShape=e;var r=ia(n.length),o=ia(e.length),i=this.sliceDim>1?"strides[j]":"strides";this.userCode="\n        "+r+" strides = "+r+"("+this.strides+");\n         void main() {\n          "+o+" coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < "+this.sliceDim+"; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * "+i+";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      "};function Ja(t,n){var e=Xi();return on(t,n,e.version+"\n    precision highp float;\n    "+e.attribute+" vec3 clipSpacePos;\n    "+e.attribute+" vec2 uv;\n    "+e.varyingVs+" vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }")}function Za(t,n){return dn(t,n,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function tu(t,n){return pn(t,n,new Uint16Array([0,1,2,2,1,3]))}function nu(t,n,e,r,o,i,a){mn(e,r);var u=vn(t,n),s=t.TEXTURE_2D;return tn(t,n,(function(){return t.bindTexture(s,u)})),tn(t,n,(function(){return t.texParameteri(s,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)})),tn(t,n,(function(){return t.texParameteri(s,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)})),tn(t,n,(function(){return t.texParameteri(s,t.TEXTURE_MIN_FILTER,t.NEAREST)})),tn(t,n,(function(){return t.texParameteri(s,t.TEXTURE_MAG_FILTER,t.NEAREST)})),tn(t,n,(function(){return t.texImage2D(s,0,o,e,r,0,i,a,null)})),tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,null)})),u}function eu(t,n,e,r,o){var i=$t(e,r);return nu(t,n,i[0],i[1],o.internalFormatFloat,o.textureFormatFloat,t.FLOAT)}function ru(t,n,e,r,o){var i=$t(e,r);return nu(t,n,i[0],i[1],o.internalFormatHalfFloat,o.textureFormatFloat,o.textureTypeHalfFloat)}function ou(t,n,e,r,o){var i=$t(e,r);return nu(t,n,i[0],i[1],t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}function iu(t,n,e,r,o){var i=Jt(e,r);return nu(t,n,i[0],i[1],o.internalFormatPackedFloat,t.RGBA,t.FLOAT)}function au(t,n,e,r,o){var i=Jt(e,r);return nu(t,n,i[0],i[1],o.internalFormatPackedHalfFloat,t.RGBA,o.textureTypeHalfFloat)}function uu(t,n,e,r){return tn(t,n,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),yn(t,n,e,"clipSpacePos",r,3,20,0)&&yn(t,n,e,"uv",r,2,20,12)}function su(t,n,e,r,o,i,a){var u,s,c;tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,e)})),i instanceof Uint8Array?(u=new Uint8Array(r*o*4),s=t.UNSIGNED_BYTE,c=t.RGBA):(u=new Float32Array(r*o*4),s=t.FLOAT,c=a.internalFormatPackedFloat),u.set(i),tn(t,n,(function(){return t.texImage2D(t.TEXTURE_2D,0,c,r,o,0,t.RGBA,s,u)})),tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function cu(t,n,e,r){tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,e)})),r.data instanceof Uint8Array?tn(t,n,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)})):tn(t,n,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)})),tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function lu(t,n,e,r,o){var i=t.createBuffer();tn(t,n,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,i)}));var a=16*e*r;return tn(t,n,(function(){return t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ)})),tn(t,n,(function(){return t.readPixels(0,0,r,e,t.RGBA,t.FLOAT,0)})),tn(t,n,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,null)})),i}function fu(t,n,e){var r=t,o=new Float32Array(e);return r.bindBuffer(r.PIXEL_PACK_BUFFER,n),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}function hu(t,n,e,r,o){var i=$t(e,r),a=i[0],u=i[1],s=new Uint8Array(e*r*4);return tn(t,n,(function(){return t.readPixels(0,0,a,u,o.downloadTextureFormat,t.UNSIGNED_BYTE,s)})),new Float32Array(s.buffer)}function du(t,n,e,r,o,i,a,u){var s=t,c=new Float32Array(function(t,n){var e=Jt(t,n);return e[0]*e[1]*4}(i,a));return s.bindBuffer(s.PIXEL_PACK_BUFFER,n),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,c),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),c}function pu(t,n,e,r){var o=new Float32Array(e*r*4);return tn(t,n,(function(){return t.readPixels(0,0,r,e,t.RGBA,t.FLOAT,o)})),o}var vu=Object.freeze({createVertexShader:Ja,createVertexBuffer:Za,createIndexBuffer:tu,createFloat32MatrixTexture:eu,createFloat16MatrixTexture:ru,createUnsignedBytesMatrixTexture:ou,createPackedMatrixTexture:iu,createFloat16PackedMatrixTexture:au,bindVertexProgramAttributeStreams:uu,uploadDenseMatrixToTexture:su,uploadPixelDataToTexture:cu,createBufferFromOutputTexture:lu,downloadFloat32MatrixFromBuffer:fu,downloadByteEncodedFloatMatrixFromOutputTexture:hu,downloadPackedMatrixFromBuffer:du,downloadMatrixFromPackedOutputTexture:pu}),mu=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var n=h().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,Xt(n,t)):this.gl=Yt(n);var e="WEBGL_color_buffer_float";if(1===h().getNumber("WEBGL_VERSION")){if(this.textureFloatExtension=rn(this.gl,this.debug,"OES_texture_float"),Ln(this.gl,"OES_texture_half_float"))this.textureHalfFloatExtension=rn(this.gl,this.debug,"OES_texture_half_float");else if(h().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(e),Ln(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=rn(this.gl,this.debug,"EXT_color_buffer_half_float");else if(h().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(e="EXT_color_buffer_float",Ln(this.gl,e))this.colorBufferFloatExtension=this.gl.getExtension(e);else{if(!Ln(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=Za(this.gl,this.debug),this.indexBuffer=tu(this.gl,this.debug),this.framebuffer=gn(this.gl,this.debug),this.textureConfig=Zt(this.gl,this.textureHalfFloatExtension)}return Object.defineProperty(t.prototype,"debug",{get:function(){return h().getBool("DEBUG")},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var n=this.gl;tn(n,this.debug,(function(){return n.finish()})),tn(n,this.debug,(function(){return n.bindFramebuffer(n.FRAMEBUFFER,null)})),tn(n,this.debug,(function(){return n.deleteFramebuffer(t.framebuffer)})),tn(n,this.debug,(function(){return n.bindBuffer(n.ARRAY_BUFFER,null)})),tn(n,this.debug,(function(){return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null)})),tn(n,this.debug,(function(){return n.deleteBuffer(t.indexBuffer)})),this.disposed=!0}},t.prototype.createFloat32MatrixTexture=function(t,n){return this.throwIfDisposed(),eu(this.gl,this.debug,t,n,this.textureConfig)},t.prototype.createFloat16MatrixTexture=function(t,n){return this.throwIfDisposed(),ru(this.gl,this.debug,t,n,this.textureConfig)},t.prototype.createUnsignedBytesMatrixTexture=function(t,n){return this.throwIfDisposed(),ou(this.gl,this.debug,t,n,this.textureConfig)},t.prototype.uploadPixelDataToTexture=function(t,n){this.throwIfDisposed(),cu(this.gl,this.debug,t,n)},t.prototype.uploadDenseMatrixToTexture=function(t,n,e,r){this.throwIfDisposed(),su(this.gl,this.debug,t,n,e,r,this.textureConfig)},t.prototype.createFloat16PackedMatrixTexture=function(t,n){return this.throwIfDisposed(),au(this.gl,this.debug,t,n,this.textureConfig)},t.prototype.createPackedMatrixTexture=function(t,n){return this.throwIfDisposed(),iu(this.gl,this.debug,t,n,this.textureConfig)},t.prototype.deleteMatrixTexture=function(t){var n=this;this.throwIfDisposed(),this.outputTexture===t&&(Rn(this.gl,this.debug,this.framebuffer),this.outputTexture=null),tn(this.gl,this.debug,(function(){return n.gl.deleteTexture(t)}))},t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(t,n,e){var r=this;return this.downloadMatrixDriver(t,(function(){return hu(r.gl,r.debug,n,e,r.textureConfig)}))},t.prototype.downloadPackedMatrixFromBuffer=function(t,n,e,r,o,i){return du(this.gl,t,0,0,0,o,i,this.textureConfig)},t.prototype.downloadFloat32MatrixFromBuffer=function(t,n){return fu(this.gl,t,n)},t.prototype.createBufferFromTexture=function(t,n,e){this.bindTextureToFrameBuffer(t);var r=lu(this.gl,this.debug,n,e,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},t.prototype.createAndWaitForFence=function(){var t=this.createFence(this.gl);return this.pollFence(t)},t.prototype.createFence=function(t){var n,e,r=this;if(h().getBool("WEBGL_FENCE_API_ENABLED")){var o=t,i=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),e=function(){var t=o.clientWaitSync(i,0,0);return t===o.ALREADY_SIGNALED||t===o.CONDITION_SATISFIED},n=i}else h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(n=this.beginQuery(),this.endQuery(),e=function(){return r.isQueryAvailable(n,h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}):e=function(){return!0};return{query:n,isFencePassed:e}},t.prototype.downloadMatrixFromPackedTexture=function(t,n,e){var r=this;return this.downloadMatrixDriver(t,(function(){return pu(r.gl,r.debug,n,e)}))},t.prototype.createProgram=function(t){this.throwIfDisposed();var n=this.gl,e=an(n,this.debug,t),r=Ja(n,this.debug),o=ln(n,this.debug);return tn(n,this.debug,(function(){return n.attachShader(o,r)})),tn(n,this.debug,(function(){return n.attachShader(o,e)})),fn(n,this.debug,o),this.debug&&hn(n,this.debug,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=uu(n,this.debug,this.program,this.vertexBuffer)),o},t.prototype.deleteProgram=function(t){var n=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&tn(this.gl,this.debug,(function(){return n.gl.deleteProgram(t)}))},t.prototype.setProgram=function(t){var n=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&hn(this.gl,this.debug,this.program),tn(this.gl,this.debug,(function(){return n.gl.useProgram(t)}))},t.prototype.getUniformLocation=function(t,n,e){return void 0===e&&(e=!0),this.throwIfDisposed(),e?bn(this.gl,this.debug,t,n):wn(this.gl,t,n)},t.prototype.getAttributeLocation=function(t,n){var e=this;return this.throwIfDisposed(),tn(this.gl,this.debug,(function(){return e.gl.getAttribLocation(t,n)}))},t.prototype.getUniformLocationNoThrow=function(t,n){return this.throwIfDisposed(),this.gl.getUniformLocation(t,n)},t.prototype.setInputMatrixTexture=function(t,n,e){this.throwIfDisposed(),this.throwIfNoProgram(),Cn(this.gl,this.debug,this.program,t,n,e)},t.prototype.setOutputMatrixTexture=function(t,n,e){this.setOutputMatrixTextureDriver(t,e,n)},t.prototype.setOutputPackedMatrixTexture=function(t,n,e){this.throwIfDisposed();var r=Jt(n,e),o=r[0],i=r[1];this.setOutputMatrixTextureDriver(t,o,i)},t.prototype.setOutputMatrixWriteRegion=function(t,n,e,r){this.setOutputMatrixWriteRegionDriver(e,t,r,n)},t.prototype.setOutputPackedMatrixWriteRegion=function(t,n,e,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")},t.prototype.debugValidate=function(){null!=this.program&&hn(this.gl,this.debug,this.program),In(this.gl)},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.debug&&this.debugValidate(),tn(t,this.debug,(function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}))},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),tn(this.gl,this.debug,(function(){return t.gl.finish()}))},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=rn(this.gl,this.debug,2===h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.beginQuery=function(){if(2===h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.gl,n=this.getQueryTimerExtensionWebGL2(),e=t.createQuery();return t.beginQuery(n.TIME_ELAPSED_EXT,e),e}var r=this.getQueryTimerExtensionWebGL1(),o=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,o),o},t.prototype.endQuery=function(){if(2!==h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}else{var n=this.gl,e=this.getQueryTimerExtensionWebGL2();n.endQuery(e.TIME_ELAPSED_EXT)}},t.prototype.waitForQueryAndGetTime=function(t){return s(this,void 0,void 0,(function(){var n=this;return c(this,(function(e){switch(e.label){case 0:return[4,L((function(){return n.disposed||n.isQueryAvailable(t,h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}))];case 1:return e.sent(),[2,this.getQueryTime(t,h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))]}}))}))},t.prototype.getQueryTime=function(t,n){if(0===n)return null;if(2===n){var e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.isQueryAvailable=function(t,n){if(0===n)return!0;if(2===n){var e=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}return o=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT),null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint},t.prototype.pollFence=function(t){var n=this;return new Promise((function(e){n.addItemToPoll((function(){return t.isFencePassed()}),(function(){return e()}))}))},t.prototype.pollItems=function(){for(var t=function(t){for(var n=0;n<t.length&&t[n]();++n);return n-1}(this.itemsToPoll.map((function(t){return t.isDoneFn}))),n=0;n<=t;++n)(0,this.itemsToPoll[n].resolveFn)();this.itemsToPoll=this.itemsToPoll.slice(t+1)},t.prototype.addItemToPoll=function(t,n){var e=this;this.itemsToPoll.push({isDoneFn:t,resolveFn:n}),this.itemsToPoll.length>1||L((function(){return e.pollItems(),0===e.itemsToPoll.length}))},t.prototype.bindTextureToFrameBuffer=function(t){this.throwIfDisposed(),En(this.gl,this.debug,t,this.framebuffer),this.debug&&In(this.gl)},t.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(En(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&In(this.gl)):Rn(this.gl,this.debug,this.framebuffer)},t.prototype.downloadMatrixDriver=function(t,n){this.bindTextureToFrameBuffer(t);var e=n();return this.unbindTextureToFrameBuffer(),e},t.prototype.setOutputMatrixTextureDriver=function(t,n,e){this.throwIfDisposed();var r=this.gl;En(r,this.debug,t,this.framebuffer),this.debug&&In(r),this.outputTexture=t,tn(r,this.debug,(function(){return r.viewport(0,0,n,e)})),tn(r,this.debug,(function(){return r.scissor(0,0,n,e)}))},t.prototype.setOutputMatrixWriteRegionDriver=function(t,n,e,r){var o=this;this.throwIfDisposed(),tn(this.gl,this.debug,(function(){return o.gl.scissor(t,n,e,r)}))},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error("No GPU program is currently set.")},t}();function gu(t,n){if(t.length!==n.length)throw Error("Binary was compiled with "+t.length+" inputs, but was executed with "+n.length+" inputs");t.forEach((function(t,e){var r=t.logicalShape,o=n[e],i=o.shape;if(!_(r,i))throw Error("Binary was compiled with different shapes than the current args. Shapes "+r+" and "+i+" must match");if(!t.isUniform||!o.isUniform){var a=t.texShape,u=o.isUniform?null:o.texData.texShape;if(!_(a,u))throw Error("Binary was compiled with different texture shapes than the current args. Shape "+a+" and "+u+" must match")}}))}var yu=function(t,n,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var r=e.filterWidth,o=e.inChannels,i=e.strideWidth,a=e.strideHeight,u=e.padInfo,s=e.outWidth,c=e.dilationWidth,l=e.dilationHeight,f=e.dataFormat,h=u.left,d=u.top,p=o*r,v=Xi(),m="channelsLast"===f,g=m?0:1,y=m?1:2,x="",b=0;b<=1;b++)for(var w=0;w<=1;w++)x+="\n          blockIndex = rc.y + "+w+";\n          pos = rc.x + "+b+";\n\n          if(blockIndex < "+t[1]+" && pos < "+t[0]+") {\n            offsetY = int(blockIndex / ("+s+")) * "+a+" - "+d+";\n            d0 = offsetY + "+l+" * (pos / "+p+");\n\n            if(d0 < "+n[g]+" && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), "+s+".) * "+i+". - "+h+".);\n              d1 = offsetX + "+c+" * (int(mod(float(pos), "+p+".) / "+o+".));\n\n              if(d1 < "+n[y]+" && d1 >= 0) {\n\n                ch = int(mod(float(pos), "+o+".));\n\n                if ("+m+") {\n                  innerDims = vec2(d1, ch);\n                  result["+(2*b+w)+"] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result["+(2*b+w)+"] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";this.userCode="\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        "+x+"\n\n        "+v.output+" = result;\n      }\n    "},xu=function(t,n,e,r,o){this.variableNames=["x"],this.outputShape=[];var i,a=n,u=t[3]-1;this.outputShape=t;var s="float("+e+") + float("+r+") * sum";i=.5===o?"inversesqrt("+s+")":1===o?"1.0/("+s+")":"exp(log("+s+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -"+a+"; j <= "+a+"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  "+u+") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * "+i+";\n        setOutput(val);\n      }\n    "},bu=function(t,n,e,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=n,this.bias=e,this.alpha=r,this.beta=o,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < "+this.depth+"; ++d) {\n          int depthBegin = int(max(0.0, float(d - "+n+")));\n          int depthEnd = int(min(float("+this.depth+"),\n              float(d + "+n+" + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = "+this.depth+";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float("+r+") * norm + float("+e+");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float("+r+")\n                * float("+o+")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * "+o+");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    "},wu=function(t,n,e,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;var i,a=n,u=t[3]-1;this.outputShape=t;var s="float("+e+") + float("+r+") * sum";i=.5===o?"inversesqrt("+s+")":1===o?"1.0/("+s+")":"exp(log("+s+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < "+this.outputShape[3]+";\n        bool hasNextRow = c < "+this.outputShape[2]+";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - "+a+";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - "+a+"; j <= "+a+"; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2("+u+"));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * "+i+";\n        setOutput(result);\n      }\n    "},Cu=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var n=t.strideHeight,e=t.strideWidth,r=t.dilationHeight,o=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=o-1-t.padInfo.top,u=i-1-t.padInfo.left,s=o*i-1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+u+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+o+";\n          wR += "+r+") {\n          float dyR = float(dyRCorner + wR) / "+n+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+i+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+e+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = "+s+" - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * "+i+" + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Eu=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var n=t.strideDepth,e=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,u=t.effectiveFilterDepth,s=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=u-1-t.padInfo.front,f=s-1-t.padInfo.top,h=c-1-t.padInfo.left,d=u*s*c-1;this.userCode="\n      const ivec3 pads = ivec3("+l+", "+f+", "+h+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+u+";\n           wD += "+o+") {\n          float dyD = float(dyDCorner + wD) / "+n+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+s+";\n              wR += "+i+") {\n            float dyR = float(dyRCorner + wR) / "+e+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+a+") {\n              float dyC = float(dyCCorner + wC) / "+r+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = "+d+" -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * "+s+" * "+c+" +\n                  wR * "+c+" + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ru=function(t,n,e,r,o,i,a){void 0===e&&(e=!1),void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===i&&(i=null),void 0===a&&(a=!1),this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;var u=e?t[1]:t[2],s=Math.ceil(u/2),c=e?"i * 2, rc.y":"rc.y, i * 2",l=r?"rc.z, i * 2":"i * 2, rc.z",f=e?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],h=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],d="",p="";i&&(d=a?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+i+"\n        }":"vec4 activation(vec4 x) {\n          "+i+"\n        }",p="result = activation(result);");var v=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+d+"\n\n      const float sharedDimension = "+s+".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < "+s+"; i++) {\n          vec4 a = getMatrixA(rc.x, "+c+");\n          vec4 b = getMatrixB(rc.x, "+l+");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += ("+f[0]+" * "+h[0]+");\n          result += ("+f[1]+" * "+h[1]+");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        "+v+"\n\n        "+p+"\n\n        setOutput(result);\n      }\n    "},Iu=function(){function t(t,n,e){this.variableNames=["probs"],this.outputShape=[t,e],this.userCode="\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < "+(n-1)+"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float("+(n-1)+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var n=this;return function(e,r){null==n.seedLoc&&(n.seedLoc=e.getUniformLocation(r,"seed")),e.gl.uniform1f(n.seedLoc,t)}},t}(),ku=function(t,n,e,r){this.variableNames=["indices"],this.outputShape=[t,n],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float("+r+"), float("+e+"),\n                      float(index == coords.y)));\n      }\n    "},Su=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;var n=t.length;if(0===n)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{var e=ji("rc",n),r=ia(n),o=function(t,n,e){if(1===t)return"rc > "+n[0];for(var r="",o=t-2;o<t;o++)r+=e[o]+" >= "+n[o],o<t-1&&(r+="||");return r}(n,t,e),i=function(t,n,e,r){if(1===t)return"";var o=r.slice(-2);return"\n    int r = "+o[0]+";\n    int c = "+o[1]+";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= "+n+";\n    bool rEdge = rp1 >= "+e+";\n  "}(n,t[t.length-1],t[t.length-2],e),a=function(t,n){var e=t.length,r=function(t,n){for(var e=[],r=0;r<=1;r++)for(var o=0;o<=1;o++){for(var i=(0===r?"r":"rp1")+", "+(0===o?"c":"cp1"),a=2;a<t;a++)i=n[n.length-1-a]+","+i;e.push(i)}return e}(e,n);return 1===e?"getA(rc),\n            rc + 1 >= "+t[0]+" ? 0. : getA(rc + 1),\n            0, 0":"getA("+r[0]+"),\n          cEdge ? 0. : getA("+r[1]+"),\n          rEdge ? 0. : getA("+r[2]+"),\n          rEdge || cEdge ? 0. : getA("+r[3]+")"}(t,e);this.userCode="\n        void main() {\n          "+r+" rc = getOutputCoords();\n\n          if("+o+") {\n            setOutput(vec4(0));\n          } else {\n            "+i+"\n\n            setOutput(vec4("+a+"));\n          }\n        }\n      "}},Au=function(t,n,e){this.variableNames=["x"],this.outputShape=n.map((function(n,e){return n[0]+t[e]+n[1]}));var r=t.length,o=ia(r),i=n.map((function(t){return t[0]})).join(","),a=n.map((function(n,e){return n[0]+t[e]})).join(","),u=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?"\n      "+o+" start = "+o+"("+i+");\n      "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float("+e+"));\n        } else {\n          "+o+" coords = outC - start;\n          setOutput(getX("+u+"));\n        }\n      }\n    ":"\n        int start = "+i+";\n        int end = "+a+";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float("+e+"));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      "},Tu=function(t,n,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n.map((function(n,e){return n[0]+t[e]+n[1]}));for(var r=t.length,o=ia(r),i=n.map((function(t){return t[0]})).join(","),a=n.map((function(n,e){return n[0]+t[e]})).join(","),u=ji("rc",r),s=ji("source",r),c=u[r-1]+" < "+this.outputShape[r-1],l=1===r?"source":"vec2("+s.slice(-2).join()+")",f=[o+" rc = outputLoc;",u[r-1]+" += 1;\n       if("+c+") {\n      ",1===r?"":"}\n       rc = outputLoc;\n       "+u[r-2]+" += 1;\n       if("+u[r-2]+" < "+this.outputShape[r-2]+") {",1===r?"":"  "+u[r-1]+" += 1;\n         if("+c+") {"],h=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",d="",p=0,v=1===r?2:4;p<v;p++)d+="\n        "+f[p]+"\n        if ("+h+") {\n          result["+p+"] = float("+e+");\n        } else {\n          "+o+" source = rc - start;\n          result["+p+"] = getChannel(getX("+s.join()+"), "+l+");\n        }\n      ";d+=1===r?"} ":"}}",this.userCode="\n      const "+o+" start = "+o+"("+i+");\n      const "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        "+d+"\n        setOutput(result);\n      }\n    "},Du=function(t,n,e,r,o){if(void 0===r&&(r=!1),void 0===o&&(o=!1),this.variableNames=["x"],"avg"===n&&e)throw new Error("Cannot compute positions for average pool.");var i=t.filterWidth,a=t.strideHeight,u=t.strideWidth,s=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterHeight,f=t.effectiveFilterWidth,h=t.padInfo.top,d=t.padInfo.left;this.outputShape=t.outShape;var p="avg"===n,v="((batch  * "+t.inHeight+" + xR) * "+t.inWidth+" + xC) * "+t.inChannels+" + d",m="(xR * "+t.inWidth+" + xC) * "+t.inChannels+" + d",g="0.0";if(p||(g="-1.0 / 1e-20"),e)this.userCode="\n        const ivec2 strides = ivec2("+a+", "+u+");\n        const ivec2 pads = ivec2("+h+", "+d+");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < "+l+";\n              wR += "+s+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+f+";\n                wC += "+c+") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = "+(r?o?v:m:"wR * "+f+" + wC")+";\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var y=n+"("+n+"("+n+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===n&&(y="avgValue / count");var x=4*Math.floor(i/4),b=i%4,w="\n      if ("+p+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec2 strides = ivec2("+a+", "+u+");\n      const ivec2 pads = ivec2("+h+", "+d+");\n      const float initializationValue = "+g+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+g+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < "+l+";\n            wR += "+s+") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+x+"; wC += 4) {\n            int xC = xCCorner + wC * "+c+";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+c+", d),\n              getValue(batch, xR, xC + 2 * "+c+", d),\n              getValue(batch, xR, xC + 3 * "+c+", d)\n            );\n\n            "+w+"\n          }\n\n          int xC = xCCorner + "+x+";\n          if ("+(1===b)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            "+w+"\n          } else if ("+(2===b)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+c+", d),\n              initializationValue,\n              initializationValue\n            );\n\n            "+w+"\n          } else if ("+(3===b)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+c+", d),\n              getValue(batch, xR, xC + 2 * "+c+", d),\n              initializationValue\n            );\n\n            "+w+"\n          }\n        }\n        setOutput("+y+");\n      }\n    "}},Nu=function(t,n,e,r,o){if(void 0===r&&(r=!1),void 0===o&&(o=!1),this.variableNames=["x"],"avg"===n&&e)throw new Error("Cannot compute positions for average pool.");var i=t.filterWidth,a=t.strideDepth,u=t.strideHeight,s=t.strideWidth,c=t.dilationDepth,l=t.dilationHeight,f=t.dilationWidth,h=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth,v=t.padInfo.front,m=t.padInfo.top,g=t.padInfo.left;this.outputShape=t.outShape;var y="avg"===n,x="0.0";if(y||(x="-1.0 / 1e-20"),e)this.userCode="\n        const ivec3 strides =\n            ivec3("+a+", "+u+", "+s+");\n        const ivec3 pads = ivec3("+v+", "+m+", "+g+");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < "+h+";\n              wD += "+c+") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int wR = 0; wR < "+d+";\n                wR += "+l+") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int wC = 0; wC < "+p+";\n                  wC += "+f+") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = "+(r?o?"(((batch * "+t.inDepth+" + xD) * "+t.inHeight+" + xR) * "+t.inWidth+" + xC) * "+t.inChannels+" + ch":"((xD * "+t.inHeight+" + xR) * "+t.inWidth+" + xC) * "+t.inChannels+" + ch":"wD * "+d+" * "+p+" +\n                      wR * "+p+" + wC")+";\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var b=n+"("+n+"("+n+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===n&&(b="avgValue / count");var w=4*Math.floor(i/4),C=i%4,E="\n      if ("+y+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec3 strides =\n        ivec3("+a+", "+u+", "+s+");\n      const ivec3 pads = ivec3("+v+", "+m+", "+g+");\n      const float initializationValue = "+x+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+x+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < "+h+";\n            wD += "+c+") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+d+";\n            wR += "+l+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+w+"; wC += 4) {\n              int xC = xCCorner + wC * "+f+";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+f+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+f+", ch),\n                getValue(batch, xD, xR, xC + 3 * "+f+", ch)\n              );\n\n              "+E+"\n            }\n\n            int xC = xCCorner + "+w+";\n            if ("+(1===C)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              "+E+"\n            } else if ("+(2===C)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+f+", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              "+E+"\n            } else if ("+(3===C)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+f+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+f+", ch),\n                initializationValue\n              );\n\n              "+E+"\n            }\n          }\n          setOutput("+b+");\n        }\n      }\n    "}},Fu=function(t,n){this.variableNames=["x"];var e=t.windowSize,r=t.batchSize,o=t.inSize,i=Math.ceil(o/e);this.outputShape=[r,i];var a="0.0",u="";"prod"===n?a="1.0":"min"===n?(a="1.0 / 1e-20",u="min"):"max"===n&&(a="-1.0 / 1e-20",u="max");var s=n+"("+n+"("+n+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===n?s="sumValue":"prod"===n?s="prodValue":"all"===n?s="allValue":"any"===n&&(s="anyValue");var c=4*Math.floor(e/4),l=e%4,f="\n      if ("+("sum"===n)+") {\n        sumValue += dot(values, ones);\n      } else if ("+("prod"===n)+") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = "+u+"(values, minMaxValue);\n      }\n    ",h="vec4";"all"===n?(a="1.0",f="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===n&&(a="0.0",f="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");var d="";o%e>0&&(d="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      "),this.userCode="\n      const float initializationValue = "+a+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        "+d+"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+e+";\n\n        vec4 minMaxValue = vec4("+a+");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < "+c+"; i += 4) {\n          int inIdx = inOffset + i;\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          "+f+"\n        }\n\n        int inIdx = inOffset + "+c+";\n        if ("+(1===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          "+f+"\n        } else if ("+(2===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          "+f+"\n        } else if ("+(3===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          "+f+"\n        }\n        setOutput("+s+");\n      }\n    "},_u=function(t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var e="",r=0;r<4;r++){var o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),e+="\n        "+o+"\n        "+(r>0?"if(thisRC.y < rows && thisRC.z < cols){":"")+"\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result["+r+"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        "+(r>0?"}":"")+"\n      "}this.userCode="\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      "+Yi(["r","c","d"],n)+"\n      return ivec3(r, c, d);\n    }\n  \n      "+$i(t)+"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = "+t[1]+";\n        int cols = "+t[2]+";\n\n        "+e+"\n\n        setOutput(result);\n      }\n    "},Ou=function(t,n,e){this.variableNames=["dy"],this.outputShape=[],this.outputShape=n.shape;var r=n.shape,o=r[1],i=r[2],a=t.shape,u=a[1],s=a[2],c=[e&&u>1?o-1:o,e&&s>1?i-1:i],l=[e&&u>1?u-1:u,e&&s>1?s-1:s],f=c[0]/l[0],h=c[1]/l[1],d=1/f,p=1/h,v=2*Math.ceil(d)+2,m=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+f+");\n        const float widthScale = float("+h+");\n\n        const float invHeightScale = float("+d+");\n        const float invWidthScale = float("+p+");\n\n        const int winHeight = int("+v+");\n        const int winWidth = int("+m+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+u+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+s+") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), "+(o-1)+".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), "+(i-1)+".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},Mu=function(t,n,e,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],i=t[1],a=t[2],u=t[3];this.outputShape=[o,n,e,u];var s=[r&&n>1?i-1:i,r&&e>1?a-1:a],c=[r&&n>1?n-1:n,r&&e>1?e-1:e];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+s[0]/c[0]+",\n          "+s[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    "},Bu=function(t,n,e,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];var o=t[0],i=t[1],a=t[2],u=t[3];this.outputShape=[o,n,e,u];var s=[r&&n>1?i-1:i,r&&e>1?a-1:a],c=[r&&n>1?n-1:n,r&&e>1?e-1:e];this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          "+s[0]/c[0]+",\n          "+s[1]/c[1]+",\n          "+s[1]/c[1]+");\n      const vec3 inputShapeRC = vec3("+i+".0, "+a+".0,\n                                     "+a+".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < "+(u-1)+";\n        bool hasNextRow = coords.z < "+(e-1)+";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    "},Pu=function(t,n,e){this.variableNames=["dy"],this.outputShape=[],this.outputShape=n.shape;var r=n.shape,o=r[1],i=r[2],a=t.shape,u=a[1],s=a[2],c=[e&&u>1?o-1:o,e&&s>1?i-1:i],l=[e&&u>1?u-1:u,e&&s>1?s-1:s],f=c[0]/l[0],h=c[1]/l[1],d=1/f,p=1/h,v=2*Math.ceil(d)+2,m=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+f+");\n        const float widthScale = float("+h+");\n\n        const float invHeightScale = float("+d+");\n        const float invWidthScale = float("+p+");\n\n        const int winHeight = int("+v+");\n        const int winWidth = int("+m+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+u+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+s+") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float("+c[0]+") *\n                (float(dyR) / float("+l[0]+"));\n\n            float sourceFracCol =\n                float("+c[1]+") *\n                  (float(dyC) / float("+l[1]+"));\n\n            int sourceNearestRow = int(min(\n                float(int("+o+") - 1),\n                "+e+" ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int("+i+") - 1),\n                "+e+" ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},Lu=function(t,n,e,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],i=t[1],a=t[2],u=t[3];this.outputShape=[o,n,e,u];var s=[r&&n>1?i-1:i,r&&e>1?a-1:a],c=[r&&n>1?n-1:n,r&&e>1?e-1:e],l=r?"0.5":"0.0";this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+s[0]/c[0]+",\n          "+s[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + "+l+")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    "},Wu=function(t,n){this.variableNames=["x"];var e=t.length;if(e>4)throw new Error("WebGL backend: Reverse of rank-"+e+" tensor is not yet supported");if(this.outputShape=t,1!==e){var r=t.map((function(e,r){return function(e){return-1!==n.indexOf(e)&&1!==t[e]?t[e]+" - coords["+e+"] - 1":"coords["+e+"]"}(r)})).join(","),o=ia(e);this.userCode="\n      void main() {\n        "+o+" coords = getOutputCoords();\n        setOutput(getX("+r+"));\n      }\n    "}else this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX("+t[0]+" - coord - 1));\n        }\n      "},Uu=function(t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;var e=t.length;if(e>4)throw new Error("WebGL backend: Reverse of rank-"+e+" tensor is not yet supported");this.outputShape=t;var r=ji("rc",e),o=r[e-1]+" + 1 < "+this.outputShape[e-1],i=r[e-2]+" + 1 < "+this.outputShape[e-2],a=ia(e);function u(e){var r=t.map((function(r,o){return function(e,r){return-1!==n.indexOf(e)&&1!==t[e]?t[e]+" - "+r[e]+" - 1":""+r[e]}(o,e)}));return"getChannel(getX("+r.join(",")+"), vec2("+r.slice(-2).join(",")+"))"}this.userCode=1===e?"\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX("+t[0]+" - rc - 1),\n            "+t[0]+" - rc - 1);\n          if("+o+"){\n              result.g = getChannel(getX("+t[0]+" - (rc  + 1) - 1),\n                "+t[0]+" - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      ":"\n        void main() {\n          "+a+" rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = "+function(t){return u(t)}(r.slice())+";\n          if("+o+"){\n            result.g = "+function(t){return t[e-1]="("+t[e-1]+" + 1)",u(t)}(r.slice())+";\n          }\n          if("+i+") {\n            result.b = "+function(t){return t[e-2]="("+t[e-2]+" + 1)",u(t)}(r.slice())+";\n            if("+o+") {\n              result.a = "+function(t){return t[e-1]="("+t[e-1]+" + 1)",t[e-2]="("+t[e-2]+" + 1)",u(t)}(r.slice())+";\n            }\n          }\n          setOutput(result);\n        }\n    "},zu=function(t,n,e,r,o,i,a){void 0===a&&(a=!0),this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;var u=ia(o.length),s=ia(i.length),c="";1===e?c="i":2===e&&(c="i, j");var l="getIndices("+c+")",f="";1===r?f="i":2===r&&(f="i, coords[1]");var h="getUpdates("+f+")",d=n>1?"strides[j]":"strides";this.userCode="\n        "+u+" strides = "+u+"("+o+");\n\n        void main() {\n          "+s+" coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < "+t+"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < "+n+"; j++) {\n              int index = round("+l+");\n              flattenedIndex += index * "+d+";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += "+h+";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      "},Vu=function(t,n){this.variableNames=["x","segmentIds"];var e=t.windowSize,r=t.batchSize,o=t.inSize,i=t.numSegments,a=i*Math.ceil(o/e);this.outputShape=[r,a];var u=4*Math.floor(e/4),s=e%4,c="\n        sumValue += dot(values, segFilter);\n    ",l="";o%e>0&&(l="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      ");var f="";o%e>0&&(f="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return -1.0;\n        }\n      "),this.userCode="\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        "+l+"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        "+f+"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          "+i+")) * float("+e+"));\n        int currentSeg = int(mod(float(outIdx), float("+i+")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < "+u+"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          "+c+"\n        }\n\n        int inIdx = inOffset + "+u+";\n        if ("+(1===s)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          "+c+"\n        } else if ("+(2===s)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          "+c+"\n        } else if ("+(3===s)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          "+c+"\n        }\n        setOutput(sumValue);\n      }\n    "},Gu=function(t,n,e){var r,o;if(this.variableNames=["c","a","b"],this.outputShape=n,e>4)throw Error("Where for rank "+e+" is not yet supported");if(1===e)o="resRC",r="resRC";else{for(var i=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],u=[],s=0;s<n.length;s++)u.push(""+i[s]),s<t&&a.push(""+i[s]);r=a.join(),o=u.join()}var c=ia(e);this.userCode="\n      void main() {\n        "+c+" resRC = getOutputCoords();\n        float cVal = getC("+r+");\n        if (cVal >= 1.0) {\n          setOutput(getA("+o+"));\n        } else {\n          setOutput(getB("+o+"));\n        }\n      }\n    "},Hu=function(){function t(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;var n,e=ia(this.rank),r="uniform int start["+this.rank+"];",o=function(t){if(1===t)return"sourceLoc";if(t<=6)return qu.slice(0,t).map((function(t){return"sourceLoc."+t})).join(",");throw Error("Slicing for rank "+t+" is not yet supported")}(this.rank);n="\n        "+e+" sourceLoc;\n        "+e+" coords = getOutputCoords();\n        "+t.map((function(t,n){return"sourceLoc."+qu[n]+" = start["+n+"] + coords."+qu[n]+";"})).join("\n")+"\n      ",this.userCode="\n      "+r+"\n      void main() {\n        "+n+"\n        setOutput(getSource("+o+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var n=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(e,r){null==n.startLoc&&(n.startLoc=e.getUniformLocationNoThrow(r,"start"),null==n.startLoc)||e.gl.uniform1iv(n.startLoc,t)}},t}(),qu=["x","y","z","w","u","v"],Ku=function(){function t(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;var n=ia(this.rank),e=ji("coords",this.rank),r=ji("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":"vec2("+r.slice(-2).join()+")",i="getChannel(getSource("+r.join()+"), "+o+")",a="\n      result.x = "+i+";\n      if (++"+e[this.rank-1]+" < "+t[this.rank-1]+") {\n        ++"+r[this.rank-1]+";\n        result.y = "+i+";\n        --"+r[this.rank-1]+";\n      }\n    ",u=1===this.rank?"":"\n      --"+e[this.rank-1]+";\n      if (++"+e[this.rank-2]+" < "+t[this.rank-2]+") {\n        ++"+r[this.rank-2]+";\n        result.z = "+i+";\n        if (++"+e[this.rank-1]+" < "+t[this.rank-1]+") {\n          ++"+r[this.rank-1]+";\n          result.w = "+i+";\n        }\n      }\n    ",s=this.rank<=4?"sourceLoc = coords +\n            "+n+"("+t.map((function(t,n){return"start["+n+"]"})).join()+");":t.map((function(t,n){return r[n]+" = "+e[n]+" + start["+n+"];"})).join("\n");this.userCode="\n      uniform int start["+this.rank+"];\n      void main() {\n        "+n+" coords = getOutputCoords();\n        "+n+" sourceLoc;\n        "+s+"\n        vec4 result = vec4(0.);\n        "+a+"\n        "+u+"\n        setOutput(result);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var n=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(e,r){null==n.startLoc&&(n.startLoc=e.getUniformLocationNoThrow(r,"start"),null==n.startLoc)||e.gl.uniform1iv(n.startLoc,t)}},t}(),ju=function(t,n,e){this.variableNames=["x"],this.outputShape=e;var r=e.length,o=ia(e.length),i=ia(e.length),a="";if(1===r)a="coords * strides + begin";else{var u=0;a=e.map((function(t,n){return u++,1===e.length?"coords * strides["+n+"] + begin["+n+"]":"coords["+(u-1)+"] * strides["+n+"] + begin["+n+"]"})).join(",")}this.userCode="\n      "+o+" begin = "+o+"("+t+");\n      "+o+" strides = "+o+"("+n+");\n\n      void main() {\n        "+i+" coords = getOutputCoords();\n        setOutput(getX("+a+"));\n      }\n    "},Xu=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return t.prototype.acquireTexture=function(t,n,e){var r,o=Yu(n,e),i=$u(t,o,e);if(i in this.freeTextures||(this.freeTextures[i]=[]),i in this.usedTextures||(this.usedTextures[i]=[]),this.freeTextures[i].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var a=this.freeTextures[i].shift();return this.usedTextures[i].push(a),a}return this.numUsedTextures++,this.log(),o===qt.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):o===qt.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):o===qt.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):o===qt.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):o===qt.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[i].push(r),r},t.prototype.releaseTexture=function(t,n,e,r){if(null!=this.freeTextures){var o=$u(n,Yu(e,r),r);o in this.freeTextures||(this.freeTextures[o]=[]),this.freeTextures[o].push(t),this.numFreeTextures++,this.numUsedTextures--;var i=this.usedTextures[o],a=i.indexOf(t);if(a<0)throw new Error("Cannot release a texture that was never provided by this texture manager");i.splice(a,1),this.log()}},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",this.numFreeTextures+" / "+this.numUsedTextures,"("+t+")")}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;if(null!=this.freeTextures){for(var n in this.freeTextures)this.freeTextures[n].forEach((function(n){t.gpgpu.deleteMatrixTexture(n)}));for(var n in this.usedTextures)this.usedTextures[n].forEach((function(n){t.gpgpu.deleteMatrixTexture(n)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}},t}();function Yu(t,n){if(t===Ht.UPLOAD)return qt.PACKED_2X2_FLOAT32;if(t===Ht.RENDER||null==t)return function(t){return h().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?qt.PACKED_2X2_FLOAT32:qt.UNPACKED_FLOAT32:t?qt.PACKED_2X2_FLOAT16:qt.UNPACKED_FLOAT16}(n);if(t===Ht.DOWNLOAD||t===Ht.PIXELS)return qt.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function $u(t,n,e){return t[0]+"_"+t[1]+"_"+n+"_"+e}var Qu=function(t,n){this.variableNames=["A"];for(var e=new Array(t.length),r=0;r<e.length;r++)e[r]=t[r]*n[r];this.outputShape=e,this.rank=e.length;var o=ia(this.rank),i=function(t){var n=t.length;if(n>5)throw Error("Tile for rank "+n+" is not yet supported");if(1===n)return"imod(resRC, "+t[0]+")";for(var e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[],o=0;o<t.length;o++)r.push("imod("+e[o]+", "+t[o]+")");return r.join()}(t);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},Ju=1.7580993408473768,Zu=1.0507009873554805,ts=function(t,n){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      float unaryOperation(float x) {\n        "+n+"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},ns="if (isnan(x)) return x;",es="return abs(x);",rs=ns+"\n  return (x < 0.0) ? 0.0 : x;\n",os=ns+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",is="return (x >= 0.0) ? x : (exp(x) - 1.0);",as="return -x;",us="return ceil(x);",ss="return floor(x);",cs="return exp(x);",ls="return exp(x) - 1.0;",fs="return x;",hs="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",ds="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",ps="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",vs=function(t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      vec4 unaryOperation(vec4 x) {\n        "+n+"\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},ms=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;var n=t.length,e=ji("rc",n),r=ia(n),o=function(t,n){if(1===t)return"rc";for(var e="",r=0;r<t;r++)e+=n[r],r<t-1&&(e+=",");return e}(n,e),i=e.slice(-2),a=n<=1?"rc":"vec2("+i.join(",")+")";this.userCode="\n      void main() {\n        "+r+" rc = getOutputCoords();\n        vec4 packedInput = getA("+o+");\n\n        setOutput(getChannel(packedInput, "+a+"));\n      }\n    "},gs={};function ys(t,n){if(void 0===n&&(n=!1),"linear"===t)return"return x;";if("relu"===t)return n?hs:rs;if("elu"===t)return n?ps:is;if("relu6"===t)return n?ds:os;if("prelu"===t)return n?xa:ga;throw new Error("Activation "+t+" has not been implemented for the WebGL backend.")}var xs=function(t){function n(n){var e,r=t.call(this)||this;if(r.pendingRead=new WeakMap,r.pendingDisposal=new WeakSet,r.dataRefCount=new WeakMap,r.numBytesInGPU=0,r.uploadWaitMs=0,r.downloadWaitMs=0,r.warnedAboutMemory=!1,r.pendingDeletes=0,r.disposed=!1,!h().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==n){var o=Yt(h().getNumber("WEBGL_VERSION"));r.binaryCache=((e=h().getNumber("WEBGL_VERSION"))in gs||(gs[e]={}),gs[e]),r.gpgpu=new mu(o),r.canvas=o.canvas,r.gpgpuCreatedLocally=!0}else r.gpgpu=n,r.binaryCache={},r.gpgpuCreatedLocally=!1,r.canvas=n.gl.canvas;return r.textureManager=new Xu(r.gpgpu),r.numMBBeforeWarning=null==h().global.screen?1024:h().global.screen.height*h().global.screen.width*window.devicePixelRatio*600/1024/1024,r.texData=new si(r,Ut),r}return u(n,t),n.prototype.numDataIds=function(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes},n.prototype.write=function(t,n,e){if(h().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===e&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");var r={};return this.texData.set(r,{shape:n,dtype:e,values:t,usage:Ht.UPLOAD}),r},n.prototype.move=function(t,n,e,r){if(h().getBool("DEBUG")&&this.checkNumericalProblems(n),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:e,dtype:r,values:n,usage:Ht.UPLOAD})},n.prototype.readSync=function(t){var n=this.texData.get(t),e=n.values,r=n.dtype,o=n.complexTensors,i=n.slice,a=n.shape,u=n.isPacked;if(null!=i){var s;s=u?new vs(a,fs):new ts(a,fs);var c=this.runWebGLProgram(s,[{dataId:t,shape:a,dtype:r}],r),l=this.readSync(c.dataId);return this.disposeData(c.dataId),l}if(null!=e)return this.convertAndCacheOnCPU(t);if("string"===r)return e;var f,h,d=null!=this.activeTimers;return d&&(f=ut()),h="complex64"===r?Si(o.real.dataSync(),o.imag.dataSync()):this.getValuesFromTexture(t),d&&(this.downloadWaitMs+=ut()-f),this.convertAndCacheOnCPU(t,h)},n.prototype.read=function(t){return s(this,void 0,void 0,(function(){var n,e,r,o,i,a,u,s,l,f,d,p,v,m,g,y,x,b,w,C,E,R;return c(this,(function(c){switch(c.label){case 0:if(this.pendingRead.has(t))return n=this.pendingRead.get(t),[2,new Promise((function(t){return n.push(t)}))];if(e=this.texData.get(t),r=e.values,o=e.shape,i=e.slice,a=e.dtype,u=e.complexTensors,s=e.isPacked,null!=i)return void 0,l=s?new vs(o,fs):new ts(o,fs),f=this.runWebGLProgram(l,[{dataId:t,shape:o,dtype:a}],a),d=this.read(f.dataId),this.disposeData(f.dataId),[2,d];if(null!=r)return[2,this.convertAndCacheOnCPU(t)];if(!h().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===h().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");return p=null,"complex64"!==a&&h().get("WEBGL_BUFFER_SUPPORTED")&&(v=this.decode(t),m=this.texData.get(v.dataId),p=(R=this.gpgpu).createBufferFromTexture.apply(R,[m.texture].concat(Qt(o)))),this.pendingRead.set(t,[]),"complex64"===a?[3,2]:[4,this.gpgpu.createAndWaitForFence()];case 1:c.sent(),c.label=2;case 2:return"complex64"!==a?[3,4]:[4,Promise.all([u.real.data(),u.imag.data()])];case 3:return y=c.sent(),x=y[0],b=y[1],g=Si(x,b),[3,5];case 4:null==p?g=this.getValuesFromTexture(t):(w=F(o),g=this.gpgpu.downloadFloat32MatrixFromBuffer(p,w)),c.label=5;case 5:return null!=v&&this.disposeData(v.dataId),C=this.convertAndCacheOnCPU(t,g),E=this.pendingRead.get(t),this.pendingRead.delete(t),E.forEach((function(t){return t(C)})),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),[2,C]}}))}))},n.prototype.checkNumericalProblems=function(t){if(null!=t)for(var n=0;n<t.length;n++){var e=t[n];if(!nn(e)){if(h().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error("The value "+e+" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");throw Error("The value "+e+" cannot be represented on this device.")}}},n.prototype.getValuesFromTexture=function(t){var n,e=this.texData.get(t),r=e.shape,o=e.dtype,i=e.isPacked,a=F(r);if(h().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){var u=this.decode(t),s=this.texData.get(u.dataId),c=(n=this.gpgpu).downloadMatrixFromPackedTexture.apply(n,[s.texture].concat(Qt(r))).subarray(0,a);return this.disposeData(u.dataId),c}var l=h().getBool("WEBGL_PACK")&&!0===i,f=l?Nn(r):r,d=l?new qa(f):new Ha(f),p=this.runWebGLProgram(d,[{shape:f,dtype:o,dataId:t}],"float32"),v=this.texData.get(p.dataId),m=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(v.texture,v.texShape[0],v.texShape[1]).subarray(0,a);return this.disposeData(p.dataId),m},n.prototype.time=function(t){return s(this,void 0,void 0,(function(){var n,e,r,o,i,a,u;return c(this,(function(s){switch(s.label){case 0:return n=this.activeTimers,e=[],r=!1,null==this.programTimersStack?(this.programTimersStack=e,r=!0):this.activeTimers.push(e),this.activeTimers=e,t(),o=N(this.activeTimers.map((function(t){return t.query}))).filter((function(t){return null!=t})),i=N(this.activeTimers.map((function(t){return t.name}))).filter((function(t){return null!=t})),this.activeTimers=n,r&&(this.programTimersStack=null),a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?[4,Promise.all(o)]:[3,2];case 1:return u=s.sent(),a.kernelMs=S(u),a.getExtraProfileInfo=function(){return u.map((function(t,n){return{name:i[n],ms:t}})).map((function(t){return t.name+": "+t.ms})).join(", ")},[3,3];case 2:a.kernelMs={error:"WebGL query timers are not supported in this environment."},s.label=3;case 3:return this.uploadWaitMs=0,this.downloadWaitMs=0,[2,a]}}))}))},n.prototype.memory=function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}},n.prototype.startTimer=function(){return h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:ut(),endMs:null}},n.prototype.endTimer=function(t){return h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=ut(),t)},n.prototype.getQueryTime=function(t){return s(this,void 0,void 0,(function(){var n;return c(this,(function(e){return h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?[2,this.gpgpu.waitForQueryAndGetTime(t)]:[2,(n=t).endMs-n.startMs]}))}))},n.prototype.disposeData=function(t){if(!this.pendingDisposal.has(t)){if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(this.texData.has(t)){this.releaseGPUData(t);var n=this.texData.get(t).complexTensors;null!=n&&(n.real.dispose(),n.imag.dispose()),this.texData.delete(t)}}},n.prototype.releaseGPUData=function(t){var n=this.texData.get(t),e=n.texture,r=n.dtype,o=n.texShape,i=n.usage,a=n.isPacked,u=n.slice,s=u&&u.origDataId||t,c=this.dataRefCount.get(s);c>1?this.dataRefCount.set(s,c-1):(this.dataRefCount.delete(s),null!=e&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(e,o,i,a)));var l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null},n.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},n.prototype.getDataInfo=function(t){return this.texData.get(t)},n.prototype.getCPUBackend=function(){return h().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Ut.findBackend("cpu")),this.cpuBackend):null},n.prototype.shouldExecuteOnCPU=function(t,n){var e=this;return void 0===n&&(n=128),null!=this.getCPUBackend()&&t.every((function(t){return null==e.texData.get(t.dataId).texture&&F(t.shape)<n}))},n.prototype.getGPGPUContext=function(){return this.gpgpu},n.prototype.complex=function(t,n){var e=this.makeOutput(t.shape,"complex64");return this.texData.get(e.dataId).complexTensors={real:Ut.keep(t.clone()),imag:Ut.keep(n.clone())},e},n.prototype.real=function(t){return this.texData.get(t.dataId).complexTensors.real.clone()},n.prototype.imag=function(t){return this.texData.get(t.dataId).complexTensors.imag.clone()},n.prototype.slice=function(t,n,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,n,e);if(0===F(e))return Fe([],e,t.dtype);var r=this.texData.get(t.dataId).isPacked,o=Yo(t.shape,n,e);if(r||!o){var i=h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ku(e):new Hu(e),a=i.getCustomSetupFunc(n);return this.compileAndRun(i,[t],null,a)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,n,e)},n.prototype.shallowSlice=function(t,n,e){var r=this.texData.get(t.dataId),o=this.makeOutput(e,t.dtype),i=this.texData.get(o.dataId);Object.assign(i,r),i.shape=e,i.dtype=t.dtype;var a=$o(n,t.strides);r.slice&&(a+=r.slice.flatOffset),i.slice={flatOffset:a,origDataId:r.slice&&r.slice.origDataId||t.dataId};var u=this.dataRefCount.get(i.slice.origDataId)||1;return this.dataRefCount.set(i.slice.origDataId,u+1),o},n.prototype.stridedSlice=function(t,n,e,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,n,e,r);var o=Ko(n,e,r);if(o.some((function(t){return 0===t})))return Fe([],o);var i=new ju(n,r,o);return this.compileAndRun(i,[t])},n.prototype.reverse=function(t,n){var e=h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Uu(t.shape,n):new Wu(t.shape,n);return this.compileAndRun(e,[t])},n.prototype.concat=function(t,n){if("complex64"===t[0].dtype){var e=t.map((function(t){return De(t)})),r=t.map((function(t){return Ne(t)}));return Te(this.concat(e,n),this.concat(r,n))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,n);if(1===t.length)return t[0];if(t.length>h().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){var o=Math.floor(t.length/2),i=this.concat(t.slice(0,o),n),a=this.concat(t.slice(o),n);return this.concat([i,a],n)}if(h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){var u=new Ia(t.map((function(t){return t.shape})),n);return this.compileAndRun(u,t)}var s=Se(t.map((function(t){return t.shape})),n),c=t.map((function(t){return t.as2D(-1,F(t.shape.slice(n)))})),l=new Ra(c.map((function(t){return t.shape})));return this.compileAndRun(l,c).reshape(s)},n.prototype.neg=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,as,t.dtype);var n=new ts(t.shape,as);return this.compileAndRun(n,[t])},n.prototype.batchMatMul=function(t,n,e,r){var o=e?t.shape[2]:t.shape[1],i=r?n.shape[1]:n.shape[2],a=e?t.shape[1]:t.shape[2],u=t.shape[0];if((1===o||1===i)&&a>1e3){e&&(t=ui(t,[0,2,1])),r&&(n=ui(n,[0,2,1]));var s=1===i?t:t.as3D(u,a,1),c=1===i?2:1,l=1===i?n.as3D(u,1,a):n;return this.multiply(s,l).sum(c,!0)}var f=Nt(t.dtype,n.dtype),h=new Ru(t.shape,[u,o,i],e,r);return this.compileAndRun(h,[t,n],f)},n.prototype.fusedBatchMatMul=function(t){var n=t.a,e=t.b,r=t.transposeA,o=t.transposeB,i=t.bias,a=t.activation,u=t.preluActivationWeights,s=r?n.shape[2]:n.shape[1],c=o?e.shape[1]:e.shape[2],l=n.shape[0],f=Nt(n.dtype,e.dtype),h=null!=i,d=null!=u,p=a?ys(a,!0):null,v=new Ru(n.shape,[l,s,c],r,o,h,p,d),m=[n,e];return i&&m.push(i),u&&m.push(u),this.compileAndRun(v,m,f)},n.prototype.multiply=function(t,n){if("complex64"===t.dtype){var e=this.texData.get(t.dataId),r=this.texData.get(n.dataId),o=new da("return areal * breal - aimag * bimag;",t.shape,n.shape),i=new da("return areal * bimag + aimag * breal;",t.shape,n.shape),a=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag),this.makeComplexComponentTensorInfo(n,r.complexTensors.real),this.makeComplexComponentTensorInfo(n,r.complexTensors.imag)],u=this.compileAndRun(o,a),s=this.compileAndRun(i,a),c=this.complex(u,s);return u.dispose(),s.dispose(),c}if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.multiply(t,n);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,ma,t.dtype);var l=new ya(ma,t.shape,n.shape);return this.compileAndRun(l,[t,n],t.dtype)},n.prototype.batchNormalization=function(t,n,e,r,o,i){var a=[t,n,e],u=null;null!=i&&(u=i.shape,a.push(i));var s=null;if(null!=o&&(s=o.shape,a.push(o)),h().getBool("WEBGL_PACK_NORMALIZATION")){var c=new ha(t.shape,n.shape,e.shape,u,s,r);return this.compileAndRun(c,a)}var l=new fa(t.shape,n.shape,e.shape,u,s,r);return this.compileAndRun(l,a)},n.prototype.localResponseNormalization4D=function(t,n,e,r,o){var i=h().getBool("WEBGL_PACK_NORMALIZATION")?new wu(t.shape,n,e,r,o):new xu(t.shape,n,e,r,o);return this.compileAndRun(i,[t])},n.prototype.LRNGrad=function(t,n,e,r,o,i,a){var u=new bu(n.shape,r,o,i,a);return this.compileAndRun(u,[n,e,t])},n.prototype.tile=function(t,n){if("string"===t.dtype){var e=this.readSync(t.dataId).map((function(t){return lt(t)}));return Ui(nr(t.shape,t.dtype,e),n)}var r=new Qu(t.shape,n);return this.compileAndRun(r,[t])},n.prototype.pad=function(t,n,e){var r=h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Tu(t.shape,n,e):new Au(t.shape,n,e);return this.compileAndRun(r,[t])},n.prototype.gather=function(t,n,e){if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.gather(t,n,e);var r=new $a(t.shape,n.size,e);return this.compileAndRun(r,[t,n])},n.prototype.batchToSpaceND=function(t,n,e){A(t.rank<=4,(function(){return"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"}));var r=n.reduce((function(t,n){return t*n})),o=pr(t.shape,n,r),i=vr(o.length,n.length),a=mr(t.shape,n,r),u=gr(e,n.length),s=yr(a,e,n.length);return ui(t.reshape(o),i).reshape(a).slice(u,s)},n.prototype.spaceToBatchND=function(t,n,e){A(t.rank<=4,(function(){return"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"}));var r=n.reduce((function(t,n){return t*n})),o=[[0,0]];o.push.apply(o,e);for(var i=1+n.length;i<t.shape.length;++i)o.push([0,0]);var a=t.pad(o),u=pr(a.shape,n,r,!1),s=vr(u.length,n.length,!1),c=mr(a.shape,n,r,!1);return ui(a.reshape(u),s).reshape(c)},n.prototype.reduce=function(t,n,e){var r=t.shape[0],o=t.shape[1],i=Wo(o),a=new Fu({windowSize:i,inSize:o,batchSize:r},n),u=this.compileAndRun(a,[t],e);return 1===u.shape[1]?u:this.reduce(u,n,e)},n.prototype.argReduce=function(t,n,e){void 0===e&&(e=null);var r=t.shape[0],o=t.shape[1];null!=e&&(r=e.shape[0],o=e.shape[1]);var i=Wo(o),a=new qi({windowSize:i,inSize:o,batchSize:r},n,null==e),u=[t];null!=e&&u.push(e);var s=this.compileAndRun(a,u,"int32");return 1===s.shape[1]?s:this.argReduce(t,n,s)},n.prototype.argReducePacked=function(t,n,e){void 0===e&&(e=null);var r=null!=e?e.shape:t.shape,o=Wo(r[r.length-1]),i=new sa(r,o,n,null==e),a=null==e?[t]:[t,e],u=this.compileAndRun(i,a,"int32");return u.rank===t.rank?this.argReducePacked(t,n,u):u},n.prototype.sum=function(t,n){Ce("sum",n,t.rank);var e=be(t.shape,n),r=e[0],o=F(e[1]),i=t.as2D(-1,o),a=Ft(t.dtype);return this.reduce(i,"sum",a).reshape(r)},n.prototype.prod=function(t,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,n);var e=be(t.shape,n),r=e[0],o=F(e[1]),i=t.as2D(-1,o),a=Ft(t.dtype);return this.reduce(i,"prod",a).reshape(r)},n.prototype.unsortedSegmentSum=function(t,n,e){var r=0,o=Ee([r],t.rank),i=t;null!=o&&(i=ui(t,o),r=Ie(1,t.rank)[0]);var a=function(t,n,e){for(var r=[],o=t.length,i=0;i<o;i++)i!==n?r.push(t[i]):r.push(e);return r}(i.shape,r,e),u=F([i.shape[r]]),s=i.as2D(-1,u),c=Ft(t.dtype),l=this.segOpCompute(s,"unsortedSegmentSum",n,c,e).reshape(a);return null!=o&&(l=ui(l,Re(o))),l},n.prototype.segOpCompute=function(t,n,e,r,o){var i=t.shape[0],a=t.shape[1],u=function(t,n){var e,r=!1;for(t<=30?(e=t,r=!0):e=nt(t,Math.floor(Math.sqrt(t)));!r;)e>n||e===t?r=!0:e=nt(t,e+1);return e}(a,o),s=new Vu({windowSize:u,inSize:a,batchSize:i,numSegments:o},n),c=this.compileAndRun(s,[t,e],r);return c.shape[1]===o?c:(e=Ke(0,o).tile([a/u]),this.segOpCompute(c,n,e,r,o))},n.prototype.argMinMaxReduce=function(t,n,e){var r=[n];if(Ce("arg"+e.charAt(0).toUpperCase()+e.slice(1),r,t.rank),!h().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){var o=be(t.shape,r),i=o[0],a=F(o[1]),u=t.as2D(-1,a);return this.argReduce(u,e).reshape(i)}return this.argReducePacked(t,e)},n.prototype.argMin=function(t,n){return this.argMinMaxReduce(t,n,"min")},n.prototype.argMax=function(t,n){return this.argMinMaxReduce(t,n,"max")},n.prototype.cumsum=function(t,n,e,r){if(n!==t.rank-1)throw new Error("WebGL cumsum shader expects an inner-most axis="+(t.rank-1)+" but got axis="+n);var o=new La(t.shape,e,r);return this.compileAndRun(o,[t])},n.prototype.equal=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(equal(a, b));\n","bool");var e=new ya("return float(a == b);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.notEqual=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(notEqual(a, b));\n","bool");var e=new ya("return float(a != b);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.less=function(t,n){if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.less(t,n);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(lessThan(a, b));\n","bool");var e=new ya("return float(a < b);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.lessEqual=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(lessThanEqual(a, b));\n","bool");var e=new ya("return float(a <= b);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.greater=function(t,n){if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.greater(t,n);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(greaterThan(a, b));\n","bool");var e=new ya("return float(a > b);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.greaterEqual=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(greaterThanEqual(a, b));\n","bool");var e=new ya("return float(a >= b);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.logicalNot=function(t){var n=new ts(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(n,[t])},n.prototype.logicalAnd=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");var e=new ya("return float(a >= 1.0 && b >= 1.0);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.logicalOr=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");var e=new ya("return float(a >= 1.0 || b >= 1.0);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.select=function(t,n,e){var r=new Gu(t.rank,n.shape,n.rank);return this.compileAndRun(r,[t,n,e],Nt(n.dtype,e.dtype))},n.prototype.where=function(t){de("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");var n=t.dataSync();return Vi(t.shape,n)},n.prototype.topk=function(t,n,e){return zi(t.dataSync(),t.shape,t.dtype,n)},n.prototype.min=function(t,n){Ce("min",n,t.rank);var e=be(t.shape,n),r=e[0],o=F(e[1]),i=t.as2D(-1,o);return this.reduce(i,"min",i.dtype).reshape(r)},n.prototype.minimum=function(t,n){if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.minimum(t,n);var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ba("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,n.shape):new ya("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,n.shape);return this.compileAndRun(e,[t,n])},n.prototype.mod=function(t,n){var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ba("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,n.shape):new ya("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,n.shape);return this.compileAndRun(e,[t,n])},n.prototype.max=function(t,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.max(t,n);Ce("max",n,t.rank);var e=be(t.shape,n),r=e[0],o=F(e[1]),i=t.as2D(-1,o);return this.reduce(i,"max",i.dtype).reshape(r)},n.prototype.maximum=function(t,n){if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.maximum(t,n);var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ba("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,n.shape):new ya("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,n.shape);return this.compileAndRun(e,[t,n])},n.prototype.all=function(t,n){Ce("all",n,t.rank);var e=be(t.shape,n),r=e[0],o=F(e[1]),i=t.as2D(-1,o);return this.reduce(i,"all",i.dtype).reshape(r)},n.prototype.any=function(t,n){Ce("any",n,t.rank);var e=be(t.shape,n),r=e[0],o=F(e[1]),i=t.as2D(-1,o);return this.reduce(i,"any",i.dtype).reshape(r)},n.prototype.floorDiv=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");var e=new ya("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,n.shape);return this.compileAndRun(e,[t,n],"int32")},n.prototype.add=function(t,n){if("complex64"===t.dtype&&"complex64"===n.dtype)return this.complexSeparableBinaryOp(t,n,pa);if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.add(t,n);var e=Nt(t.dtype,n.dtype);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,pa,e);var r=new ya(pa,t.shape,n.shape);return this.compileAndRun(r,[t,n],e)},n.prototype.packedUnaryOp=function(t,n,e){var r=new vs(t.shape,n);return this.compileAndRun(r,[t],e)},n.prototype.packedBinaryOp=function(t,n,e,r,o){void 0===o&&(o=!1);var i=new ba(e,t.shape,n.shape,o);return this.compileAndRun(i,[t,n],r)},n.prototype.complexSeparableBinaryOp=function(t,n,e){var r=this,o=this.texData.get(t.dataId),i=this.texData.get(n.dataId),a=[[o.complexTensors.real,i.complexTensors.real],[o.complexTensors.imag,i.complexTensors.imag]].map((function(o){var i=o[0],a=o[1],u=r.makeComplexComponentTensorInfo(t,i),s=r.makeComplexComponentTensorInfo(n,a),c=new ya(e,t.shape,n.shape);return r.compileAndRun(c,[u,s],Nt(i.dtype,a.dtype))})),u=a[0],s=a[1],c=this.complex(u,s);return u.dispose(),s.dispose(),c},n.prototype.makeComplexComponentTensorInfo=function(t,n){return{dataId:n.dataId,dtype:n.dtype,shape:t.shape}},n.prototype.addN=function(t){if(1===t.length)return t[0];if(t.length>h().get("WEBGL_MAX_TEXTURES_IN_SHADER")){var n=Math.floor(t.length/2),e=this.addN(t.slice(0,n)),r=this.addN(t.slice(n));return this.addN([e,r])}var o=t.map((function(t){return t.dtype})).reduce((function(t,n){return Nt(t,n)})),i=t.map((function(t){return t.shape})),a=h().getBool("WEBGL_PACK")?new Hi(t[0].shape,i):new Gi(t[0].shape,i);return this.compileAndRun(a,t,o)},n.prototype.subtract=function(t,n){if("complex64"===t.dtype&&"complex64"===n.dtype)return this.complexSeparableBinaryOp(t,n,va);if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.subtract(t,n);var e=Nt(t.dtype,n.dtype);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,va,t.dtype);var r=new ya(va,t.shape,n.shape);return this.compileAndRun(r,[t,n],e)},n.prototype.pow=function(t,n){var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ba("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,n.shape):new ya("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,n.shape),r=Nt(t.dtype,n.dtype);return this.compileAndRun(e,[t,n],r)},n.prototype.ceil=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,us,t.dtype);var n=new ts(t.shape,us);return this.compileAndRun(n,[t])},n.prototype.floor=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ss,t.dtype);var n=new ts(t.shape,ss);return this.compileAndRun(n,[t])},n.prototype.sign=function(t){var n=new ts(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(n,[t])},n.prototype.isNaN=function(t){var n=new ts(t.shape,"return float(isnan(x));");return this.compileAndRun(n,[t],"bool")},n.prototype.isInf=function(t){var n=new ts(t.shape,"return float(isinf(x));");return this.compileAndRun(n,[t],"bool")},n.prototype.isFinite=function(t){var n=new ts(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(n,[t],"bool")},n.prototype.round=function(t){var n=new ts(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(n,[t])},n.prototype.exp=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,cs,t.dtype);var n=new ts(t.shape,cs);return this.compileAndRun(n,[t])},n.prototype.expm1=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ls,t.dtype);var n=new ts(t.shape,ls);return this.compileAndRun(n,[t])},n.prototype.softmax=function(t,n){var e=U([n],t.shape),r=this.max(t,e),o=we(r.shape,e),i=this.subtract(t,r.reshape(o)),a=this.exp(i),u=this.sum(a,e).reshape(o);return Bo(a,u)},n.prototype.log=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);var n=new ts(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(n,[t])},n.prototype.log1p=function(t){var n=new ts(t.shape,"return log(1.0 + x);");return this.compileAndRun(n,[t])},n.prototype.sqrt=function(t){var n=new ts(t.shape,"return sqrt(x);");return this.compileAndRun(n,[t])},n.prototype.rsqrt=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);var n=new ts(t.shape,"return inversesqrt(x);");return this.compileAndRun(n,[t])},n.prototype.reciprocal=function(t){var n=new ts(t.shape,"return 1.0 / x;");return this.compileAndRun(n,[t])},n.prototype.relu=function(t){var n;return n=h().getBool("WEBGL_PACK")?new vs(t.shape,hs):new ts(t.shape,rs),this.compileAndRun(n,[t])},n.prototype.relu6=function(t){var n;return n=h().getBool("WEBGL_PACK")?new vs(t.shape,ds):new ts(t.shape,os),this.compileAndRun(n,[t])},n.prototype.prelu=function(t,n){var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ba(xa,t.shape,n.shape):new ya(ga,t.shape,n.shape);return this.compileAndRun(e,[t,n])},n.prototype.elu=function(t){if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ps,t.dtype);var n=new ts(t.shape,is);return this.compileAndRun(n,[t])},n.prototype.eluDer=function(t,n){var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ba("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,n.shape):new ya("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,n.shape);return this.compileAndRun(e,[t,n])},n.prototype.selu=function(t){var n=new ts(t.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(n,[t])},n.prototype.int=function(t){var n=new ts(t.shape,"return float(int(x));");return this.compileAndRun(n,[t],"int32")},n.prototype.clip=function(t,n,e){var r,o=(r=h().getBool("WEBGL_PACK_CLIP")?new Ca(t.shape):new wa(t.shape)).getCustomSetupFunc(n,e);return this.compileAndRun(r,[t],null,o)},n.prototype.abs=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,es,t.dtype);var n=new ts(t.shape,es);return this.compileAndRun(n,[t])},n.prototype.complexAbs=function(t){var n=this.texData.get(t.dataId),e=new Ea(t.shape),r=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)];return this.compileAndRun(e,r)},n.prototype.sigmoid=function(t){var n=new ts(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(n,[t])},n.prototype.softplus=function(t){var n=new ts(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(n,[t])},n.prototype.sin=function(t){var n=new ts(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(n,[t])},n.prototype.cos=function(t){var n=new ts(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(n,[t])},n.prototype.tan=function(t){var n=new ts(t.shape,"return tan(x);");return this.compileAndRun(n,[t])},n.prototype.asin=function(t){var n=new ts(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(n,[t])},n.prototype.acos=function(t){var n=new ts(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(n,[t])},n.prototype.atan=function(t){var n=new ts(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(n,[t])},n.prototype.atan2=function(t,n){var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ba("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,n.shape):new ya("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,n.shape);return this.compileAndRun(e,[t,n])},n.prototype.sinh=function(t){var n=new ts(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(n,[t])},n.prototype.cosh=function(t){var n=new ts(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(n,[t])},n.prototype.tanh=function(t){var n=new ts(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(n,[t])},n.prototype.asinh=function(t){var n=new ts(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(n,[t])},n.prototype.acosh=function(t){var n=new ts(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(n,[t])},n.prototype.atanh=function(t){var n=new ts(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(n,[t])},n.prototype.erf=function(t){var n=new ts(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(n,[t])},n.prototype.step=function(t,n){var e=new ts(t.shape,function(t){return void 0===t&&(t=0),ns+"\n    return x > 0.0 ? 1.0 : float("+t+");\n  "}(n));return this.compileAndRun(e,[t])},n.prototype.conv2dByMatMul=function(t,n,e,r,o,i){var a=t.shape,u=this.texData.get(t.dataId),s=e.inChannels,c=a[0]*a[1]*a[2],l=e.outChannels,f="channelsLast"===e.dataFormat,d=(1===c||1===l)&&s>1e3,p=a[2]%2!=0&&!!u.isPacked;if(d||!h().getBool("WEBGL_LAZILY_UNPACK")||!h().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!p){var v=f?a[0]*a[1]*a[2]:a[0]*a[2]*a[3],m=this.reshape(t,[1,v,e.inChannels]),g=this.reshape(n,[1,e.inChannels,e.outChannels]);return this.reshape(this.fusedBatchMatMul({a:m,b:g,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),e.outShape)}var y=f?a[0]*a[1]*(a[2]+1):a[0]*a[2]*(a[3]+1),x={dataId:t.dataId,shape:[1,y,e.inChannels],dtype:t.dtype},b=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,A(On(u.shape,x.shape),(function(){return"packed reshape "+u.shape+" to "+x.shape+" isn't free"}));var w=this.reshape(n,[1,e.inChannels,e.outChannels]),C=this.fusedBatchMatMul({a:x,b:w,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),E=this.texData.get(C.dataId);return A(E.isPacked,(function(){return"batchMatMul result is expected to be packed"})),u.shape=b,E.shape=e.outShape,Ut.makeTensorFromDataId(C.dataId,e.outShape,C.dtype)},n.prototype.conv2dWithIm2Row=function(t,n,e,r,o,i){var a=e.filterWidth,u=e.filterHeight,s=e.inChannels,c=e.outWidth,l=e.outHeight,f="channelsLast"===e.dataFormat,h=a*u*s,d=l*c,p=[h,d],v=t.squeeze([0]),m=n.reshape([1,h,-1]),g=new yu(p,v.shape,e),y=this.compileAndRun(g,[v]).reshape([1,p[0],p[1]]),x=null!=r,b=null!=i,w=o?ys(o,!0):null,C=new Ru(y.shape,[1,d,e.outChannels],!0,!1,x,w,b),E=[y,m];r&&E.push(r),b&&E.push(i);var R=this.compileAndRun(C,E);return f?R.reshape([1,l,c,e.outChannels]):R.reshape([1,e.outChannels,l,c])},n.prototype.fusedConv2d=function(t){var n=t.input,e=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights;if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(n,e,r,o,i,a);if(h().getBool("WEBGL_CONV_IM2COL")&&1===n.shape[0])return this.conv2dWithIm2Row(n,e,r,o,i,a);var u=null!=o,s=null!=a,c=i?ys(i,!1):null,l=new _a(r,u,c,s),f=[n,e];return o&&f.push(o),a&&f.push(a),this.compileAndRun(l,f)},n.prototype.conv2d=function(t,n,e){if(1===e.filterHeight&&1===e.filterWidth&&1===e.dilationHeight&&1===e.dilationWidth&&1===e.strideHeight&&1===e.strideWidth&&("SAME"===e.padInfo.type||"VALID"===e.padInfo.type))return this.conv2dByMatMul(t,n,e);if(h().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,n,e);var r=new _a(e);return this.compileAndRun(r,[t,n])},n.prototype.conv2dDerInput=function(t,n,e){var r=new Aa(e);return this.compileAndRun(r,[t,n])},n.prototype.conv2dDerFilter=function(t,n,e){var r=new Sa(e);return this.compileAndRun(r,[t,n])},n.prototype.fusedDepthwiseConv2D=function(t){var n,e=t.input,r=t.filter,o=t.convInfo,i=t.bias,a=t.activation,u=t.preluActivationWeights,s=h().getBool("WEBGL_PACK_DEPTHWISECONV")&&o.strideWidth<=2&&o.outChannels/o.inChannels==1,c=a?ys(a,s):null,l=[e,r],f=null!=i,d=null!=u;return f&&l.push(i),d&&l.push(u),s?(n=new Ba(o,f,c,d),this.compileAndRun(n,l)):(n=new Ma(o,f,c,d),this.compileAndRun(n,l))},n.prototype.depthwiseConv2D=function(t,n,e){var r;return h().getBool("WEBGL_PACK_DEPTHWISECONV")&&e.strideWidth<=2&&e.outChannels/e.inChannels==1?(r=new Ba(e),this.compileAndRun(r,[t,n])):(r=new Ma(e),this.compileAndRun(r,[t,n]))},n.prototype.depthwiseConv2DDerInput=function(t,n,e){var r=new Fa(e);return this.compileAndRun(r,[t,n])},n.prototype.depthwiseConv2DDerFilter=function(t,n,e){var r=new Na(e);return this.compileAndRun(r,[t,n])},n.prototype.conv3d=function(t,n,e){var r=new Oa(e);return this.compileAndRun(r,[t,n])},n.prototype.conv3dDerInput=function(t,n,e){var r=new Da(e);return this.compileAndRun(r,[t,n])},n.prototype.conv3dDerFilter=function(t,n,e){var r=new Ta(e);return this.compileAndRun(r,[t,n])},n.prototype.maxPool=function(t,n){var e=new Du(n,"max",!1);return this.compileAndRun(e,[t])},n.prototype.avgPool=function(t,n){var e=new Du(n,"avg",!1);return this.compileAndRun(e,[t],"float32")},n.prototype.maxPoolBackprop=function(t,n,e,r){var o=new Du(r,"max",!0),i=this.compileAndRun(o,[n]),a=new Cu(r),u=this.compileAndRun(a,[t,i],n.dtype);return i.dispose(),u},n.prototype.avgPoolBackprop=function(t,n,e){var r=new ca(e);return this.compileAndRun(r,[t],n.dtype)},n.prototype.cast=function(t,n){return Ei(t,n,this)},n.prototype.unstack=function(t,n){for(var e=t.shape[n],r=new Array(t.rank-1),o=0,i=0;i<t.rank;i++)i!==n&&(r[o++]=t.shape[i]);var a=new Array(t.rank).fill(0),u=t.shape.slice();u[n]=1;var s=new Array(e);for(i=0;i<s.length;i++)a[n]=i,s[i]=this.slice(t,a,u).reshape(r);return s},n.prototype.avgPool3d=function(t,n){var e=new Nu(n,"avg",!1);return this.compileAndRun(e,[t],"float32")},n.prototype.avgPool3dBackprop=function(t,n,e){var r=new la(e);return this.compileAndRun(r,[t],n.dtype)},n.prototype.maxPool3d=function(t,n){var e=new Nu(n,"max",!1);return this.compileAndRun(e,[t],"float32")},n.prototype.maxPool3dBackprop=function(t,n,e,r){var o=new Nu(r,"max",!0),i=this.compileAndRun(o,[n]),a=new Eu(r),u=this.compileAndRun(a,[t,i],n.dtype);return i.dispose(),u},n.prototype.reshape=function(t,n){var e=this.texData.get(t.dataId);if(e.isPacked&&!On(t.shape,n)&&(null===e.texture||!On(e.shape,n))){var r=this.packedReshape(t,n);return Ut.makeTensorFromDataId(r.dataId,r.shape,r.dtype)}return Ri(t,n)},n.prototype.resizeBilinear=function(t,n,e,r){var o=h().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Bu(t.shape,n,e,r):new Mu(t.shape,n,e,r);return this.compileAndRun(o,[t],"float32")},n.prototype.resizeBilinearBackprop=function(t,n,e){var r=new Ou(t,n,e);return this.compileAndRun(r,[t])},n.prototype.resizeNearestNeighbor=function(t,n,e,r){var o=new Lu(t.shape,n,e,r);return this.compileAndRun(o,[t])},n.prototype.resizeNearestNeighborBackprop=function(t,n,e){var r=new Pu(t,n,e);return this.compileAndRun(r,[t])},n.prototype.multinomial=function(t,n,e,r){var o=n?t:ii(t),i=o.shape[0],a=o.shape[1],u=new Iu(i,a,e),s=u.getCustomSetupFunc(r);return this.compileAndRun(u,[o],"int32",s)},n.prototype.oneHot=function(t,n,e,r){var o=new ku(t.size,n,e,r);return this.compileAndRun(o,[t])},n.prototype.diag=function(t){var n=new Ga(t.size);return this.compileAndRun(n,[t])},n.prototype.nonMaxSuppression=function(t,n,e,r,o){return de("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"),_i(t.dataSync(),n.dataSync(),e,r,o)},n.prototype.cropAndResize=function(t,n,e,r,o,i){var a=new Pa(t.shape,n.shape,r,o,i);return this.compileAndRun(a,[t,n,e],"float32")},n.prototype.depthToSpace=function(t,n,e){A(n>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+n}));var r=t.shape[0],o="NHWC"===e?t.shape[1]:t.shape[2],i="NHWC"===e?t.shape[2]:t.shape[3],a="NHWC"===e?t.shape[3]:t.shape[1],u=o*n,s=i*n,c=a/(n*n),l=new Va("NHWC"===e?[r,u,s,c]:[r,c,u,s],n,e);return this.compileAndRun(l,[t])},n.prototype.split=function(t,n,e){return Wi(t,n,e)},n.prototype.scatterND=function(t,n,e){var r=Vo(0,t,e),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,u=r.strides,s=r.outputSize,c=[s/a,a],l=t.reshape([i,o]),f=n.reshape([i,a]);if(0===s)return Ri(Fe([]),e);var h=Oe(0),d=new zu(i,o,l.rank,f.rank,u,c);return this.compileAndRun(d,[f,l,h]).reshape(e)},n.prototype.sparseToDense=function(t,n,e,r){var o=Vo(0,t,e),i=o.sliceRank,a=o.numUpdates,u=o.strides,s=o.outputSize,c=new zu(a,i,t.rank,n.rank,u,[s,1],!1);return this.compileAndRun(c,[n,t,r]).reshape(e)},n.prototype.fft=function(t){return this.fftImpl(t,!1)},n.prototype.ifft=function(t){return this.fftImpl(t,!0)},n.prototype.fftImpl=function(t,n){var e=this.texData.get(t.dataId),r=new Xa("return real * expR - imag * expI;",t.shape,n),o=new Xa("return real * expI + imag * expR;",t.shape,n),i=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)],a=this.compileAndRun(r,i),u=this.compileAndRun(o,i),s=this.complex(a,u).as2D(t.shape[0],t.shape[1]);return a.dispose(),u.dispose(),s},n.prototype.gatherND=function(t,n){var e=n.shape,r=e[e.length-1],o=Po(t,n),i=o[0],a=o[1],u=o[2],s=o[3],c=n.reshape([a,r]),l=t.reshape([t.size/u,u]),f=new Qa(r,s,[a,u]);return this.compileAndRun(f,[l,c]).reshape(i)},n.prototype.fill=function(t,n,e){if("string"===(e=e||Z(n))){var r=G(e,F(t));return r.fill(n),Ut.makeTensor(r,t,e,this)}var o=new Ya(t,n),i=o.getCustomSetupFunc(n);return this.compileAndRun(o,[],e,i)},n.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)},n.prototype.zerosLike=function(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)},n.prototype.linspace=function(t,n,e){return Ii(t,n,e)},n.prototype.makeTensorInfo=function(t,n){var e=this.write(null,t,n);return this.texData.get(e).usage=null,{dataId:e,shape:t,dtype:n}},n.prototype.makeOutput=function(t,n){var e=this.makeTensorInfo(t,n).dataId;return Ut.makeTensorFromDataId(e,t,n,this)},n.prototype.unpackTensor=function(t){var n=new ms(t.shape);return this.runWebGLProgram(n,[t],t.dtype)},n.prototype.packTensor=function(t){var n=new Su(t.shape);return this.runWebGLProgram(n,[t],t.dtype,null,!0)},n.prototype.packedReshape=function(t,n){var e=[Tn(t.shape)].concat(Dn(t.shape)),r={dtype:t.dtype,shape:e,dataId:t.dataId},o=[Tn(n)].concat(Dn(n)),i=new _u(o,e),a=this.runWebGLProgram(i,[r],t.dtype,null,!0);return{dataId:a.dataId,shape:n,dtype:a.dtype}},n.prototype.decode=function(t){var n,e=this.texData.get(t),r=e.isPacked,o=e.shape,i=e.dtype,a=Nn(o);return n=r?new za(a):new Ua(a),{dtype:i,shape:o,dataId:this.runWebGLProgram(n,[{shape:a,dtype:i,dataId:t}],i,null,!0).dataId}},n.prototype.runWebGLProgram=function(t,n,e,r,o){var i=this;void 0===o&&(o=!1);var a=this.makeTensorInfo(t.outputShape,e),u=this.texData.get(a.dataId);if(t.packedOutput&&(u.isPacked=!0),t.outPackingScheme===Gt.DENSE){var s=Qt(t.outputShape);u.texShape=s.map((function(t){return 2*t}))}if(null!=t.outTexUsage&&(u.usage=t.outTexUsage),0===F(a.shape))return u.values=V(a.dtype,0),a;var c=[],l=n.map((function(n){if("complex64"===n.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");var e=i.texData.get(n.dataId);if(null==e.texture){if(!t.packedInputs&&F(n.shape)<=h().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:n.shape,texData:null,isUniform:!0,uniformValues:e.values};t.packedInputs&&(e.isPacked=!0,e.shape=n.shape)}else if(!!e.isPacked!=!!t.packedInputs)n=e.isPacked?i.unpackTensor(n):i.packTensor(n),c.push(n),e=i.texData.get(n.dataId);else if(e.isPacked&&!On(e.shape,n.shape)){var r=n,o=n.shape;n.shape=e.shape,n=i.packedReshape(n,o),c.push(n),e=i.texData.get(n.dataId),r.shape=o}return i.uploadToGPU(n.dataId),{shape:n.shape,texData:e,isUniform:!1}}));this.uploadToGPU(a.dataId);var f,d={shape:a.shape,texData:u,isUniform:!1},p=function(t,n,e){var r="";n.concat(e).forEach((function(t){var n=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,e=t.isUniform?"uniform":t.texData.texShape;r+=t.shape+"_"+e+"_"+n}));var o=t.userCode;return t.constructor.name+"_"+r+"_"+o}(t,l,d),v=this.getAndSaveBinary(p,(function(){return function(t,n,e,r){var o=n.userCode,i=e.map((function(t,e){var r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:n.variableNames[e],shapeInfo:r}})),a=i.map((function(t){return t.shapeInfo})),u={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},s=Ji(i,u,o,n.packedInputs),c=t.createProgram(s),l=null,f=t.getUniformLocation(c,"NAN",!1);1===h().getNumber("WEBGL_VERSION")&&(l=t.getUniformLocation(c,"INFINITY",!1));for(var d={},p=0;p<n.variableNames.length;p++){var v=n.variableNames[p];d[v]=t.getUniformLocation(c,v,!1),d["offset"+v]=t.getUniformLocation(c,"offset"+v,!1)}return{program:n,source:s,webGLProgram:c,uniformLocations:d,inShapeInfos:a,outShapeInfo:u,infLoc:l,nanLoc:f}}(i.gpgpu,t,l,d)})),m=null!=this.activeTimers;if(m&&(f=this.startTimer()),function(t,n,e,r,o){gu(n.inShapeInfos,e),gu([n.outShapeInfo],[r]);var i=r.texData.texture,a=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(i,a[0],a[1]):t.setOutputMatrixTexture(i,a[0],a[1]),t.setProgram(n.webGLProgram),1===h().getNumber("WEBGL_VERSION")&&null!==n.infLoc&&t.gl.uniform1f(n.infLoc,1/0),null!==n.nanLoc&&t.gl.uniform1f(n.nanLoc,NaN),e.forEach((function(e,r){var o=n.program.variableNames[r],i=n.uniformLocations[o],a=n.uniformLocations["offset"+o];if(null!=i)if(e.isUniform)if(F(e.shape)<2)t.gl.uniform1f(i,e.uniformValues[0]);else{var u=e.uniformValues;u instanceof Float32Array||(u=new Float32Array(u)),t.gl.uniform1fv(i,u)}else null!=e.texData.slice&&null!=a&&t.gl.uniform1i(a,e.texData.slice.flatOffset),t.setInputMatrixTexture(e.texData.texture,i,r)})),null!=o&&o(t,n.webGLProgram),t.executeProgram()}(this.gpgpu,v,l,d,r),c.forEach((function(t){return i.disposeData(t.dataId)})),m&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!h().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===o){var g=this.unpackTensor(a);return this.disposeData(a.dataId),g}return a},n.prototype.compileAndRun=function(t,n,e,r,o){void 0===o&&(o=!1),e=e||n[0].dtype;var i=this.runWebGLProgram(t,n,e,r,o);return Ut.makeTensorFromDataId(i.dataId,i.shape,i.dtype)},n.prototype.getAndSaveBinary=function(t,n){return t in this.binaryCache||(this.binaryCache[t]=n()),this.binaryCache[t]},n.prototype.getTextureManager=function(){return this.textureManager},n.prototype.dispose=function(){var t=this;this.disposed||(h().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((function(n){t.gpgpu.deleteProgram(t.binaryCache[n].webGLProgram),delete t.binaryCache[n]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)},n.prototype.floatPrecision=function(){var t=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=te((function(){if(!h().get("WEBGL_RENDER_FLOAT32_ENABLED")){var n=h().getBool("DEBUG");h().set("DEBUG",!1);var e=t.abs(Oe(1e-8)).dataSync()[0];if(h().set("DEBUG",n),e>0)return 32}return 16}))),this.floatPrecisionValue},n.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},n.prototype.uploadToGPU=function(t){var n,e=this.texData.get(t),r=e.shape,o=e.dtype,i=e.values,a=e.texture,u=e.usage,s=e.isPacked;if(null==a){var c,l=null!=this.activeTimers;l&&(c=ut());var f=e.texShape;if(null==f&&(f=Fn(r,s),e.texShape=f),null!=i){var h=Nn(r),d=void 0,p=f[1],v=f[0],m=i instanceof Uint8Array;s?(p=(n=Jt(f[0],f[1]))[0],v=n[1],d=new ja(h,[v,p],m)):d=new Ka(h,[v,p],m);var g=this.makeTensorInfo([v,p],o);this.texData.get(g.dataId).usage=m?Ht.PIXELS:Ht.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId),p,v,i);var y=this.runWebGLProgram(d,[g],o,null,!0),x=this.texData.get(y.dataId);e.texture=x.texture,e.texShape=x.texShape,e.isPacked=x.isPacked,e.usage=x.usage,this.disposeData(g.dataId),this.texData.delete(y.dataId),e.values=null,l&&(this.uploadWaitMs+=ut()-c)}else{var b=this.acquireTexture(f,u,o,s);e.texture=b}}},n.prototype.convertAndCacheOnCPU=function(t,n){var e=this.texData.get(t),r=e.dtype;return this.releaseGPUData(t),null!=n&&(e.values=function(t,n){if("float32"===n||"complex64"===n)return t;if("int32"===n||"bool"===n){for(var e="int32"===n?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<e.length;++r)e[r]=Math.round(t[r]);return e}throw new Error("Unknown dtype "+n)}(n,r)),e.values},n.prototype.acquireTexture=function(t,n,e,r){if(this.numBytesInGPU+=this.computeBytes(t,e),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn("High memory usage in GPU: "+o+" MB, most likely due to a memory leak")}return this.textureManager.acquireTexture(t,n,r)},n.prototype.computeBytes=function(t,n){return t[0]*t[1]*X(n)},n}(ci);function bs(t,n){return t(n={exports:{}},n.exports),n.exports}zt()&&Ut.registerBackend("webgl",(function(){return new xs}),2),"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;var ws=bs((function(t){!function(t,n,e){function r(t){var n,e=this,r=(n=4022871197,function(t){t=t.toString();for(var e=0;e<t.length;e++){var r=.02519603282416938*(n+=t.charCodeAt(e));r-=n=r>>>0,n=(r*=n)>>>0,n+=4294967296*(r-=n)}return 2.3283064365386963e-10*(n>>>0)});e.next=function(){var t=2091639*e.s0+2.3283064365386963e-10*e.c;return e.s0=e.s1,e.s1=e.s2,e.s2=t-(e.c=0|t)},e.c=1,e.s0=r(" "),e.s1=r(" "),e.s2=r(" "),e.s0-=r(t),e.s0<0&&(e.s0+=1),e.s1-=r(t),e.s1<0&&(e.s1+=1),e.s2-=r(t),e.s2<0&&(e.s2+=1),r=null}function o(t,n){return n.c=t.c,n.s0=t.s0,n.s1=t.s1,n.s2=t.s2,n}function i(t,n){var e=new r(t),i=n&&n.state,a=e.next;return a.int32=function(){return 4294967296*e.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,i&&("object"==typeof i&&o(i,e),a.state=function(){return o(e,{})}),a}n&&n.exports?n.exports=i:this.alea=i}(0,t)})),Cs=bs((function(t){!function(t,n,e){function r(t){var n=this,e="";n.x=0,n.y=0,n.z=0,n.w=0,n.next=function(){var t=n.x^n.x<<11;return n.x=n.y,n.y=n.z,n.z=n.w,n.w^=n.w>>>19^t^t>>>8},t===(0|t)?n.x=t:e+=t;for(var r=0;r<e.length+64;r++)n.x^=0|e.charCodeAt(r),n.next()}function o(t,n){return n.x=t.x,n.y=t.y,n.z=t.z,n.w=t.w,n}function i(t,n){var e=new r(t),i=n&&n.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,i&&("object"==typeof i&&o(i,e),a.state=function(){return o(e,{})}),a}n&&n.exports?n.exports=i:this.xor128=i}(0,t)})),Es=bs((function(t){!function(t,n,e){function r(t){var n=this,e="";n.next=function(){var t=n.x^n.x>>>2;return n.x=n.y,n.y=n.z,n.z=n.w,n.w=n.v,(n.d=n.d+362437|0)+(n.v=n.v^n.v<<4^t^t<<1)|0},n.x=0,n.y=0,n.z=0,n.w=0,n.v=0,t===(0|t)?n.x=t:e+=t;for(var r=0;r<e.length+64;r++)n.x^=0|e.charCodeAt(r),r==e.length&&(n.d=n.x<<10^n.x>>>4),n.next()}function o(t,n){return n.x=t.x,n.y=t.y,n.z=t.z,n.w=t.w,n.v=t.v,n.d=t.d,n}function i(t,n){var e=new r(t),i=n&&n.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,i&&("object"==typeof i&&o(i,e),a.state=function(){return o(e,{})}),a}n&&n.exports?n.exports=i:this.xorwow=i}(0,t)})),Rs=bs((function(t){!function(t,n,e){function r(t){var n=this;n.next=function(){var t,e,r=n.x,o=n.i;return t=r[o],e=(t^=t>>>7)^t<<24,e^=(t=r[o+1&7])^t>>>10,e^=(t=r[o+3&7])^t>>>3,e^=(t=r[o+4&7])^t<<7,t=r[o+7&7],e^=(t^=t<<13)^t<<9,r[o]=e,n.i=o+1&7,e},function(t,n){var e,r=[];if(n===(0|n))r[0]=n;else for(n=""+n,e=0;e<n.length;++e)r[7&e]=r[7&e]<<15^n.charCodeAt(e)+r[e+1&7]<<13;for(;r.length<8;)r.push(0);for(e=0;e<8&&0===r[e];++e);for(8==e?r[7]=-1:r[e],t.x=r,t.i=0,e=256;e>0;--e)t.next()}(n,t)}function o(t,n){return n.x=t.x.slice(),n.i=t.i,n}function i(t,n){null==t&&(t=+new Date);var e=new r(t),i=n&&n.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,i&&(i.x&&o(i,e),a.state=function(){return o(e,{})}),a}n&&n.exports?n.exports=i:this.xorshift7=i}(0,t)})),Is=bs((function(t){!function(t,n,e){function r(t){var n=this;n.next=function(){var t,e,r=n.w,o=n.X,i=n.i;return n.w=r=r+1640531527|0,e=o[i+34&127],t=o[i=i+1&127],e^=e<<13,t^=t<<17,e^=e>>>15,t^=t>>>12,e=o[i]=e^t,n.i=i,e+(r^r>>>16)|0},function(t,n){var e,r,o,i,a,u=[],s=128;for(n===(0|n)?(r=n,n=null):(n+="\0",r=0,s=Math.max(s,n.length)),o=0,i=-32;i<s;++i)n&&(r^=n.charCodeAt((i+32)%n.length)),0===i&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(a=a+1640531527|0,o=0==(e=u[127&i]^=r+a)?o+1:0);for(o>=128&&(u[127&(n&&n.length||0)]=-1),o=127,i=512;i>0;--i)r=u[o+34&127],e=u[o=o+1&127],r^=r<<13,e^=e<<17,r^=r>>>15,e^=e>>>12,u[o]=r^e;t.w=a,t.X=u,t.i=o}(n,t)}function o(t,n){return n.i=t.i,n.w=t.w,n.X=t.X.slice(),n}function i(t,n){null==t&&(t=+new Date);var e=new r(t),i=n&&n.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,i&&(i.X&&o(i,e),a.state=function(){return o(e,{})}),a}n&&n.exports?n.exports=i:this.xor4096=i}(0,t)})),ks=bs((function(t){!function(t,n,e){function r(t){var n=this,e="";n.next=function(){var t=n.b,e=n.c,r=n.d,o=n.a;return t=t<<25^t>>>7^e,e=e-r|0,r=r<<24^r>>>8^o,o=o-t|0,n.b=t=t<<20^t>>>12^e,n.c=e=e-r|0,n.d=r<<16^e>>>16^o,n.a=o-t|0},n.a=0,n.b=0,n.c=-1640531527,n.d=1367130551,t===Math.floor(t)?(n.a=t/4294967296|0,n.b=0|t):e+=t;for(var r=0;r<e.length+20;r++)n.b^=0|e.charCodeAt(r),n.next()}function o(t,n){return n.a=t.a,n.b=t.b,n.c=t.c,n.d=t.d,n}function i(t,n){var e=new r(t),i=n&&n.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,i&&("object"==typeof i&&o(i,e),a.state=function(){return o(e,{})}),a}n&&n.exports?n.exports=i:this.tychei=i}(0,t)})),Ss=bs((function(t){!function(n,r){var o,i=this,a=256,u="random",s=r.pow(a,6),c=r.pow(2,52),l=2*c,f=255;function h(t,e,f){var h=[],g=v(function t(n,e){var r,o=[],i=typeof n;if(e&&"object"==i)for(r in n)try{o.push(t(n[r],e-1))}catch(t){}return o.length?o:"string"==i?n:n+"\0"}((e=1==e?{entropy:!0}:e||{}).entropy?[t,m(n)]:null==t?function(){try{var t;return o&&(t=o.randomBytes)?t=t(a):(t=new Uint8Array(a),(i.crypto||i.msCrypto).getRandomValues(t)),m(t)}catch(t){var e=i.navigator,r=e&&e.plugins;return[+new Date,i,r,i.screen,m(n)]}}():t,3),h),y=new d(h),x=function(){for(var t=y.g(6),n=s,e=0;t<c;)t=(t+e)*a,n*=a,e=y.g(1);for(;t>=l;)t/=2,n/=2,e>>>=1;return(t+e)/n};return x.int32=function(){return 0|y.g(4)},x.quick=function(){return y.g(4)/4294967296},x.double=x,v(m(y.S),n),(e.pass||f||function(t,n,e,o){return o&&(o.S&&p(o,y),t.state=function(){return p(y,{})}),e?(r[u]=t,n):t})(x,g,"global"in e?e.global:this==r,e.state)}function d(t){var n,e=t.length,r=this,o=0,i=r.i=r.j=0,u=r.S=[];for(e||(t=[e++]);o<a;)u[o]=o++;for(o=0;o<a;o++)u[o]=u[i=f&i+t[o%e]+(n=u[o])],u[i]=n;(r.g=function(t){for(var n,e=0,o=r.i,i=r.j,u=r.S;t--;)n=u[o=f&o+1],e=e*a+u[f&(u[o]=u[i=f&i+n])+(u[i]=n)];return r.i=o,r.j=i,e})(a)}function p(t,n){return n.i=t.i,n.j=t.j,n.S=t.S.slice(),n}function v(t,n){for(var e,r=t+"",o=0;o<r.length;)n[f&o]=f&(e^=19*n[f&o])+r.charCodeAt(o++);return m(n)}function m(t){return String.fromCharCode.apply(0,t)}if(r.seedrandom=h,v(r.random(),n),t.exports){t.exports=h;try{o=e(10)}catch(t){}}}([],Math)}));Ss.alea=ws,Ss.xor128=Cs,Ss.xorwow=Es,Ss.xorshift7=Rs,Ss.xor4096=Is,Ss.tychei=ks;var As=Ss.alea,Ts=Ae({addN_:function(t){A(Array.isArray(t),(function(){return"The argument passed to tf.addN() must be a list of tensors"})),A(t.length>=1,(function(){return"Must pass at least one tensor to tf.addN(), but got "+t.length}));var n=t.map((function(t,n){return me(t,"tensors"+n,"addN")})),e=n[0];n.forEach((function(t){if(t.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),n.forEach((function(t){if(!_(t.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));var r=n;return Ut.runKernelFunc((function(t,e){return t.addN(n)}),r,null,"AddN")}});function Ds(){Yn("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon")}function Ns(t){return 0===t.rank||1===t.rank?t.as4D(1,1,1,t.size):2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}function Fs(t,n,e,r,o,i){null==i&&(i=.001);var a,u,s=me(t,"x","batchNorm"),c=me(n,"mean","batchNorm"),l=me(e,"variance","batchNorm");null!=o&&(a=me(o,"scale","batchNorm")),null!=r&&(u=me(r,"offset","batchNorm")),A(c.rank===l.rank,(function(){return"Batch normalization gradient requires mean and variance to have equal ranks."})),A(null==u||c.rank===u.rank,(function(){return"Batch normalization gradient requires mean and offset to have equal ranks."})),A(null==a||c.rank===a.rank,(function(){return"Batch normalization gradient requires mean and scale to have equal ranks."}));var f={x:s,scale:a,offset:u,mean:c,variance:l},h={varianceEpsilon:i};return Ut.runKernelFunc((function(t,n){var e=Ns(s),r=t.batchNormalization(e,_s(c),_s(l),i,_s(a),_s(u));return n([s,c,l,a]),r}),f,null,"FusedBatchNorm",h).reshape(s.shape)}function _s(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}var Os=Ae({batchNormalization_:function(t,n,e,r,o,i){return void 0===r&&(r=.001),Ds(),Fs(t,n,e,i,o,r)}}),Ms=Ae({batchNorm_:Fs});function Bs(t,n,e,r,o,i){var a,u,s=me(t,"x","batchNorm"),c=me(n,"mean","batchNorm"),l=me(e,"variance","batchNorm");return null!=o&&(a=me(o,"scale","batchNorm")),null!=r&&(u=me(r,"offset","batchNorm")),A(2===s.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+s.rank+"."})),A(2===c.rank||1===c.rank,(function(){return"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank "+c.rank+"."})),A(2===l.rank||1===l.rank,(function(){return"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank "+l.rank+"."})),null!=a&&A(2===a.rank||1===a.rank,(function(){return"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank "+a.rank+"."})),null!=u&&A(2===u.rank||1===u.rank,(function(){return"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank "+u.rank+"."})),Ms(s,c,l,u,a,i)}var Ps=Ae({batchNormalization2d_:function(t,n,e,r,o,i){return void 0===r&&(r=.001),Ds(),Bs(t,n,e,i,o,r)}}),Ls=Ae({batchNorm2d_:Bs});function Ws(t,n,e,r,o,i){var a,u,s=me(t,"x","batchNorm"),c=me(n,"mean","batchNorm"),l=me(e,"variance","batchNorm");return null!=o&&(a=me(o,"scale","batchNorm")),null!=r&&(u=me(r,"offset","batchNorm")),A(3===s.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+s.rank+"."})),A(3===c.rank||1===c.rank,(function(){return"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank "+c.rank+"."})),A(3===l.rank||1===l.rank,(function(){return"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank "+l.rank+"."})),null!=a&&A(3===a.rank||1===a.rank,(function(){return"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank "+a.rank+"."})),null!=u&&A(3===u.rank||1===u.rank,(function(){return"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank "+u.rank+"."})),Ms(s,c,l,u,a,i)}var Us=Ae({batchNormalization3d_:function(t,n,e,r,o,i){return void 0===r&&(r=.001),Ds(),Ws(t,n,e,i,o,r)}}),zs=Ae({batchNorm3d_:Ws});function Vs(t,n,e,r,o,i){var a,u,s=me(t,"x","batchNorm"),c=me(n,"mean","batchNorm"),l=me(e,"variance","batchNorm");return null!=o&&(a=me(o,"scale","batchNorm")),null!=r&&(u=me(r,"offset","batchNorm")),A(4===s.rank,(function(){return"Error in batchNorm4D: x must be rank 4 but got rank "+s.rank+"."})),A(4===c.rank||1===c.rank,(function(){return"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank "+c.rank+"."})),A(4===l.rank||1===l.rank,(function(){return"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank "+l.rank+"."})),null!=a&&A(4===a.rank||1===a.rank,(function(){return"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank "+a.rank+"."})),null!=u&&A(4===u.rank||1===u.rank,(function(){return"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank "+u.rank+"."})),Ms(s,c,l,u,a,i)}var Gs=Ae({batchNormalization4d_:function(t,n,e,r,o,i){return void 0===r&&(r=.001),Ds(),Vs(t,n,e,i,o,r)}}),Hs=Ae({batchNorm4d_:Vs}),qs=Ae({broadcastTo_:function(t,n){var e=me(t,"broadcastTo","x"),r=e.shape;if(n.some((function(t){return!(t>0)||t%1!=0})))throw new Error("broadcastTo(): Invalid broadcast shape ["+n+"].");if(n.length<e.rank)throw new Error("broadcastTo(): shape.length="+n.length+" < input.rank="+e.rank+".");if(n.length>e.rank){for(var o=e.shape.slice();o.length<n.length;)o.unshift(1);e=e.reshape(o)}for(var i=e.shape,a=Array.from(n),u=n.length-1;u>=0;u--)if(i[u]===n[u])a[u]=1;else if(1!==e.shape[u])throw new Error("broadcastTo(): ["+r+"] cannot be broadcast to ["+n+"].");var s=a.map((function(t,n){return t>1?n:-1})).filter((function(t){return t>=0}));if(0===s.length)return e.clone();var c={x:e},l={shape:n,inputShape:i};return Ut.runKernelFunc((function(t){return t.tile(e,a)}),c,(function(t){return{x:function(){return t.sum(s,!0)}}}),Sr,l)}}),Ks=Ae({clone_:function(t){var n=me(t,"x","clone",null);return Ut.runKernelFunc((function(){return Ut.makeTensorFromDataId(n.dataId,n.shape,n.dtype)}),{x:n},null,Tr)}}),js=Ae({logicalAnd_:function(t,n){var e=me(t,"a","logicalAnd","bool"),r=me(n,"b","logicalAnd","bool");return Pr(e.shape,r.shape),Ut.runKernelFunc((function(t){return t.logicalAnd(e,r)}),{a:e,b:r},null,"LogicalAnd")}}),Xs=Ae({logicalNot_:function(t){var n=me(t,"x","logicalNot","bool");return Ut.runKernelFunc((function(t){return t.logicalNot(n)}),{$x:n})}}),Ys=Ae({logicalOr_:function(t,n){var e=me(t,"a","logicalOr","bool"),r=me(n,"b","logicalOr","bool");return Pr(e.shape,r.shape),Ut.runKernelFunc((function(t){return t.logicalOr(e,r)}),{$a:e,$b:r})}}),$s=Ae({logicalXor_:function(t,n){var e=me(t,"a","logicalXor","bool"),r=me(n,"b","logicalXor","bool");return Pr(e.shape,r.shape),Ys(t,n).logicalAnd(js(t,n).logicalNot())}}),Qs=Ae({where_:function(t,n,e){var r=me(n,"a","where"),o=me(e,"b","where"),i=me(t,"condition","where","bool");return T(r.shape,o.shape,"Error in where: "),1===i.rank?A(i.shape[0]===r.shape[0],(function(){return"The first dimension of `a` must match the size of `condition`."})):T(i.shape,o.shape,"Error in where: "),Ut.runKernelFunc((function(t,n){var e=t.select(i,r,o);return n([i]),e}),{$condition:i,$a:r,$b:o},(function(t,n){var e=n[0];return{$condition:function(){return Xe(e).toFloat()},$a:function(){return t.mul(e.cast(t.dtype))},$b:function(){return t.mul(e.logicalNot().cast(t.dtype))}}}))}}),Js=function(t){return s(this,void 0,void 0,(function(){var n,e,r;return c(this,(function(o){switch(o.label){case 0:return[4,(n=me(t,"condition","whereAsync","bool")).data()];case 1:return e=o.sent(),r=Vi(n.shape,e),t!==n&&n.dispose(),[2,r]}}))}))},Zs=Ae({divNoNan_:function(t,n){var e,r=me(t,"a","div"),o=me(n,"b","div");r=(e=_t(r,o))[0],o=e[1];var i=Bo(r,o),a=Xe(i),u=o.equal(a);return Qs(u,a,i)}}),tc=Ae({tile_:function(t,n){var e=me(t,"x","tile",null);A(e.rank===n.length,(function(){return"Error in transpose: rank of input "+e.rank+" must match length of reps "+n+"."}));var r=[e],o={x:e},i={reps:n};return Ut.runKernelFunc((function(t,r){var o=t.tile(e,n);return r([e]),o}),o,null,Dr,i,r)}}),nc=Ae({eye_:function(t,n,e,r){void 0===r&&(r="float32"),null==n&&(n=t);for(var o=nr([t,n],r),i=t<=n?t:n,a=0;a<i;++a)o.set(1,a,a);var u=o.toTensor().as2D(t,n);if(null==e)return u;if(1===e.length)return tc(ur(u,0),[e[0],1,1]);if(2===e.length)return tc(ur(ur(u,0),0),[e[0],e[1],1,1]);if(3===e.length)return tc(ur(ur(ur(u,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received "+e.length+"D.")}}),ec=Ae({multinomial_:function(t,n,e,r){void 0===r&&(r=!1);var o=me(t,"logits","multinomial"),i=o.size,a=o.rank;if(i<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+i+".");if(a>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+a);e=e||Math.random();var u=1===a?o.as2D(1,-1):o,s=Ut.runKernelFunc((function(t){return t.multinomial(u,r,n,e)}),{logits2D:u});return 1===a?s.as1D():s}}),rc=Ae({oneHot_:function(t,n,e,r){if(void 0===e&&(e=1),void 0===r&&(r=0),n<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+n);var o=me(t,"indices","oneHot","int32"),i=o.shape.concat([n]),a={indices:o=o.flatten()},u={depth:n,onValue:e,offValue:r};return Ut.runKernelFunc((function(t,i){return i([o]),t.oneHot(o,n,e,r)}),a,null,Ar,u).reshape(i)}}),oc=Ae({pad_:function(t,n,e){void 0===e&&(e=0);var r=me(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var o={paddings:n,constantValue:e},i={x:r};return Ut.runKernelFunc((function(t,o){return o([r]),t.pad(r,n,e)}),i,null,Nr,o)}}),ic=Ae({pad1d_:function(t,n,e){return void 0===e&&(e=0),A(2===n.length,(function(){return"Invalid number of paddings. Must be length of 2."})),oc(t,[n],e)}}),ac=Ae({pad2d_:function(t,n,e){return void 0===e&&(e=0),A(2===n.length&&2===n[0].length&&2===n[1].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),oc(t,n,e)}}),uc=Ae({pad3d_:function(t,n,e){return void 0===e&&(e=0),A(3===n.length&&2===n[0].length&&2===n[1].length&&2===n[2].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),oc(t,n,e)}}),sc=Ae({pad4d_:function(t,n,e){return void 0===e&&(e=0),A(4===n.length&&2===n[0].length&&2===n[1].length&&2===n[2].length&&2===n[3].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),oc(t,n,e)}}),cc=Ae({rand_:function(t,n,e){var r=F(t),o=null;if(null==e||"float32"===e)o=new Float32Array(r);else if("int32"===e)o=new Int32Array(r);else{if("bool"!==e)throw new Error("Unknown data type "+e);o=new Uint8Array(r)}for(var i=0;i<r;i++)o[i]=n();return Ut.makeTensor(o,t,e)}});function lc(){return 32===Ut.backend.floatPrecision()?.001:.1}function fc(t,n,e){var r=!0;if((j(t)||j(n))&&(r=!1),j(t)&&j(n)&&(r=!0),r){var o=t.constructor.name,i=n.constructor.name;if(o!==i)throw new Error("Arrays are of different type. Actual: "+o+". Expected: "+i)}if(Array.isArray(t)&&Array.isArray(n)){var a=pe(t),u=pe(n);if(!_(a,u))throw new Error("Arrays have different shapes. Actual: ["+a+"]. Expected: ["+u+"]")}var s=j(t)?t:N(t),c=j(n)?n:N(n);if(s.length!==c.length)throw new Error("Arrays have different lengths actual: "+s.length+" vs expected: "+c.length+".\nActual:   "+s+".\nExpected: "+c+".");for(var l=0;l<c.length;++l){var f=s[l],h=c[l];if(!e(f,h))throw new Error("Arrays differ: actual["+l+"] = "+f+", expected["+l+"] = "+h+".\nActual:   "+s+".\nExpected: "+c+".")}}function hc(t,n,e){return!isFinite(t)&&!isFinite(n)||!(isNaN(t)||isNaN(n)||Math.abs(t-n)>e)}var dc=Object.freeze({TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(t,n,e){return null==e&&(e=lc()),fc(t,n,(function(t,n){return hc(t,n,e)}))},testEpsilon:lc,expectPromiseToFail:function(t,n){t().then((function(){return n.fail()}),(function(){return n()}))},expectArraysEqual:function(t,n){var e="string"==typeof n||"number"==typeof n||"boolean"==typeof n?[n]:n;return $(t)||$(t[0])||$(n)||$(n[0])?fc(t,e,(function(t,n){return t==n})):fc(t,n,(function(t,n){return hc(t,n,0)}))},expectNumbersClose:function(t,n,e){if(null==e&&(e=lc()),!hc(t,n,e))throw new Error("Numbers differ: actual === "+t+", expected === "+n)},expectValuesInRange:function(t,n,e){for(var r=0;r<t.length;r++)if(t[r]<n||t[r]>e)throw new Error("Value out of range:"+t[r]+" low: "+n+", high: "+e)},expectArrayBuffersEqual:function(t,n){expect(new Float32Array(t)).toEqual(new Float32Array(n))}}),pc=function(){function t(t,n,e,r,o){this.mean=t,this.stdDev=n,this.dtype=e,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var i=o||Math.random();this.random=As(i.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var n,e,r=!1;!r;){var o=void 0,i=void 0,a=void 0;do{a=(o=2*this.random()-1)*o+(i=2*this.random()-1)*i}while(a>=1||0===a);var u=Math.sqrt(-2*Math.log(a)/a);n=this.mean+this.stdDev*o*u,e=this.mean+this.stdDev*i*u,this.truncated&&!this.isValidTruncated(n)||(r=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(n)},t.prototype.convertValue=function(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),vc=function(){function t(t,n,e,r){this.alpha=t,this.beta=1/n,this.dtype=e;var o=r||Math.random();this.randu=As(o.toString()),this.randn=new pc(0,1,e,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}return t.prototype.nextValue=function(){for(var t,n,e,r,o,i;;){do{r=this.randn.nextValue(),i=1+this.c*r}while(i<=0);if(i*=i*i,n=1-.331*(t=r*r)*t,e=.5*t+this.d*(1-i+Math.log(i)),(o=this.randu())<n||Math.log(o)<e)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)},t.prototype.convertValue=function(t){return"float32"===this.dtype?t:Math.round(t)},t}(),mc=function(){function t(t,n,e,r){var o=this;if(void 0===t&&(t=0),void 0===n&&(n=1),this.canReturnFloat=function(){return null==o.dtype||"float32"===o.dtype},this.min=t,this.range=n-t,this.dtype=e,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between "+t+" - "+n+" <= 1 and dtype is not float");this.random=As(r)}return t.prototype.convertValue=function(t){return this.canReturnFloat()?t:Math.round(t)},t.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},t}(),gc=Ae({randomGamma_:function(t,n,e,r,o){if(void 0===e&&(e=1),void 0===r&&(r="float32"),null==e&&(e=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);for(var i=new vc(n,e,r,o),a=nr(t,r),u=0;u<a.values.length;u++)a.values[u]=i.nextValue();return a.toTensor()}}),yc=Ae({randomNormal_:function(t,n,e,r,o){if(void 0===n&&(n=0),void 0===e&&(e=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new pc(n,e,r,!1,o),a=nr(t,r),u=0;u<a.values.length;u++)a.values[u]=i.nextValue();return a.toTensor()}}),xc=Ae({randomUniform_:function(t,n,e,r,o){void 0===n&&(n=0),void 0===e&&(e=1),void 0===r&&(r="float32");for(var i=nr(t,r),a=new mc(n,e,null,o),u=0;u<i.values.length;u++)i.values[u]=a.nextValue();return i.toTensor()}}),bc=Ae({square_:function(t){var n=me(t,"x","square"),e=[n];return Ut.runKernelFunc((function(t,e){return e([n]),t.square(n)}),{x:n},null,"Square",{},e,[])}}),wc=Ae({squaredDifference_:function(t,n){var e,r=me(t,"a","squaredDifference"),o=me(n,"b","squaredDifference");e=_t(r,o),r=e[0],o=e[1],Pr(r.shape,o.shape);var i={a:r,b:o},a=[r,o];return Ut.runKernelFunc((function(t,n){var e=t.squaredDifference(r,o);return n([r,o]),e}),i,(function(t,n){var e=n[0],r=n[1],o=Oe(2);return{a:function(){return t.mul(e.sub(r).mul(o))},b:function(){return t.mul(r.sub(e).mul(o))}}}),Er,{},a,[])}}),Cc=Ae({truncatedNormal_:function(t,n,e,r,o){if(void 0===n&&(n=0),void 0===e&&(e=1),null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");for(var i=new pc(n,e,r,!0,o),a=nr(t,r),u=0;u<a.values.length;u++)a.values[u]=i.nextValue();return a.toTensor()}}),Ec=Ae({equal_:function(t,n){var e,r=me(t,"a","equal"),o=me(n,"b","equal");return e=_t(r,o),r=e[0],o=e[1],Pr(r.shape,o.shape),Ut.runKernelFunc((function(t){return t.equal(r,o)}),{$a:r,$b:o})}}),Rc=Ae({equalStrict_:function(t,n){var e=me(t,"a","equalStrict"),r=me(n,"b","equalStrict");return T(e.shape,r.shape,"Error in equalStrict: "),e.equal(r)}}),Ic=Ae({greater_:function(t,n){var e,r=me(t,"a","greater"),o=me(n,"b","greater");return e=_t(r,o),r=e[0],o=e[1],Pr(r.shape,o.shape),Ut.runKernelFunc((function(t){return t.greater(r,o)}),{a:r,b:o},null,"Greater")}}),kc=Ae({greaterEqual_:function(t,n){var e,r=me(t,"a","greaterEqual"),o=me(n,"b","greaterEqual");return e=_t(r,o),r=e[0],o=e[1],Pr(r.shape,o.shape),Ut.runKernelFunc((function(t,n){var e=t.greaterEqual(r,o);return n([r,o]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1];return{a:function(){return Xe(e)},b:function(){return Xe(r)}}}),"GreaterEqual")}}),Sc=Ae({greaterEqualStrict_:function(t,n){var e=me(t,"a","greaterEqualStrict"),r=me(n,"b","greaterEqualStrict");return T(e.shape,r.shape,"Error in greaterEqualStrict: "),e.greaterEqual(r)}}),Ac=Ae({greaterStrict_:function(t,n){var e=me(t,"a","greaterStrict"),r=me(n,"b","greaterStrict");return T(e.shape,r.shape,"Error in greaterStrict: "),e.greater(r)}}),Tc=Ae({less_:function(t,n){var e,r=me(t,"a","less"),o=me(n,"b","less");return e=_t(r,o),r=e[0],o=e[1],Pr(r.shape,o.shape),Ut.runKernelFunc((function(t){return t.less(r,o)}),{a:r,b:o},null,"Less")}}),Dc=Ae({lessEqual_:function(t,n){var e,r=me(t,"a","lessEqual"),o=me(n,"b","lessEqual");return e=_t(r,o),r=e[0],o=e[1],Pr(r.shape,o.shape),Ut.runKernelFunc((function(t,n){var e=t.lessEqual(r,o);return n([r,o]),e}),{a:r,b:o},null,"LessEqual")}}),Nc=Ae({lessEqualStrict_:function(t,n){var e=me(t,"a","lessEqualStrict"),r=me(n,"b","lessEqualStrict");return T(e.shape,r.shape,"Error in lessEqualStrict: "),e.lessEqual(r)}}),Fc=Ae({lessStrict_:function(t,n){var e=me(t,"a","lessStrict"),r=me(n,"b","lessStrict");return T(e.shape,r.shape,"Error in lessStrict: "),e.less(r)}}),_c=Ae({notEqual_:function(t,n){var e,r=me(t,"a","notEqual"),o=me(n,"b","notEqual");return e=_t(r,o),r=e[0],o=e[1],Pr(r.shape,o.shape),Ut.runKernelFunc((function(t){return t.notEqual(r,o)}),{a:r,b:o},null,"NotEqual")}}),Oc=Ae({notEqualStrict_:function(t,n){var e=me(t,"a","notEqualStrict"),r=me(n,"b","notEqualStrict");return T(e.shape,r.shape,"Error in notEqualStrict: "),e.notEqual(r)}});function Mc(t,n){for(var e=[],r=t;r<n;++r)e.push(r);return e}function Bc(t){for(var n=[],e=0;e<t.length;++e)for(var r=0;r<t[e].length;++r)n.push(t[e][r]);return n}var Pc=Ae({gather_:function(t,n,e){void 0===e&&(e=0);var r=me(t,"x","gather"),o=me(n,"indices","gather","int32");e=U(e,r.shape)[0];var i=function(t,n,e){for(var r=t.shape[e],o=[],i=1,a=1,u=0;u<e;u++)o.push(t.shape[u]),i*=t.shape[u];for(u=0;u<n.rank;u++)o.push(n.shape[u]);for(u=e+1;u<t.rank;u++)o.push(t.shape[u]),a*=t.shape[u];return{batchSize:i,sliceSize:a,dimSize:r,outputShape:o}}(r,o,e);return Ut.runKernelFunc((function(t,n){var i=t.gather(r,o.flatten(),e);return n([o]),i}),{x:r,indices:o},(function(t,n){var o=n[0];return{x:function(){var n=r.shape,i=o.size,a=n.slice(0,e),u=a.length,s=n.slice(e,n.length).slice(1),c=s.length,l=Mc(0,u),f=Mc(u+1,u+1+c),h=Bc([a,[i],s]),d=t.reshape(h),p=o.reshape([i]),v=Bc([[u],l,f]),m=d.transpose(v),g=Lc(m,p,r.shape[e]),y=Re(v);return g.transpose(y)},indices:function(){return o}}}),"Gather",{axis:e}).reshape(i.outputShape)}}),Lc=Ae({unsortedSegmentSum_:function(t,n,e){var r=me(t,"x","unsortedSegmentSum"),o=me(n,"segmentIds","unsortedSegmentSum","int32");return A(O(e),(function(){return"numSegments must be of dtype int"})),Ut.runKernelFunc((function(t,n){var i=t.unsortedSegmentSum(r,o,e);return n([o]),i}),{$x:r},(function(t,n){var e=n[0];return{$x:function(){return function(t,n){for(var e=Eo(n,Xe(n)),r=Pc(t,e),o=kc(n,Oe(0,"int32")),i=r.rank-o.rank,a=0;a<i;++a)o=ur(o,a+1);o=js(o,Ve(r.shape,"bool"));var u=Xe(r);return Qs(o,r,u)}(t,e)}}}))}}),Wc=function(t,n,e){return s(this,void 0,void 0,(function(){var r,o,i,a,u,s,l,f,h,d,p,v,m;return c(this,(function(c){switch(c.label){case 0:for(r=me(t,"tensor","boolMask"),o=me(n,"mask","boolMask","bool"),i=null==e?0:e,a=o.rank,u=r.shape,A(a>0,(function(){return"mask cannot be scalar"})),T(u.slice(i,i+a),o.shape,"mask's shape must match the first K dimensions of tensor's shape,"),s=1,l=i;l<i+a;l++)s*=u[l];return f=u.slice(0,i).concat([s],u.slice(i+a)),h=r.reshape(f),d=o.reshape([-1]),[4,Js(d)];case 1:return p=c.sent(),v=p.squeeze([1]),m=Pc(h,v,i),t!==r&&r.dispose(),n!==o&&o.dispose(),v.dispose(),h.dispose(),d.dispose(),p.dispose(),[2,m]}}))}))};function Uc(t,n,e,r,o,i,a){void 0===i&&(i="NHWC"),A(t.length===n.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+n.rank+") must match"}));var u=t,s=n,c=!1;3===n.rank&&(c=!0,s=n.as4D(1,n.shape[0],n.shape[1],n.shape[2]),u=[1,t[0],t[1],t[2]]),A(4===u.length,(function(){return"Error in conv2dDerInput: inShape must be length 4, but got length "+u.length+"."})),A(4===s.rank,(function(){return"Error in conv2dDerInput: dy must be rank 4, but got rank "+s.rank})),A(4===e.rank,(function(){return"Error in conv2dDerInput: filter must be rank 4, but got rank "+e.rank}));var l="NHWC"===i?u[3]:u[1],f="NHWC"===i?s.shape[3]:s.shape[1];A(l===e.shape[2],(function(){return"Error in conv2dDerInput: depth of input ("+l+") must match input depth for filter "+e.shape[2]+"."})),A(f===e.shape[3],(function(){return"Error in conv2dDerInput: depth of output ("+f+") must match output depth for filter "+e.shape[3]+"."})),null!=a&&A(O(o),(function(){return"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var h=Ci(i),d=di(u,e.shape,r,1,o,a,!1,h),p=Ut.runKernelFunc((function(t,n){var r=t.conv2dDerInput(s,e,d);return n([e,s]),r}),{dy4D:s,filter:e},(function(t,n){var e=n[0],u=n[1];return{dy4D:function(){return Hc(t,e,r,o,i,1,a)},filter:function(){return Kc(t,u,e.shape,r,o,i,a)}}}));return c?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}function zc(t){var n=function(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t),e=n[0],r=n[1],o=n[2];return 1===e&&1===r&&1===o}function Vc(t,n,e,r,o){A(t.length===n.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+n.rank+") must match"}));var i=t,a=n,u=!1;4===n.rank&&(u=!0,a=n.as5D(1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]),i=[1,t[0],t[1],t[2],t[3]]);var s=i[4],c=a.shape[4];A(5===i.length,(function(){return"Error in conv3dDerInput: inShape must be length 5, but got length "+i.length+"."})),A(5===a.rank,(function(){return"Error in conv3dDerInput: dy must be rank 5, but got rank "+a.rank})),A(5===e.rank,(function(){return"Error in conv3dDerInput: filter must be rank 5, but got rank "+e.rank})),A(s===e.shape[3],(function(){return"Error in conv3dDerInput: depth of input ("+s+") must match input depth for filter "+e.shape[3]+"."})),A(c===e.shape[4],(function(){return"Error in conv3dDerInput: depth of output ("+c+") must match output depth for filter "+e.shape[4]+"."}));var l=pi(i,e.shape,r,1,o),f=Ut.runKernelFunc((function(t){return t.conv3dDerInput(a,e,l)}),{dy5D:a});return u?f.as4D(f.shape[1],f.shape[2],f.shape[3],f.shape[4]):f}var Gc=Ae({conv1d_:function(t,n,e,r,o,i,a){void 0===o&&(o="NWC"),void 0===i&&(i=1);var u=me(t,"x","conv1d"),s=me(n,"filter","conv1d"),c=u,l=!1;2===u.rank&&(l=!0,c=u.as3D(1,u.shape[0],u.shape[1])),A(3===c.rank,(function(){return"Error in conv1d: input must be rank 3, but got rank "+c.rank+"."})),A(3===s.rank,(function(){return"Error in conv1d: filter must be rank 3, but got rank "+s.rank+"."})),null!=a&&A(O(r),(function(){return"Error in conv1d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."})),A(c.shape[2]===s.shape[1],(function(){return"Error in conv1d: depth of input ("+c.shape[2]+") must match input depth for filter "+s.shape[1]+"."})),A(wi(e,i),(function(){return"Error in conv1D: Either stride or dilation must be 1. Got stride "+e+" and dilation '"+i+"'"})),A("NWC"===o,(function(){return"Error in conv1d: got dataFormat of "+o+" but only NWC is currently supported."}));var f=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),h=c.as4D(c.shape[0],1,c.shape[1],c.shape[2]),d=Hc(h,f,[1,e],r,"NHWC",[1,i],a);return l?d.as2D(d.shape[2],d.shape[3]):d.as3D(d.shape[0],d.shape[2],d.shape[3])}}),Hc=Ae({conv2d_:function(t,n,e,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var u=me(t,"x","conv2d"),s=me(n,"filter","conv2d"),c=u,l=!1;3===u.rank&&(l=!0,c=u.as4D(1,u.shape[0],u.shape[1],u.shape[2])),A(4===c.rank,(function(){return"Error in conv2d: input must be rank 4, but got rank "+c.rank+"."})),A(4===s.rank,(function(){return"Error in conv2d: filter must be rank 4, but got rank "+s.rank+"."})),null!=a&&A(O(r),(function(){return"Error in conv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var f="NHWC"===o?c.shape[3]:c.shape[1];A(f===s.shape[2],(function(){return"Error in conv2d: depth of input ("+f+") must match input depth for filter "+s.shape[2]+"."})),A(wi(e,i),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+i+"'"}));var h=Ci(o),d=di(c.shape,s.shape,e,i,r,a,!1,h),p=[s,c],v=Ut.runKernelFunc((function(t,n){var e=t.conv2d(c,s,d);return n([s,c]),e}),{x:c,filter:s},(function(t,n){var a=n,u=a[0],s=a[1];return A(bi(i),(function(){return"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"})),{x:function(){return jc(s.shape,t,u,e,r,o)},filter:function(){return Kc(s,t,u.shape,e,r,o)}}}),"Conv2D",d,p);return l?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),qc=Ae({conv3d_:function(t,n,e,r,o,i){void 0===o&&(o="NDHWC"),void 0===i&&(i=[1,1,1]);var a=me(t,"x","conv3d"),u=me(n,"filter","conv3d"),s=a,c=!1;4===a.rank&&(c=!0,s=a.as5D(1,a.shape[0],a.shape[1],a.shape[2],a.shape[3])),A(5===s.rank,(function(){return"Error in conv3d: input must be rank 5, but got rank "+s.rank+"."})),A(5===u.rank,(function(){return"Error in conv3d: filter must be rank 5, but got rank "+u.rank+"."})),A(s.shape[4]===u.shape[3],(function(){return"Error in conv3d: depth of input ("+s.shape[4]+") must match input depth for filter "+u.shape[3]+"."})),A(function(t,n){return zc(t)||zc(n)}(e,i),(function(){return"Error in conv3D: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+i+"'"})),A("NDHWC"===o,(function(){return"Error in conv3d: got dataFormat of "+o+" but only NDHWC is currently supported."}));var l=pi(s.shape,u.shape,e,i,r),f=Ut.runKernelFunc((function(t,n){var e=t.conv3d(s,u,l);return n([s,u]),e}),{x:s,$filter:u},(function(t,n){A(zc(i),(function(){return"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"}));var o=n[0],a=n[1];return{x:function(){return Vc(o.shape,t,a,e,r)},$filter:function(){return function(t,n,e,r,o){var i=t;4===t.rank&&(i=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));var a=n;4===a.rank&&(a=n.as5D(1,n.shape[0],n.shape[1],n.shape[2],n.shape[3])),A(5===i.rank,(function(){return"Error in conv3dDerFilter: input must be rank 5, but got shape "+i.shape+"."})),A(5===a.rank,(function(){return"Error in conv3dDerFilter: dy must be rank 5, but got shape "+a.shape+"."})),A(5===e.length,(function(){return"Error in conv3dDerFilter: filterShape must be length 5, but got "+e+"."})),A(i.shape[4]===e[3],(function(){return"Error in conv3dDerFilter: depth of input "+i.shape[4]+") must match input depth in filter ("+e[3]+"."})),A(a.shape[4]===e[4],(function(){return"Error in conv3dDerFilter: depth of dy ("+a.shape[4]+") must match output depth for filter ("+e[4]+")."}));var u=pi(i.shape,e,r,1,o);return Ut.runKernelFunc((function(t){return t.conv3dDerFilter(i,a,u)}),{x5D:i,dy5D:a})}(o,t,a.shape,e,r)}}}));return c?f.as4D(f.shape[1],f.shape[2],f.shape[3],f.shape[4]):f}}),Kc=Ae({conv2dDerFilter_:function(t,n,e,r,o,i,a){void 0===i&&(i="NHWC");var u=t;3===t.rank&&(u=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var s=n;3===s.rank&&(s=n.as4D(1,n.shape[0],n.shape[1],n.shape[2])),A(4===u.rank,(function(){return"Error in conv2dDerFilter: input must be rank 4, but got shape "+u.shape+"."})),A(4===s.rank,(function(){return"Error in conv2dDerFilter: dy must be rank 4, but got shape "+s.shape+"."})),A(4===e.length,(function(){return"Error in conv2dDerFilter: filterShape must be length 4, but got "+e+"."}));var c="NHWC"===i?u.shape[3]:u.shape[1],l="NHWC"===i?s.shape[3]:s.shape[1];A(c===e[2],(function(){return"Error in conv2dDerFilter: depth of input "+c+") must match input depth in filter ("+e[2]+"."})),A(l===e[3],(function(){return"Error in conv2dDerFilter: depth of dy ("+l+") must match output depth for filter ("+e[3]+")."})),null!=a&&A(O(o),(function(){return"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var f=Ci(i),h=di(u.shape,e,r,1,o,a,!1,f);return Ut.runKernelFunc((function(t){return t.conv2dDerFilter(u,s,h)}),{x4D:u,dy4D:s})}}),jc=Ae({conv2dDerInput_:Uc}),Xc=Ae({depthwiseConv2d_:function(t,n,e,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var u=me(t,"x","depthwiseConv2d"),s=me(n,"filter","depthwiseConv2d"),c=u,l=!1;3===u.rank&&(l=!0,c=u.as4D(1,u.shape[0],u.shape[1],u.shape[2])),A(4===c.rank,(function(){return"Error in depthwiseConv2d: input must be rank 4, but got rank "+c.rank+"."})),A(4===s.rank,(function(){return"Error in depthwiseConv2d: filter must be rank 4, but got rank "+s.rank+"."})),A(c.shape[3]===s.shape[2],(function(){return"Error in depthwiseConv2d: number of input channels ("+c.shape[3]+") must match the inChannels dimension in filter "+s.shape[2]+"."})),null==i&&(i=[1,1]),A(wi(e,i),(function(){return"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+i+"'"})),null!=a&&A(O(r),(function(){return"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var f=di(c.shape,s.shape,e,i,r,a,!0),h=[c,s],d=Ut.runKernelFunc((function(t,n){var e=t.depthwiseConv2D(c,s,f);return n([c,s]),e}),{x:c,filter:s},(function(t,n){A(bi(i),(function(){return"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+i+"'"}));var e=n[0],r=n[1];return{x:function(){return Yc(e.shape,t,r,f)},filter:function(){return $c(e,t,r.shape,f)}}}),"DepthwiseConv2dNative",f,h);return l?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d}}),Yc=Ae({depthwiseConv2dDerInput_:function(t,n,e,r){var o=n,i=!1;3===n.rank&&(i=!0,o=n.as4D(1,n.shape[0],n.shape[1],n.shape[2]));var a=Ut.runKernelFunc((function(t){return t.depthwiseConv2DDerInput(o,e,r)}),{dy4D:o});return i?a.as3D(a.shape[1],a.shape[2],a.shape[3]):a}}),$c=Ae({depthwiseConv2dDerFilter_:function(t,n,e,r){var o=t;3===t.rank&&(o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var i=n;return 3===i.rank&&(i=n.as4D(1,n.shape[0],n.shape[1],n.shape[2])),Ut.runKernelFunc((function(t){return t.depthwiseConv2DDerFilter(o,i,r)}),{x4D:o,dy4D:i})}}),Qc=Ae({separableConv2d_:function(t,n,e,r,o,i,a){void 0===i&&(i=[1,1]),void 0===a&&(a="NHWC");var u=me(t,"x","separableConv2d"),s=me(n,"depthwiseFilter","separableConv2d"),c=me(e,"pointwiseFilter","separableConv2d"),l=u,f=!1;if(3===u.rank&&(f=!0,l=u.as4D(1,u.shape[0],u.shape[1],u.shape[2])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");A(4===l.rank,(function(){return"Error in separableConv2d: input must be rank 4, but got rank "+l.rank+"."})),A(4===s.rank,(function(){return"Error in separableConv2d: depthwise filter must be rank 4, but got rank "+s.rank+"."})),A(4===c.rank,(function(){return"Error in separableConv2d: pointwise filter must be rank 4, but got rank "+s.rank+"."})),A(1===c.shape[0],(function(){return"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got "+c.shape[0]+"."})),A(1===c.shape[1],(function(){return"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got "+c.shape[1]+"."}));var h=s.shape[2],d=s.shape[3];A(c.shape[2]===h*d,(function(){return"Error in separableConv2d: the third dimension of pointwise filter must be "+h*d+", but got "+c.shape[2]+"."}));var p=Xc(l,s,r,o,a,i),v=Hc(p,c,1,"valid",a);return f?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),Jc=Ae({conv2dTranspose_:function(t,n,e,r,o,i){return Uc(e,me(t,"x","conv2dTranspose"),me(n,"filter","conv2dTranspose"),r,o,"NHWC",i)}}),Zc=Ae({conv3dTranspose_:function(t,n,e,r,o){return Vc(e,me(t,"x","conv3dTranspose"),me(n,"filter","conv3dTranspose"),r,o)}}),tl=Ae({matMul_:function(t,n,e,r){var o;void 0===e&&(e=!1),void 0===r&&(r=!1);var i=me(t,"a","matMul"),a=me(n,"b","matMul");o=_t(i,a),i=o[0],a=o[1];var u=e?i.shape[i.rank-2]:i.shape[i.rank-1],s=r?a.shape[a.rank-1]:a.shape[a.rank-2],c=e?i.shape[i.rank-1]:i.shape[i.rank-2],l=r?a.shape[a.rank-2]:a.shape[a.rank-1],f=i.shape.slice(0,-2),h=a.shape.slice(0,-2),d=F(f),p=F(h);A(i.rank>=2&&a.rank>=2&&i.rank===a.rank,(function(){return"Error in matMul: inputs must have the same rank of at least 2, got ranks "+i.rank+" and "+a.rank+"."})),A(_(f,h),(function(){return"Error in matMul: outer dimensions ("+f+") and ("+h+") of Tensors with shapes "+i.shape+" and "+a.shape+" must match."})),A(u===s,(function(){return"Error in matMul: inner shapes ("+u+") and ("+s+") of Tensors with shapes "+i.shape+" and "+a.shape+" and transposeA="+e+" and transposeB="+r+" must match."}));var v=i.shape.slice(0,-2).concat([c,l]),m=e?i.as3D(d,u,c):i.as3D(d,c,u),g=r?a.as3D(p,l,s):a.as3D(p,s,l),y={transposeA:e,transposeB:r};return Ut.runKernelFunc((function(t,n){var o=t.batchMatMul(m,g,e,r);return n([m,g]),o}),{a:m,b:g},(function(t,n){var o=n,i=o[0],a=o[1];return e||r?!e&&r?{a:function(){return t.matMul(a,!1,!1)},b:function(){return t.matMul(i,!0,!1)}}:e&&!r?{a:function(){return a.matMul(t,!1,!0)},b:function(){return i.matMul(t,!1,!1)}}:{a:function(){return a.matMul(t,!0,!0)},b:function(){return t.matMul(i,!0,!0)}}:{a:function(){return t.matMul(a,!1,!0)},b:function(){return i.matMul(t,!0,!1)}}}),"BatchMatMul",y).reshape(v)}}),nl=Ae({dot_:function(t,n){var e=me(t,"t1","dot"),r=me(n,"t2","dot");A(!(1!==e.rank&&2!==e.rank||1!==r.rank&&2!==r.rank),(function(){return"Error in dot: inputs must all be rank 1 or 2, but got ranks "+e.rank+" and "+r.rank+"."}));var o=1===e.rank?e.size:e.shape[1],i=1===r.rank?r.size:r.shape[0];return A(o===i,(function(){return"Error in dot: inner dimensions of inputs must match, but got "+o+" and "+i+"."})),1===e.rank&&1===r.rank?e.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===e.rank&&2===r.rank?e.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===e.rank&&1===r.rank?e.matMul(r.as2D(-1,1)).as1D():e.matMul(r.as2D(r.shape[0],r.shape[1]))}}),el=Ae({outerProduct_:function(t,n){var e=me(t,"v1","outerProduct"),r=me(n,"v2","outerProduct");return A(1===e.rank&&1===r.rank,(function(){return"Error in outerProduct: inputs must be rank 1, but got ranks "+e.rank+" and "+r.rank+"."})),e.as2D(-1,1).matMul(r.as2D(1,-1))}}),rl=Ae({reverse_:function(t,n){var e=me(t,"x","reverse");if(0===e.rank)return e.clone();var r=U(n,e.shape);return Ut.runKernelFunc((function(t){return t.reverse(e,r)}),{$x:e},(function(t){return{$x:function(){return t.reverse(r)}}})).reshapeAs(e)}}),ol=Ae({reverse1d_:function(t){var n=me(t,"x","reverse");return A(1===n.rank,(function(){return"Error in reverse1D: x must be rank 1 but got rank "+n.rank+"."})),rl(n,0)}}),il=Ae({reverse2d_:function(t,n){var e=me(t,"x","reverse");return A(2===e.rank,(function(){return"Error in reverse2D: x must be rank 2 but got rank "+e.rank+"."})),rl(e,n)}}),al=Ae({reverse3d_:function(t,n){var e=me(t,"x","reverse");return A(3===e.rank,(function(){return"Error in reverse3D: x must be rank 3 but got rank "+e.rank+"."})),rl(e,n)}}),ul=Ae({reverse4d_:function(t,n){var e=me(t,"x","reverse");return A(4===e.rank,(function(){return"Error in reverse4D: x must be rank 4 but got rank "+e.rank+"."})),rl(e,n)}});function sl(t,n,e,r,o,i){var a=me(t,"x","maxPool"),u=a,s=!1;3===a.rank&&(s=!0,u=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),null==r&&(r=[1,1]),A(4===u.rank,(function(){return"Error in maxPool: input must be rank 4 but got rank "+u.rank+"."})),A(wi(e,r),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+r+"'"})),null!=i&&A(O(o),(function(){return"Error in maxPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var c=fi(u.shape,n,e,r,o,i);if(1===c.filterWidth&&1===c.filterHeight&&_(c.inShape,c.outShape))return a.clone();var l=[u],f=Ut.runKernelFunc((function(t,n){var e=t.maxPool(u,c);return n([u,e]),e}),{x:u},(function(t,i){var a=i[0],u=i[1];return{x:function(){return function(t,n,e,r,o,i,a,u){var s=me(t,"dy","maxPoolBackprop"),c=me(n,"input","maxPoolBackprop"),l=me(e,"output","maxPoolBackprop");A(c.rank===s.rank,(function(){return"Rank of input ("+c.rank+") does not match rank of dy ("+s.rank+")"})),null==i&&(i=[1,1]),A(wi(o,i),(function(){return"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),A(4===s.rank,(function(){return"Error in maxPoolBackprop: dy must be rank 4 but got rank "+s.rank+"."})),A(4===c.rank,(function(){return"Error in maxPoolBackprop: input must be rank 4 but got rank "+c.rank+"."}));var f=fi(c.shape,r,o,i,a,u);return Ut.runKernelFunc((function(t){return t.maxPoolBackprop(s,c,l,f)}),{$dy:s,$input:c})}(t,a,u,n,e,r,o)}}}),"MaxPool",c,l);return s?f.as3D(f.shape[1],f.shape[2],f.shape[3]):f}function cl(t,n,e,r,o,i){var a=me(t,"x","avgPool","float32");null==r&&(r=[1,1]),A(wi(e,r),(function(){return"Error in avgPool: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+r+"'"}));var u=a,s=!1;3===a.rank&&(s=!0,u=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),A(4===u.rank,(function(){return"Error in avgPool: x must be rank 4 but got rank "+u.rank+"."})),null!=i&&A(O(o),(function(){return"Error in avgPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var c=fi(u.shape,n,e,r,o,i);if(1===c.filterWidth&&1===c.filterHeight&&_(c.inShape,c.outShape))return a.clone();var l=Ut.runKernelFunc((function(t){return t.avgPool(u,c)}),{x:u},(function(t){return{x:function(){return function(t,n,e,r,o,i){var a=me(t,"dy","avgPoolBackprop"),u=me(n,"input","avgPoolBackprop");A(u.rank===a.rank,(function(){return"Rank of input ("+u.rank+") does not match rank of dy ("+a.rank+")"})),null==o&&(o=[1,1]),A(wi(r,o),(function(){return"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"}));var s=u,c=a,l=!1;3===u.rank&&(l=!0,s=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),c=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),A(4===c.rank,(function(){return"Error in avgPoolBackprop: dy must be rank 4 but got rank "+c.rank+"."})),A(4===s.rank,(function(){return"Error in avgPoolBackprop: input must be rank 4 but got rank "+s.rank+"."}));var f=fi(s.shape,e,r,o,i),h=Ut.runKernelFunc((function(t){return t.avgPoolBackprop(c,s,f)}),{dy4D:c,input4D:s});return l?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}(t,u,n,e,r,o)}}}),"AvgPool",c);return l=l.cast(a.dtype),s?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}var ll=Ae({maxPool_:function(t,n,e,r,o){return sl(t,n,e,1,r,o)}}),fl=Ae({avgPool_:function(t,n,e,r,o){return cl(t,n,e,1,r,o)}}),hl=Ae({pool_:function(t,n,e,r,o,i){null==o&&(o=[1,1]),null==i&&(i=1),0===r&&(r="valid");var a=me(t,"x","maxPool"),u=a,s=!1;3===a.rank&&(s=!0,u=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),A(wi(i,o),(function(){return"Error in pool: Either strides or dilations must be 1. Got strides "+i+" and dilations '"+o+"'"}));var c,l=fi(u.shape,n,i,o,r),f=[l.dilationHeight,l.dilationWidth];c="same"===r?function(t,n){var e=t.map((function(t,e){return t+(t-1)*(n[e]-1)})).map((function(t){return t-1})),r=e.map((function(t){return Math.floor(t/2)})),o=e.map((function(t,n){return t-r[n]}));return e.map((function(t,n){return[r[n],o[n]]}))}([l.filterHeight,l.filterWidth],f):[[0,0],[0,0]];var h=1===f[0]&&1===f[1],d=function(t,n,e){var r=e.map((function(t){return t[0]})),o=e.map((function(t){return t[1]})),i=t.concat(r,o),a=n.map((function(t,n){return(t-i[n]%t)%t})),u=o.map((function(t,n){return t+a[n]}));return[n.map((function(t,n){return[r[n],u[n]]})),n.map((function(t,n){return[0,a[n]]}))]}([l.inHeight,l.inWidth],f,c),p=d[0],v=d[1],m=h?r:"valid",g=h?u:cr(u,f,p),y=("avg"===e?function(){return cl(g,n,i,1,m)}:function(){return sl(g,n,i,1,m)})(),x=h?y:rr(y,f,v);return s?x.as3D(x.shape[1],x.shape[2],x.shape[3]):x}}),dl=Ae({maxPool3d_:function(t,n,e,r,o,i,a){void 0===i&&(i="NDHWC");var u=me(t,"x","maxPool3d"),s=u,c=!1;4===u.rank&&(c=!0,s=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3])),null==a&&(a=[1,1,1]),A(5===s.rank,(function(){return"Error in maxPool3d: x must be rank 5 but got rank "+s.rank+"."})),A("NDHWC"===i,(function(){return"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),A(wi(e,a),(function(){return"Error in maxPool3d: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+a+"'"})),null!=o&&A(O(r),(function(){return"Error in maxPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=hi(s.shape,n,e,a,r,o,i),f=Ut.runKernelFunc((function(t,n){var e=t.maxPool3d(s,l);return n([s,e]),e}),{x:s},(function(t,i){var u=i[0],s=i[1];return{x:function(){return function(t,n,e,r,o,i,a,u){var s=me(t,"dy","maxPool3dBackprop"),c=me(n,"input","maxPool3dBackprop"),l=me(e,"output","maxPool3dBackprop"),f=s,h=c,d=l,p=!1;4===c.rank&&(p=!0,f=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]),h=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]),d=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3])),A(5===f.rank,(function(){return"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+f.rank+"."})),A(5===h.rank,(function(){return"Error in maxPool3dBackprop: input must be rank 5 but got rank "+h.rank+"."})),A(5===d.rank,(function(){return"Error in maxPool3dBackprop: output must be rank 5 but got rank "+d.rank+"."})),null==i&&(i=[1,1,1]),A(wi(o,i),(function(){return"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),null!=u&&A(O(a),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+u+" but got pad "+a+"."}));var v=hi(h.shape,r,o,i,a,u),m=Ut.runKernelFunc((function(t){return t.maxPool3dBackprop(f,h,d,v)}),{dy5D:f,input5D:h});return p?m.as4D(m.shape[1],m.shape[2],m.shape[3],m.shape[4]):m}(t,u,s,n,e,a,r,o)}}}));return c?f.as4D(f.shape[1],f.shape[2],f.shape[3],f.shape[4]):f}}),pl=Ae({avgPool3d_:function(t,n,e,r,o,i,a){void 0===i&&(i="NDHWC");var u=me(t,"x","avgPool3d","float32"),s=u,c=!1;4===u.rank&&(c=!0,s=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3])),null==a&&(a=[1,1,1]),A(5===s.rank,(function(){return"Error in avgPool3d: x must be rank 5 but got rank "+s.rank+"."})),A("NDHWC"===i,(function(){return"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),A(wi(e,a),(function(){return"Error in avgPool3d: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+a+"'"})),null!=o&&A(O(r),(function(){return"Error in avgPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=hi(s.shape,n,e,a,r,o,i),f=Ut.runKernelFunc((function(t){return t.avgPool3d(s,l)}),{x:s},(function(t){return{x:function(){return function(t,n,e,r,o,i,a){var u=me(t,"dy","avgPool3dBackprop"),s=me(n,"input","avgPool3dBackprop"),c=u,l=s,f=!1;4===s.rank&&(f=!0,c=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),l=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),A(5===c.rank,(function(){return"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+c.rank+"."})),A(5===l.rank,(function(){return"Error in avgPool3dBackprop: input must be rank 5 but got rank "+l.rank+"."})),null==o&&(o=[1,1,1]),A(wi(r,o),(function(){return"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"})),null!=a&&A(O(i),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+"."}));var h=hi(l.shape,e,r,o,i,a),d=Ut.runKernelFunc((function(t){return t.avgPool3dBackprop(c,l,h)}),{dy5D:c,input5D:l});return f?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}(t,s,n,e,a,r,o)}}}));return f=f.cast(s.dtype),c?f.as4D(f.shape[1],f.shape[2],f.shape[3],f.shape[4]):f}}),vl=Ae({maxPoolWithArgmax_:function(t,n,e,r,o){void 0===o&&(o=!1);var i=me(t,"x","maxPoolWithArgmax"),a={filterSize:n,strides:e,pad:r,includeBatchInIndex:o},u=Ut.runKernel("MaxPoolWithArgmax",{x:i},a);return{result:u[0],indexes:u[1]}}}),ml=Ae({slice_:function(t,n,e){var r,o,i=me(t,"x","slice");if(0===i.rank)throw new Error("Slicing scalar is not possible");(r="number"==typeof n?[n].concat(new Array(i.rank-1).fill(0)):n.length<i.rank?n.concat(new Array(i.rank-n.length).fill(0)):n.slice()).forEach((function(t){A(-1!==t,(function(){return"slice() does not support negative begin indexing."}))})),o=(o=null==e?new Array(i.rank).fill(-1):"number"==typeof e?[e].concat(new Array(i.rank-1).fill(-1)):e.length<i.rank?e.concat(new Array(i.rank-e.length).fill(-1)):e).map((function(t,n){return t>=0?t:(A(-1===t,(function(){return"Negative size values should be exactly -1 but got "+t+" for the slice() size at index "+n+"."})),i.shape[n]-r[n])})),Ho(i,r,o);var a=i.shape,u={begin:r,size:o};return Ut.runKernelFunc((function(t){return t.slice(i,r,o)}),{x:i},(function(t){for(var n=[],e=0;e<t.rank;e++)n.push([r[e],a[e]-r[e]-o[e]]);return{x:function(){return oc(t,n)}}}),"Slice",u)}}),gl=Ae({slice1d_:function(t,n,e){var r=me(t,"x","slice1d");return A(1===r.rank,(function(){return"slice1d expects a rank-1 tensor, but got a rank-"+r.rank+" tensor"})),ml(r,[n],[e])}}),yl=Ae({slice2d_:function(t,n,e){var r=me(t,"x","slice2d");return A(2===r.rank,(function(){return"slice2d expects a rank-2 tensor, but got a rank-"+r.rank+" tensor"})),ml(r,n,e)}}),xl=Ae({slice3d_:function(t,n,e){var r=me(t,"x","slice3d");return A(3===r.rank,(function(){return"slice3d expects a rank-3 tensor, but got a rank-"+r.rank+" tensor"})),ml(r,n,e)}}),bl=Ae({slice4d_:function(t,n,e){var r=me(t,"x","slice4d");return A(4===r.rank,(function(){return"slice4d expects a rank-4 tensor, but got a rank-"+r.rank+" tensor"})),ml(r,n,e)}});function wl(t,n,e,r,o){return n.rank<e.rank&&(n=n.reshape(we(n.shape,r))),t.rank<e.rank&&(t=t.reshape(we(t.shape,r))),{x:function(){var r=t.mul(e.equal(n).cast(t.dtype));return null==o?r:r.transpose(o)}}}var Cl=Ae({all_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","all","bool"),o=U(n,r.shape),i=o,a=Ee(i,r.rank);null!=a&&(r=r.transpose(a),i=Ie(i.length,r.rank));var u=Ut.runKernelFunc((function(t){return t.all(r,i)}),{$x:r});if(e){var s=we(u.shape,o);return u.reshape(s)}return u}}),El=Ae({any_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","any","bool"),o=U(n,r.shape),i=o,a=Ee(i,r.rank);null!=a&&(r=r.transpose(a),i=Ie(i.length,r.rank));var u=Ut.runKernelFunc((function(t){return t.any(r,i)}),{$x:r});if(e){var s=we(u.shape,o);return u.reshape(s)}return u}}),Rl=Ae({argMax_:function(t,n){void 0===n&&(n=0);var e=me(t,"x","argMax");null==n&&(n=0);var r=U(n,e.shape),o=Ee(r,e.rank);null!=o&&(e=e.transpose(o),r=Ie(r.length,e.rank));var i={axis:r[0]},a=[e];return Ut.runKernelFunc((function(t,n){var o=t.argMax(e,r[0]);return n([e]),o}),{x:e},(function(t,n){var e=n[0];return{x:function(){return Xe(e)}}}),"ArgMax",i,a)}}),Il=Ae({argMin_:function(t,n){void 0===n&&(n=0);var e=me(t,"x","argMin");null==n&&(n=0);var r=U(n,e.shape),o=Ee(r,e.rank);return null!=o&&(e=e.transpose(o),r=Ie(r.length,e.rank)),Ut.runKernelFunc((function(t,n){var o=t.argMin(e,r[0]);return n([e]),o}),{$x:e},(function(t,n){var e=n[0];return{$x:function(){return Xe(e)}}}))}}),kl=Ae({logSumExp_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","logSumExp"),o=U(n,r.shape),i=r.max(o,!0),a=r.sub(i).exp().sum(o).log(),u=i.reshape(a.shape).add(a);if(e){var s=we(u.shape,o);return u.reshape(s)}return u}}),Sl=Ae({max_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","max"),o=r,i=U(n,r.shape),a=i,u=Ee(a,r.rank);null!=u&&(r=r.transpose(u),a=Ie(a.length,r.rank));var s=[r],c=Ut.runKernelFunc((function(t,n){var e=t.max(r,a);return n([o,e]),e}),{x:r},(function(t,n){return wl(t,n[1],n[0],i,u)}),"Max",{axes:a},s,[!0]);if(e){var l=we(c.shape,i);c=c.reshape(l)}return c}}),Al=Ae({mean_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","mean"),o=U(n,r.shape),i=F(be(r.shape,o)[1]);return ri((function(t){var r=Oe(i);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(n,e),gradFunc:function(n){var e=t.shape.slice();return o.forEach((function(t){e[t]=1})),n.reshape(e).mul(Ve(t.shape,"float32")).div(i)}}}))(r)}}),Tl=Ae({min_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","min"),o=r,i=U(n,r.shape),a=i,u=Ee(a,r.rank);null!=u&&(r=r.transpose(u),a=Ie(a.length,r.rank));var s=[r],c=Ut.runKernelFunc((function(t,n){var e=t.min(r,a);return n([o,e]),e}),{x:r},(function(t,n){return wl(t,n[1],n[0],i,u)}),"Min",{axes:a},s,[!0]);if(e){var l=we(c.shape,i);c=c.reshape(l)}return c}}),Dl=Ae({moments_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=U(n,(t=me(t,"x","moments")).shape),o=t.mean(r,e),i=o.shape;e||(i=we(o.shape,r));var a=t.toFloat().sub(o.reshape(i)).square();return{mean:o,variance:a.mean(r,e)}}}),Nl=Ae({sum_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());var o=U(n,r.shape);return ri((function(t){var n=Ee(o,t.rank),r=o,i=t;null!=n&&(i=t.transpose(n),r=Ie(r.length,t.rank));var a=function(n){var e=t.shape.slice();return o.forEach((function(t){e[t]=1})),n.reshape(e).mul(Ve(t.shape,"float32"))},u={axes:r},s=Ut.runKernelFunc((function(t){return t.sum(i,r)}),{x:i},(function(t){return{x:function(){return a(t)}}}),"Sum",u);if(e){var c=we(s.shape,o);s=s.reshape(c)}return{value:s,gradFunc:a}}))(r)}}),Fl=Ae({prod_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","prod");"bool"===r.dtype&&(r=r.toInt());var o=U(n,r.shape),i=Ee(o,r.rank),a=o,u=r;null!=i&&(u=r.transpose(i),a=Ie(a.length,r.rank));var s=Ut.runKernelFunc((function(t){return t.prod(u,a)}),{permutedX:u});if(e){var c=we(s.shape,o);s=s.reshape(c)}return s}}),_l=Ae({elu_:function(t){var n=me(t,"x","elu");return Ut.runKernelFunc((function(t,e){var r=t.elu(n);return e([r]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return Ut.runKernelFunc((function(n){return n.eluDer(t,e)}),{dy:t,y:e})}}}))}}),Ol=Ae({leakyRelu_:function(t,n){void 0===n&&(n=.2);var e=me(t,"x","leakyRelu");return Eo(Oe(n).mul(e),e)}}),Ml=Ae({prelu_:function(t,n){var e=me(t,"x","prelu"),r=me(n,"alpha","prelu");return Ut.runKernelFunc((function(t,n){var o=t.prelu(e,r);return n([e,r]),o}),{x:e,alpha:r},(function(t,n){var e=n[0],r=n[1],o=e.greater(0);return{x:function(){return Qs(o,t,t.mul(r))},alpha:function(){var n=Qs(o,Xe(t),t.mul(e)),i=Br(r.shape,t.shape);return i.length>0&&(n=n.sum(i)),n.reshape(r.shape)}}}),"Prelu")}}),Bl=Ae({relu_:function(t){var n=me(t,"x","relu");return"bool"===n.dtype?n.toInt():Ut.runKernelFunc((function(t,e){var r=t.relu(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return t.mulStrict(e.step().toFloat())}}}),"Relu")}}),Pl=Ae({relu6_:function(t){var n=me(t,"x","relu6");return"bool"===n.dtype?n.toInt():Ut.runKernelFunc((function(t,e){var r=t.relu6(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0],r=e.lessEqual(6).mul(e.step());return{x:function(){return t.mulStrict(r.toFloat())}}}),"Relu6")}}),Ll=Ae({selu_:function(t){var n=me(t,"x","selu");return Ut.runKernelFunc((function(t,e){var r=t.selu(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){var n=e.greater(Oe(0)),r=Oe(Ju),o=Oe(Zu),i=t.mul(o),a=t.mul(r).mul(e.toFloat().exp());return Qs(n,i,a)}}}))}}),Wl=Ae({localResponseNormalization_:function(t,n,e,r,o){void 0===n&&(n=5),void 0===e&&(e=1),void 0===r&&(r=1),void 0===o&&(o=.5);var i=me(t,"x","localResponseNormalization");A(4===i.rank||3===i.rank,(function(){return"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank "+i.rank+"."})),A(O(n),(function(){return"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius "+n+"."}));var a=i,u=!1;3===i.rank&&(u=!0,a=i.as4D(1,i.shape[0],i.shape[1],i.shape[2]));var s=Ut.runKernelFunc((function(t,i){var u=t.localResponseNormalization4D(a,n,e,r,o);return i([a,u]),u}),{x4D:a},(function(t,i){var a=i[0],u=i[1];return{x4D:function(){return Ut.runKernelFunc((function(i){return i.LRNGrad(t,a,u,n,e,r,o)}),{})}}}));return u?s.as3D(s.shape[1],s.shape[2],s.shape[3]):s}}),Ul=Ae({norm_:function(t,n,e,r){void 0===n&&(n="euclidean"),void 0===e&&(e=null),void 0===r&&(r=!1);var o=function t(n,e,r){if(void 0===r&&(r=null),0===n.rank)return n.abs();if(1!==n.rank&&null===r)return t(n.reshape([-1]),e,r);if(1===n.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===e)return n.abs().sum(r);if(e===1/0)return n.abs().max(r);if(e===-1/0)return n.abs().min(r);if("euclidean"===e||2===e)return n.abs().pow(Oe(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+e)}if(Array.isArray(r)&&2===r.length){if(1===e)return n.abs().sum(r[0]).max(r[1]-1);if(e===1/0)return n.abs().sum(r[1]).max(r[0]);if(e===-1/0)return n.abs().sum(r[1]).min(r[0]);if("fro"===e||"euclidean"===e)return n.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+e)}throw new Error("Error in norm: invalid axis: "+r)}(t=me(t,"x","norm"),n,e),i=o.shape;if(r){var a=U(e,t.shape);i=we(o.shape,a)}return o.reshape(i)}}),zl=Ae({basicLSTMCell_:function(t,n,e,r,o,i){var a=me(t,"forgetBias","basicLSTMCell"),u=me(n,"lstmKernel","basicLSTMCell"),s=me(e,"lstmBias","basicLSTMCell"),c=me(r,"data","basicLSTMCell"),l=me(o,"c","basicLSTMCell"),f=me(i,"h","basicLSTMCell"),h=c.concat(f,1).matMul(u).add(s),d=h.shape[0],p=h.shape[1]/4,v=[d,p],m=h.slice([0,0],v),g=h.slice([0,p],v),y=h.slice([0,2*p],v),x=h.slice([0,3*p],v),b=m.sigmoid().mulStrict(g.tanh()).addStrict(l.mulStrict(a.add(y).sigmoid())),w=b.tanh().mulStrict(x.sigmoid());return[b,w]}}),Vl=Ae({multiRNNCell_:function(t,n,e,r){for(var o=me(n,"data","multiRNNCell"),i=ge(e,"c","multiRNNCell"),a=ge(r,"h","multiRNNCell"),u=o,s=[],c=0;c<t.length;c++){var l=t[c](u,i[c],a[c]);s.push(l[0]),s.push(l[1]),u=l[1]}var f=[],h=[];for(c=0;c<s.length;c+=2)f.push(s[c]),h.push(s[c+1]);return[f,h]}}),Gl=Ae({movingAverage_:function(t,n,e,r,o){void 0===o&&(o=!0);var i=me(t,"v","movingAverage"),a=me(n,"x","movingAverage"),u=me(e,"decay","movingAverage");Ot(i,a),A(_(i.shape,a.shape),(function(){return"Shape mismatch in v and x"}));var s=Oe(1),c=s.sub(u),l=a.sub(i).mul(c);if(o){A(null!=r,(function(){return"When using zeroDebias: true, step is required."}));var f=me(r,"step","movingAverage");l=l.div(s.sub(No(u,f)))}return i.add(l)}}),Hl=Ae({stridedSlice_:function(t,n,e,r,o,i,a,u,s){if(void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===u&&(u=0),void 0===s&&(s=0),null==r&&(r=new Array(n.length)),0!==a)throw new Error("ellipsis mask is not yet supported");var c=me(t,"x","stridedSlice"),l=qo(u),f=c.shape.slice();l.forEach((function(t){n[t]=0,e[t]=1,f.splice(t,0,1)})),c=c.reshape(f);for(var h=0;h<c.rank;h++)n[h]=jo(o,n,r,c.shape,h),e[h]=Xo(i,e,r,c.shape,h),r[h]=r[h]||1;var d=qo(s);d.forEach((function(t){e[t]=n[t]+1,r[t]=1}));var p=Ko(n,e,r),v=p.filter((function(t,n){return-1===d.indexOf(n)}));return r.every((function(t){return 1===t}))?ml(c,n,p).reshape(v):Ut.runKernelFunc((function(t){return t.stridedSlice(c,n,e,r)}),{$x:c}).reshape(v)}}),ql=Ae({topk_:function(t,n,e){void 0===n&&(n=1),void 0===e&&(e=!0);var r=me(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");var o=r.shape[r.shape.length-1];if(n>o)throw new Error("'k' passed to topk() must be <= the last dimension ("+o+") but got "+n);var i=Ut.runKernelFunc((function(t){return t.topk(r,n,e)}),{$x:r});return{values:i[0],indices:i[1]}}}),Kl=Ae({scatterND_:function(t,n,e){var r=me(t,"indices","scatterND","int32"),o=me(n,"updates","scatterND");return zo(o,r,e),Ut.runKernelFunc((function(t){return t.scatterND(r,o,e)}),{indices:r,updates:o},null,"ScatterNd",{shape:e})}}),jl=Ae({fft_:function(t){A("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.fft() must be complex64 but got "+t.dtype+"."}));var n=t.shape[t.shape.length-1],e=t.size/n,r=t.as2D(e,n);return Ut.runKernelFunc((function(t){return t.fft(r)}),{input:t}).reshape(t.shape)}}),Xl=Ae({ifft_:function(t){A("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.ifft() must be complex64 but got "+t.dtype+"."}));var n=t.shape[t.shape.length-1],e=t.size/n,r=t.as2D(e,n);return Ut.runKernelFunc((function(t){return t.ifft(r)}),{input:t}).reshape(t.shape)}}),Yl=Ae({rfft_:function(t,n){A("float32"===t.dtype,(function(){return"The dtype for rfft() must be real value but got "+t.dtype}));var e,r=t.shape[t.shape.length-1],o=t.size/r;if(null!=n&&n<r){var i=t.shape.map((function(t){return 0})),a=t.shape.map((function(t){return t}));a[t.shape.length-1]=n,e=t.slice(i,a),r=n}else if(null!=n&&n>r){var u=t.shape.map((function(t){return t}));u[t.shape.length-1]=n-r,e=t.concat(Ge(u),t.shape.length-1),r=n}else e=t;var s=e.zerosLike(),c=Te(e,s).as2D(o,r),l=jl(c),f=Math.floor(r/2)+1,h=De(l),d=Ne(l),p=h.split([f,r-f],h.shape.length-1),v=d.split([f,r-f],d.shape.length-1),m=e.shape.slice();return m[e.shape.length-1]=f,Te(p[0],v[0]).reshape(m)}}),$l=Ae({irfft_:function(t){var n=t.shape[t.shape.length-1],e=t.size/n;if(n<=2){var r=t.as2D(e,n),o=Xl(r);return De(o)}var i=[e,2*(n-1)],a=De(t).as2D(e,n),u=Ne(t).as2D(e,n),s=a.slice([0,1],[e,n-2]).reverse(1),c=u.slice([0,1],[e,n-2]).reverse(1).mul(Oe(-1)),l=a.concat(s,1),f=u.concat(c,1);return r=Te(l,f).as2D(i[0],i[1]),o=Xl(r),De(o)}}),Ql=Object.freeze({fft:jl,ifft:Xl,rfft:Yl,irfft:$l}),Jl=Ae({sparseToDense_:function(t,n,e,r){void 0===r&&(r=0);var o=me(t,"sparseIndices","sparseToDense","int32"),i=me(n,"sparseValues","sparseToDense"),a=me(r,"defaultValue","sparseToDense",i.dtype);return function(t,n,e,r){if("int32"!==t.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was "+t.dtype+".");if(t.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape "+t.shape+".");var o=t.rank>0?t.shape[0]:1,i=t.rank>1?t.shape[1]:1;if(e.length!==i)throw new Error("outputShape has incorrect number of elements:, "+e.length+", should be: "+i+".");var a=n.size;if(0!==n.rank&&(1!==n.rank||a!==o))throw new Error("sparseValues has incorrect shape "+n.shape+", should be [] or ["+o+"]");if(n.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,i,e,a),Ut.runKernelFunc((function(t){return t.sparseToDense(o,i,e,a)}),{$sparseIndices:o,$sparseValues:i,$defaultValue:a})}}),Zl=Ae({gatherND_:function(t,n){var e=me(n,"indices","gatherND","int32"),r=me(t,"x","gatherND");return Ut.runKernelFunc((function(t){return t.gatherND(r,e)}),{x:r,indices:e},null,"GatherNd")}}),tf=Ae({diag_:function(t){var n=me(t,"x","diag").flatten(),e=t.shape.concat(t.shape);return Ut.runKernelFunc((function(t){return t.diag(n)}),{$x:n}).reshape(e)}}),nf=Ae({dropout_:function(t,n,e,r){var o=me(t,"x","dropout");if(A("float32"===o.dtype,(function(){return"x has to be a floating point tensor since it's going to be scaled, but got a "+o.dtype+" tensor instead."})),A(n>=0&&n<1,(function(){return"rate must be a float in the range [0, 1), but got "+n+"."})),0===n)return t instanceof Et?o.clone():o;var i=function(t,n){if(null==n)return t.shape.slice();if(_(t.shape,n))return n;if(t.shape.length===n.length){for(var e=[],r=0;r<t.shape.length;r++)null==n[r]&&null!=t.shape[r]?e.push(t.shape[r]):e.push(n[r]);return e}return n}(o,e),a=1-n,u=xc(i,0,1,"float32",r).add(a).floor().div(a);return o.mul(u)}});function ef(t,n,e){for(var r=1-t%2,o=new Float32Array(t),i=0;i<t;++i){var a=2*Math.PI*i/(t+r-1);o[i]=n-e*Math.cos(a)}return Me(o,"float32")}var rf,of=Ae({hannWindow_:function(t){return ef(t,.5,.5)}}),af=Ae({hammingWindow_:function(t){return ef(t,.54,.46)}}),uf=Ae({frame_:function(t,n,e,r,o){void 0===r&&(r=!1),void 0===o&&(o=0);for(var i=0,a=[];i+n<=t.size;)a.push(ml(t,i,n)),i+=e;if(r)for(;i<t.size;){var u=i+n-t.size,s=Ye([ml(t,i,n-u),He([u],o)]);a.push(s),i+=e}return 0===a.length?Be([],[0,n]):Ye(a).as2D(a.length,n)}}),sf=Ae({stft_:function(t,n,e,r,o){var i;void 0===o&&(o=of),null==r&&(i=n,r=Math.floor(Math.pow(2,Math.ceil(Math.log(i)/Math.log(2)))));for(var a=uf(t,n,e),u=To(a,o(n)),s=[],c=0;c<a.shape[0];c++)s.push(Yl(u.slice([c,0],[1,n]),r));return Ye(s)}}),cf=Object.freeze({hannWindow:of,hammingWindow:af,frame:uf,stft:sf}),lf=function(t,n,e){return void 0===e&&(e=1),s(this,void 0,void 0,(function(){var r,o,i,a,u,s,l,f,h,d,p,v,m,g;return c(this,(function(c){switch(c.label){case 0:return r=me(t,"predictions","inTopK"),o=me(n,"targets","inTopK"),A(r.rank>1,(function(){return"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank})),A(r.rank-1===o.rank,(function(){return"predictions rank should be 1 larger than targets rank, but got predictions rank "+r.rank+" and targets rank "+o.rank})),T(r.shape.slice(0,r.shape.length-1),o.shape,"predictions's shape should be align with the targets' shape, except the last dimension."),i=r.shape[r.shape.length-1],A(e>0&&e<=i,(function(){return"'k' passed to inTopK() must be > 0 && <= the predictions last dimension ("+i+"), but got "+e})),[4,r.data()];case 1:return a=c.sent(),[4,o.data()];case 2:for(u=c.sent(),s=[a.length/i,i],f=s[1],h=V("bool",l=s[0]),d=0;d<l;d++){for(p=d*f,v=a.subarray(p,p+f),m=[],g=0;g<v.length;g++)m.push({value:v[g],index:g});for(m.sort((function(t,n){return n.value-t.value})),h[d]=0,g=0;g<e;g++)if(m[g].index===u[d]){h[d]=1;break}}return t!==r&&r.dispose(),n!==o&&o.dispose(),[2,Fe(h,o.shape,"bool")]}}))}))};!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(rf||(rf={}));var ff=Ae({absoluteDifference_:function(t,n,e,r){void 0===r&&(r=rf.SUM_BY_NONZERO_WEIGHTS);var o=me(t,"labels","absoluteDifference"),i=me(n,"predictions","absoluteDifference"),a=null;null!=e&&(a=me(e,"weights","absoluteDifference")),T(o.shape,i.shape,"Error in absoluteDifference: ");var u=o.sub(i).abs();return hf(u,a,r)}}),hf=Ae({computeWeightedLoss_:function(t,n,e){void 0===e&&(e=rf.SUM_BY_NONZERO_WEIGHTS);var r=me(t,"losses","computeWeightedLoss"),o=null;null!=n&&(o=me(n,"weights","computeWeightedLoss"));var i=null==o?r:r.mul(o);if(e===rf.NONE)return i;if(e===rf.SUM)return i.sum();if(e===rf.MEAN){if(null==o)return i.mean();var a=r.size/o.size,u=i.sum().div(o.sum());return a>1?u.div(Oe(a)):u}if(e===rf.SUM_BY_NONZERO_WEIGHTS){if(null==o)return i.sum().div(Oe(r.size));var s=o.mul(Ve(r.shape)).notEqual(Oe(0)).sum().toFloat();return i.sum().div(s)}throw Error("Unknown reduction: "+e)}}),df=Ae({cosineDistance_:function(t,n,e,r,o){void 0===o&&(o=rf.SUM_BY_NONZERO_WEIGHTS);var i=me(t,"labels","cosineDistance"),a=me(n,"predictions","cosineDistance"),u=null;null!=r&&(u=me(r,"weights","cosineDistance")),T(i.shape,a.shape,"Error in cosineDistance: ");var s=Oe(1).sub(i.mul(a).sum(e,!0));return hf(s,u,o)}}),pf=Ae({hingeLoss_:function(t,n,e,r){void 0===r&&(r=rf.SUM_BY_NONZERO_WEIGHTS);var o=me(t,"labels","hingeLoss"),i=me(n,"predictions","hingeLoss"),a=null;null!=e&&(a=me(e,"weights","hingeLoss")),T(o.shape,i.shape,"Error in hingeLoss: ");var u=Oe(1);o=Oe(2).mul(o).sub(u);var s=u.sub(o.mul(i)).relu();return hf(s,a,r)}}),vf=Ae({huberLoss_:function(t,n,e,r,o){void 0===r&&(r=1),void 0===o&&(o=rf.SUM_BY_NONZERO_WEIGHTS);var i=me(t,"labels","huberLoss"),a=me(n,"predictions","huberLoss"),u=null;null!=e&&(u=me(e,"weights","huberLoss")),T(i.shape,a.shape,"Error in huberLoss: ");var s=Oe(r),c=a.sub(i).abs(),l=Io(c,s),f=c.sub(l),h=Oe(.5).mul(l.square()).add(s.mul(f));return hf(h,u,o)}}),mf=Ae({logLoss_:function(t,n,e,r,o){void 0===r&&(r=1e-7),void 0===o&&(o=rf.SUM_BY_NONZERO_WEIGHTS);var i=me(t,"labels","logLoss"),a=me(n,"predictions","logLoss"),u=null;null!=e&&(u=me(e,"weights","logLoss")),T(i.shape,a.shape,"Error in logLoss: ");var s=Oe(1),c=Oe(r),l=i.mul(a.add(c).log()).neg().sub(s.sub(i).mul(s.sub(a).add(c).log()));return hf(l,u,o)}}),gf=Ae({meanSquaredError_:function(t,n,e,r){void 0===r&&(r=rf.SUM_BY_NONZERO_WEIGHTS);var o=me(t,"labels","meanSquaredError"),i=me(n,"predictions","meanSquaredError"),a=null;null!=e&&(a=me(e,"weights","meanSquaredError")),T(o.shape,i.shape,"Error in meanSquaredError: ");var u=o.squaredDifference(i);return hf(u,a,r)}}),yf=Ae({sigmoidCrossEntropy_:function(t,n,e,r,o){void 0===r&&(r=0),void 0===o&&(o=rf.SUM_BY_NONZERO_WEIGHTS);var i=me(t,"multiClassLabels","sigmoidCrossEntropy"),a=me(n,"logits","sigmoidCrossEntropy"),u=null;if(null!=e&&(u=me(e,"weights","sigmoidCrossEntropy")),T(i.shape,a.shape,"Error in sigmoidCrossEntropy: "),r>0){var s=Oe(r),c=Oe(1),l=Oe(.5);i=i.mul(c.sub(s)).add(l.mul(s))}var f=function(t,n){var e=me(t,"labels","sigmoidCrossEntropyWithLogits"),r=me(n,"logits","sigmoidCrossEntropyWithLogits");T(e.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");var o=r.relu(),i=r.mul(e),a=r.abs().neg().exp().log1p();return o.sub(i).add(a)}(i,a);return hf(f,u,o)}}),xf=Ae({softmaxCrossEntropy_:function(t,n,e,r,o){void 0===r&&(r=0),void 0===o&&(o=rf.SUM_BY_NONZERO_WEIGHTS);var i=me(t,"onehotLabels","softmaxCrossEntropy"),a=me(n,"logits","softmaxCrossEntropy"),u=null;if(null!=e&&(u=me(e,"weights","softmaxCrossEntropy")),T(i.shape,a.shape,"Error in softmaxCrossEntropy: "),r>0){var s=Oe(r),c=Oe(1),l=Oe(i.shape[1]);i=i.mul(c.sub(s)).add(s.div(l))}var f=function(t,n,e){if(void 0===e&&(e=-1),-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank "+n.rank+" and dim was "+e);return ri((function(t,n,r){var o=n.logSumExp([e],!0),i=n.toFloat().sub(o);return r([t,i]),{value:i.mul(t).neg().sum([e]),gradFunc:function(t,n){var r=n[0],o=n[1],i=we(t.shape,[e]);return[t.reshape(i).mul(r.toFloat().sub(o.exp())),t.reshape(i).mul(o.exp().sub(r.toFloat()))]}}}))(t,n)}(i,a);return hf(f,u,o)}}),bf=Object.freeze({get Reduction(){return rf},absoluteDifference:ff,computeWeightedLoss:hf,cosineDistance:df,hingeLoss:pf,huberLoss:vf,logLoss:mf,meanSquaredError:gf,sigmoidCrossEntropy:yf,softmaxCrossEntropy:xf});function wf(t,n){return void 0===n&&(n=!1),Ut.tidy((function(){if(2!==t.shape.length)throw new Error("qr2d() requires a 2D Tensor, but got a "+t.shape.length+"D Tensor.");for(var e=t.shape[0],r=t.shape[1],o=nc(e),i=t.clone(),a=Be([[1]],[1,1]),u=a.clone(),s=e>=r?r:e,c=function(t){var n,s=i,c=u,l=o;n=Ut.tidy((function(){var n=i.slice([t,t],[e-t,1]),s=n.norm(),c=i.slice([t,t],[1,1]),l=Be([[-1]]).where(c.greater(0),Be([[1]])),f=c.sub(l.mul(s)),h=n.div(f);u=1===h.shape[0]?a.clone():a.concat(h.slice([1,0],[h.shape[0]-1,h.shape[1]]),0);var d=l.matMul(f).div(s).neg(),p=i.slice([t,0],[e-t,r]),v=d.mul(u),m=u.transpose();if(0===t)i=p.sub(v.matMul(m.matMul(p)));else{var g=p.sub(v.matMul(m.matMul(p)));i=i.slice([0,0],[t,r]).concat(g,0)}var y=v.transpose(),x=o.slice([0,t],[e,o.shape[1]-t]);if(0===t)o=x.sub(x.matMul(u).matMul(y));else{var b=x.sub(x.matMul(u).matMul(y));o=o.slice([0,0],[e,t]).concat(b,1)}return[u,i,o]})),u=n[0],i=n[1],o=n[2],ne([s,c,l])},l=0;l<s;++l)c(l);return!n&&e>r&&(o=o.slice([0,0],[e,r]),i=i.slice([0,0],[r,r])),[o,i]}))}var Cf=Ae({bandPart_:function(t,n,e){if(n%1!=0)throw new Error("bandPart(): numLower must be an integer, got "+n+".");if(e%1!=0)throw new Error("bandPart(): numUpper must be an integer, got "+e+".");var r=me(t,"a","bandPart");if(r.rank<2)throw new Error("bandPart(): Rank must be at least 2, got "+r.rank+".");var o=r.shape,i=r.shape.slice(-2),a=i[0],u=i[1];if(!(n<=a))throw new Error("bandPart(): numLower ("+n+") must not be greater than the number of rows ("+a+").");if(!(e<=u))throw new Error("bandPart(): numUpper ("+e+") must not be greater than the number of columns ("+u+").");n<0&&(n=a),e<0&&(e=u);var s=Ke(0,a,1,"int32").reshape([-1,1]),c=Ke(0,u,1,"int32"),l=Oo(s,c),f=js(l.lessEqual(Oe(+n,"int32")),l.greaterEqual(Oe(-e,"int32"))),h=Ge([a,u],r.dtype);return fr(hr(r.reshape([-1,a,u])).map((function(t){return Qs(f,t,h)}))).reshape(o)}}),Ef=Ae({gramSchmidt_:function(t){var n;if(Array.isArray(t)){n=!1,A(null!=t&&t.length>0,(function(){return"Gram-Schmidt process: input must not be null, undefined, or empty"}));for(var e=t[0].shape[0],r=function(n){A(t[n].shape[0]===e,(function(){return"Gram-Schmidt: Non-unique lengths found in the input vectors: ("+t[n].shape[0]+" vs. "+e+")"}))},o=1;o<t.length;++o)r(o)}else n=!0,t=tr(t,t.shape[0],0).map((function(t){return lr(t,[0])}));A(t.length<=t[0].shape[0],(function(){return"Gram-Schmidt: Number of vectors ("+t.length+") exceeds number of dimensions ("+t[0].shape[0]+")."}));var i=[],a=t,u=function(t){i.push(Ut.tidy((function(){var n=a[t];if(t>0)for(var e=0;e<t;++e){var r=Nl(i[e].mulStrict(n)).mul(i[e]);n=n.sub(r)}return n.div(Ul(n,"euclidean"))})))};for(o=0;o<t.length;++o)u(o);return n?fr(i,0):i}}),Rf=Ae({qr_:function(t,n){if(void 0===n&&(n=!1),t.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+t.rank);if(2===t.rank)return wf(t,n);var e=t.shape.slice(0,t.shape.length-2).reduce((function(t,n){return t*n})),r=hr(t.reshape([e,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],i=[];return r.forEach((function(t){var e=wf(t,n),r=e[0],a=e[1];o.push(r),i.push(a)})),[fr(o,0).reshape(t.shape),fr(i,0).reshape(t.shape)]}}),If=Object.freeze({bandPart:Cf,gramSchmidt:Ef,qr:Rf});function kf(t,n,e,r,o,i){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==i&&(i=0);var a=t.shape[0];return e=Math.min(e,a),A(0<=r&&r<=1,(function(){return"iouThreshold must be in [0, 1], but was '"+r+"'"})),A(2===t.rank,(function(){return"boxes must be a 2D tensor, but was of rank '"+t.rank+"'"})),A(4===t.shape[1],(function(){return"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]})),A(1===n.rank,(function(){return"scores must be a 1D tensor"})),A(n.shape[0]===a,(function(){return"scores has incompatible shape with boxes. Expected "+a+", but was "+n.shape[0]})),A(0<=i&&i<=1,(function(){return"softNmsSigma must be in [0, 1], but was '"+i+"'"})),{maxOutputSize:e,iouThreshold:r,scoreThreshold:o,softNmsSigma:i}}var Sf=Ae({resizeBilinear_:function(t,n,e){void 0===e&&(e=!1);var r=me(t,"images","resizeBilinear");A(3===r.rank||4===r.rank,(function(){return"Error in resizeBilinear: x must be rank 3 or 4, but got rank "+r.rank+"."})),A(2===n.length,(function(){return"Error in resizeBilinear: new shape must 2D, but got shape "+n+"."}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=n[0],u=n[1],s=Ut.runKernelFunc((function(t,n){return n([o]),t.resizeBilinear(o,a,u,e)}),{x:o},(function(t,n){return{x:function(){return Ut.runKernelFunc((function(r){return r.resizeBilinearBackprop(t,n[0],e)}),{})}}}),"ResizeBilinear",{alignCorners:e,newHeight:a,newWidth:u});return i?s.as3D(s.shape[1],s.shape[2],s.shape[3]):s}}),Af=Ae({resizeNearestNeighbor_:function(t,n,e){void 0===e&&(e=!1);var r=me(t,"images","resizeNearestNeighbor");A(3===r.rank||4===r.rank,(function(){return"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank "+r.rank+"."})),A(2===n.length,(function(){return"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+n+"."})),A("float32"===r.dtype||"int32"===r.dtype,(function(){return"`images` must have `int32` or `float32` as dtype"}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=n[0],u=n[1],s=Ut.runKernelFunc((function(t,n){return n([o]),t.resizeNearestNeighbor(o,a,u,e)}),{batchImages:o},(function(t,n){return{batchImages:function(){return Ut.runKernelFunc((function(r){return r.resizeNearestNeighborBackprop(t,n[0],e)}),{})}}}));return i?s.as3D(s.shape[1],s.shape[2],s.shape[3]):s}}),Tf=Ae({nonMaxSuppression_:function(t,n,e,r,o){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY);var i=me(t,"boxes","nonMaxSuppression"),a=me(n,"scores","nonMaxSuppression"),u=kf(i,a,e,r,o);e=u.maxOutputSize,r=u.iouThreshold,o=u.scoreThreshold;var s={maxOutputSize:e,iouThreshold:r,scoreThreshold:o};return Ut.runKernelFunc((function(t){return t.nonMaxSuppression(i,a,e,r,o)}),{boxes:i,scores:a},null,"NonMaxSuppressionV3",s)}}),Df=Ae({nonMaxSuppressionWithScore_:function(t,n,e,r,o,i){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===i&&(i=0);var a=me(t,"boxes","nonMaxSuppression"),u=me(n,"scores","nonMaxSuppression"),s=kf(a,u,e,r,o,i),c={maxOutputSize:e=s.maxOutputSize,iouThreshold:r=s.iouThreshold,scoreThreshold:o=s.scoreThreshold,softNmsSigma:i=s.softNmsSigma},l=Ut.runKernel("NonMaxSuppressionV5",{boxes:a,scores:u},c);return{selectedIndices:l[0],selectedScores:l[1]}}}),Nf=Ae({cropAndResize_:function(t,n,e,r,o,i){var a=me(t,"image","cropAndResize"),u=me(n,"boxes","cropAndResize","float32"),s=me(e,"boxInd","cropAndResize","int32");o=o||"bilinear",i=i||0;var c=u.shape[0];return A(4===a.rank,(function(){return"Error in cropAndResize: image must be rank 4,but got rank "+a.rank+"."})),A(2===u.rank&&4===u.shape[1],(function(){return"Error in cropAndResize: boxes must be have size ["+c+",4] but had shape "+u.shape+"."})),A(1===s.rank&&s.shape[0]===c,(function(){return"Error in cropAndResize: boxInd must be have size ["+c+"] but had shape "+u.shape+"."})),A(2===r.length,(function(){return"Error in cropAndResize: cropSize must be of length 2, but got length "+r.length+"."})),A(r[0]>=1&&r[1]>=1,(function(){return"cropSize must be atleast [1,1], but was "+r})),A("bilinear"===o||"nearest"===o,(function(){return"method must be bilinear or nearest, but was "+o})),Ut.runKernelFunc((function(t,n){return t.cropAndResize(a,u,s,r,o,i)}),{images:a,boxes:u,boxInd:s},null,"CropAndResize",{method:o,extrapolationValue:i,cropSize:r})}}),Ff=Object.freeze({resizeBilinear:Sf,resizeNearestNeighbor:Af,nonMaxSuppression:Tf,nonMaxSuppressionAsync:function(t,n,e,r,o){return void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),s(this,void 0,void 0,(function(){var i,a,u,s,l,f,h;return c(this,(function(c){switch(c.label){case 0:return i=me(t,"boxes","nonMaxSuppressionAsync"),a=me(n,"scores","nonMaxSuppressionAsync"),u=kf(i,a,e,r,o),e=u.maxOutputSize,r=u.iouThreshold,o=u.scoreThreshold,[4,Promise.all([i.data(),a.data()])];case 1:return s=c.sent(),l=s[0],f=s[1],h=_i(l,f,e,r,o),i!==t&&i.dispose(),a!==n&&a.dispose(),[2,h]}}))}))},nonMaxSuppressionWithScore:Df,nonMaxSuppressionWithScoreAsync:function(t,n,e,r,o,i){return void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===i&&(i=0),s(this,void 0,void 0,(function(){var a,u,s,l,f,h,d;return c(this,(function(c){switch(c.label){case 0:return a=me(t,"boxes","nonMaxSuppressionAsync"),u=me(n,"scores","nonMaxSuppressionAsync"),s=kf(a,u,e,r,o,i),e=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold,i=s.softNmsSigma,[4,Promise.all([a.data(),u.data()])];case 1:return l=c.sent(),f=l[0],h=l[1],d=Oi(f,h,e,r,o,i),a!==t&&a.dispose(),u!==n&&u.dispose(),[2,d]}}))}))},cropAndResize:Nf}),_f=function(t,n){return!(t>0)||"linear"===n},Of=function(t,n,e){if(null==e||"linear"===e)return t;if("relu"===e)return t.mul(n.step());throw new Error("Gradient for activation "+e+" has not been implemented yet.")},Mf=function(t,n){var e=n,r=Br(t.shape,n.shape);return r.length>0&&(e=e.sum(r)),e.reshape(t.shape)},Bf=function(t,n,e){if("linear"===n)return t;if("relu"===n)return Bl(t);if("elu"===n)return _l(t);if("relu6"===n)return Pl(t);if("prelu"===n)return Ml(t,e);throw new Error("Unknown fused activation "+n+".")},Pf=Ae({fusedMatMul_:function(t){var n,e=t.a,r=t.b,o=t.transposeA,i=void 0!==o&&o,a=t.transposeB,u=void 0!==a&&a,s=t.bias,c=t.activation,l=void 0===c?"linear":c,f=t.preluActivationWeights;if(!1===_f(Ut.state.gradientDepth,l)){var h=tl(e,r,i,u);return null!=s&&(h=Or(h,s)),Bf(h,l,f)}var d=me(e,"a","fused matMul"),p=me(r,"b","fused matMul");n=_t(d,p),d=n[0],p=n[1];var v=i?d.shape[d.rank-2]:d.shape[d.rank-1],m=u?p.shape[p.rank-1]:p.shape[p.rank-2],g=i?d.shape[d.rank-1]:d.shape[d.rank-2],y=u?p.shape[p.rank-2]:p.shape[p.rank-1],x=d.shape.slice(0,-2),b=p.shape.slice(0,-2),w=F(x),C=F(b);A(d.rank>=2&&p.rank>=2&&d.rank===p.rank,(function(){return"Error in fused matMul: inputs must have the same rank of at least 2, got ranks "+d.rank+" and "+p.rank+"."})),A(_(x,b),(function(){return"Error in fused matMul: outer dimensions ("+x+") and ("+b+") of Tensors with shapes "+d.shape+" and "+p.shape+" must match."})),A(v===m,(function(){return"Error in fused matMul: inner shapes ("+v+") and ("+m+") of Tensors with shapes "+d.shape+" and "+p.shape+" and transposeA="+i+" and transposeB="+u+" must match."}));var E,R,I=d.shape.slice(0,-2).concat([g,y]),k=i?d.as3D(w,v,g):d.as3D(w,g,v),S=u?p.as3D(C,y,m):p.as3D(C,m,y);null!=s&&Pr(I,(E=_t(E=me(s,"bias","fused matMul"),d)[0]).shape),null!=f&&(R=me(f,"prelu weights","fused matMul"));var T={a:k,b:S};null!=s&&(T.bias=E),null!=f&&(T.preluActivationWeights=R);var D=[k,S];return Ut.runKernelFunc((function(t,n){var e=t.fusedBatchMatMul({a:k,b:S,transposeA:i,transposeB:u,bias:E,activation:l,preluActivationWeights:R});return n([k,S,e]),e}),T,(function(t,n){var e=n[0],r=n[1],o=n[2],a=Of(t,o,l),c={};return null!=s&&(c={bias:function(){return Mf(E,a)}}),i||u?!i&&u?Object.assign({a:function(){return a.matMul(r,!1,!1)},b:function(){return a.matMul(e,!0,!1)}},c):i&&!u?Object.assign({a:function(){return r.matMul(a,!1,!0)},b:function(){return e.matMul(a,!1,!1)}},c):Object.assign({a:function(){return r.matMul(a,!0,!0)},b:function(){return a.matMul(e,!0,!0)}},c):Object.assign({a:function(){return a.matMul(r,!1,!0)},b:function(){return e.matMul(a,!0,!1)}},c)}),"_FusedMatMul",{transposeA:i,transposeB:u,activation:l},D,[!0]).reshape(I)}}),Lf=Ae({fusedConv2d_:function(t){var n=t.x,e=t.filter,r=t.strides,o=t.pad,i=t.dataFormat,a=void 0===i?"NHWC":i,u=t.dilations,s=void 0===u?[1,1]:u,c=t.dimRoundingMode,l=t.bias,f=t.activation,h=void 0===f?"linear":f,d=t.preluActivationWeights;if(h=h||"linear",!1===_f(Ut.state.gradientDepth,h)){var p=Hc(n,e,r,o,a,s,c);return null!=l&&(p=Or(p,l)),Bf(p,h,d)}var v=me(n,"x","conv2d"),m=me(e,"filter","conv2d"),g=v,y=!1;3===v.rank&&(y=!0,g=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),A(4===g.rank,(function(){return"Error in fused conv2d: input must be rank 4, but got rank "+g.rank+"."})),A(4===m.rank,(function(){return"Error in fused conv2d: filter must be rank 4, but got rank "+m.rank+"."})),null!=c&&A(O(o),(function(){return"Error in fused conv2d: pad must be an integer when using, dimRoundingMode "+c+" but got pad "+o+"."})),A(g.shape[3]===m.shape[2],(function(){return"Error in conv2d: depth of input ("+g.shape[3]+") must match input depth for filter "+m.shape[2]+"."})),A(wi(r,s),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+s+"'"})),A("NHWC"===a,(function(){return"Error in conv2d: got dataFormat of "+a+" but only NHWC is currently supported."}));var x,b,w=di(g.shape,m.shape,r,s,o,c);null!=l&&(x=_t(x=me(l,"bias","fused conv2d"),v)[0],Pr(w.outShape,x.shape)),null!=d&&(b=me(d,"prelu weights","fused conv2d"));var C={x:g,filter:m};null!=l&&(C.bias=x),null!=d&&(C.preluActivationWeights=b);var E=[m,g],R=Ut.runKernelFunc((function(t,n){var e=t.fusedConv2d({input:g,filter:m,convInfo:w,bias:x,activation:h,preluActivationWeights:b});return n([m,g,e]),e}),C,(function(t,n){var e=n,i=e[0],a=e[1],u=e[2],c=Of(t,u,h);A(bi(s),(function(){return"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+s+"'"}));var f={};return null!=l&&(f={bias:function(){return Mf(x,c)}}),Object.assign({x:function(){return jc(a.shape,c,i,r,o)},filter:function(){return Kc(a,c,i.shape,r,o)}},f)}),"FusedConv2D",{convInfo:w,activation:h},E,[!0]);return y?R.as3D(R.shape[1],R.shape[2],R.shape[3]):R}}),Wf=Ae({fusedDepthwiseConv2d_:function(t){var n=t.x,e=t.filter,r=t.strides,o=t.pad,i=t.dataFormat,a=void 0===i?"NHWC":i,u=t.dilations,s=void 0===u?[1,1]:u,c=t.dimRoundingMode,l=t.bias,f=t.activation,h=void 0===f?"linear":f,d=t.preluActivationWeights;if(!1===_f(Ut.state.gradientDepth,h)){var p=Xc(n,e,r,o,a,s,c);return null!=l&&(p=Or(p,l)),Bf(p,h,d)}var v=me(n,"x","depthwiseConv2d"),m=me(e,"filter","depthwiseConv2d"),g=v,y=!1;3===v.rank&&(y=!0,g=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),A(4===g.rank,(function(){return"Error in fused depthwiseConv2d: input must be rank 4, but got rank "+g.rank+"."})),A(4===m.rank,(function(){return"Error in fused depthwiseConv2d: filter must be rank 4, but got rank "+m.rank+"."})),A(g.shape[3]===m.shape[2],(function(){return"Error in fused depthwiseConv2d: number of input channels ("+g.shape[3]+") must match the inChannels dimension in filter "+m.shape[2]+"."})),null==s&&(s=[1,1]),A(wi(r,s),(function(){return"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+s+"'"})),null!=c&&A(O(o),(function(){return"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode "+c+" but got pad "+o+"."}));var x,b,w=di(g.shape,m.shape,r,s,o,c,!0);null!=l&&(x=_t(x=me(l,"bias","fused conv2d"),v)[0],Pr(w.outShape,x.shape)),null!=d&&(b=me(d,"prelu weights","fused depthwiseConv2d"));var C={x:g,filter:m};null!=l&&(C.bias=x),null!=d&&(C.preluActivationWeights=b);var E=[m,g],R=Ut.runKernelFunc((function(t,n){var e=t.fusedDepthwiseConv2D({input:g,filter:m,convInfo:w,bias:x,activation:h,preluActivationWeights:b});return n([m,g,e]),e}),C,(function(t,n){A(bi(s),(function(){return"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+s+"'"}));var e=n[0],r=n[1],o=n[2],i=Of(t,o,h),a={};return null!=l&&(a={bias:function(){return Mf(x,i)}}),Object.assign({x:function(){return Yc(r.shape,i,e,w)},filter:function(){return $c(r,i,e.shape,w)}},a)}),"FusedDepthwiseConv2D",{convInfo:w,activation:h},E,[!0]);return y?R.as3D(R.shape[1],R.shape[2],R.shape[3]):R}}),Uf=Object.freeze({matMul:Pf,conv2d:Lf,depthwiseConv2d:Wf}),zf=Object.freeze({image:Ff,linalg:If,losses:bf,spectral:Ql,fused:Uf,signal:cf,add:Or,addN:Ts,batchNorm:Ms,batchNormalization:Os,batchNorm2d:Ls,batchNormalization2d:Ps,batchNorm3d:zs,batchNormalization3d:Us,batchNorm4d:Hs,batchNormalization4d:Gs,broadcastTo:qs,clone:Ks,div:Bo,divNoNan:Zs,eye:nc,multinomial:ec,oneHot:rc,pad:oc,pad1d:ic,pad2d:ac,pad3d:uc,pad4d:sc,rand:cc,randomGamma:gc,randomNormal:yc,randomUniform:xc,square:bc,squaredDifference:wc,tile:tc,truncatedNormal:Cc,conv1d:Gc,conv2d:Hc,conv3d:qc,depthwiseConv2d:Xc,separableConv2d:Qc,conv2dTranspose:Jc,conv3dTranspose:Zc,op:Ae,booleanMaskAsync:Wc,complex:Te,real:De,imag:Ne,concat:Ye,concat1d:$e,concat2d:Qe,concat3d:Je,concat4d:Ze,split:tr,matMul:tl,dot:nl,outerProduct:el,reverse:rl,reverse1d:ol,reverse2d:il,reverse3d:al,reverse4d:ul,maxPool:ll,avgPool:fl,pool:hl,maxPool3d:dl,avgPool3d:pl,maxPoolWithArgmax:vl,slice:ml,slice1d:gl,slice2d:yl,slice3d:xl,slice4d:bl,abs:Lr,acos:Wr,acosh:Ur,asin:zr,asinh:Vr,atan:Gr,atanh:Hr,ceil:qr,clipByValue:Kr,cos:jr,cosh:Xr,erf:Yr,exp:$r,expm1:Qr,floor:Jr,log:Zr,log1p:to,logSigmoid:no,neg:eo,reciprocal:ro,round:oo,rsqrt:io,sigmoid:ao,sign:uo,isNaN:so,isInf:co,isFinite:lo,sin:fo,sinh:ho,softplus:po,sqrt:vo,step:mo,tan:go,tanh:yo,all:Cl,any:El,argMax:Rl,argMin:Il,logSumExp:kl,max:Sl,mean:Al,min:Tl,moments:Dl,sum:Nl,prod:Fl,equal:Ec,equalStrict:Rc,greater:Ic,greaterEqual:kc,greaterEqualStrict:Sc,greaterStrict:Ac,less:Tc,lessEqual:Dc,lessEqualStrict:Nc,lessStrict:Fc,notEqual:_c,notEqualStrict:Oc,addStrict:xo,atan2:bo,divStrict:wo,floorDiv:Co,maximum:Eo,maximumStrict:Ro,minimum:Io,minimumStrict:ko,mod:So,modStrict:Ao,mul:To,mulStrict:Do,pow:No,powStrict:Fo,squaredDifferenceStrict:_o,sub:Oo,subStrict:Mo,elu:_l,leakyRelu:Ol,prelu:Ml,relu:Bl,relu6:Pl,selu:Ll,logicalAnd:js,logicalNot:Xs,logicalOr:Ys,logicalXor:$s,where:Qs,whereAsync:Js,buffer:nr,print:er,batchToSpaceND:rr,cast:or,cumsum:ir,depthToSpace:ar,expandDims:ur,reshape:sr,spaceToBatchND:cr,squeeze:lr,stack:fr,unstack:hr,setdiff1dAsync:dr,fill:He,linspace:qe,ones:Ve,range:Ke,scalar:Oe,tensor:Fe,tensor1d:Me,tensor2d:Be,tensor3d:Pe,tensor4d:Le,tensor5d:We,tensor6d:Ue,variable:ze,zeros:Ge,onesLike:je,zerosLike:Xe,transpose:ui,softmax:ii,logSoftmax:ai,localResponseNormalization:Wl,norm:Ul,gather:Pc,unsortedSegmentSum:Lc,basicLSTMCell:zl,multiRNNCell:Vl,movingAverage:Gl,stridedSlice:Hl,topk:ql,scatterND:Kl,fft:jl,ifft:Xl,rfft:Yl,irfft:$l,sparseToDense:Jl,gatherND:Zl,diag:tf,dropout:nf,hannWindow:of,hammingWindow:af,frame:uf,stft:sf,inTopKAsync:lf});function Vf(t,n){Array.isArray(t)||(t=[t]),t.forEach((function(t){null!=t&&A("complex64"!==t.dtype,(function(){return n+" does not support complex64 tensors."}))}))}function Gf(t,n,e,r,o,i){for(var a=o.strideHeight,u=o.strideWidth,s=o.dilationHeight,c=o.dilationWidth,l=o.effectiveFilterHeight,f=o.effectiveFilterWidth,h=o.padInfo.top,d=o.padInfo.left,p="max"===i?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,v=nr(o.outShape,e),m=v.values,g=o.outShape[1]*o.outShape[2]*o.outShape[3],y=o.outShape[2]*o.outShape[3],x=o.outShape[3],b=0;b<o.batchSize;++b)for(var w=b*g,C=b*r[0],E=0;E<o.inChannels;++E)for(var R=0;R<o.outHeight;++R)for(var I=R*a-h,k=Math.max(0,I),S=Math.min(o.inHeight,l+I),A=w+R*y,T=0;T<o.outWidth;++T){for(var D=T*u-d,N=Math.max(0,D),F=Math.min(o.inWidth,f+D),_=p,O=0,M=0,B=k;B<S;B+=s){for(var P=C+B*r[1],L=N;L<F;L+=c){var W=t[P+L*r[2]+E];"max"===i&&W>_?_=W:"avg"===i&&(O+=W,M++)}if(isNaN(_))break}m[A+T*x+E]="avg"===i?O/M:_}return v}function Hf(t,n,e,r,o,i){void 0===o&&(o=!1),void 0===i&&(i=!1);for(var a=nr(r.outShape,"int32"),u=r.strideHeight,s=r.strideWidth,c=r.dilationHeight,l=r.dilationWidth,f=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,v=nr(n,e,t),m=0;m<r.batchSize;++m)for(var g=0;g<r.inChannels;++g)for(var y=0;y<r.outHeight;++y){for(var x=y*u-d,b=x;b<0;)b+=c;for(var w=Math.min(r.inHeight,f+x),C=0;C<r.outWidth;++C){for(var E=C*s-p,R=E;R<0;)R+=l;for(var I=Math.min(r.inWidth,h+E),k=Number.NEGATIVE_INFINITY,S=-1,A=b;A<w;A+=c)for(var T=A-x,D=R;D<I;D+=l){var N=D-E,F=v.get(m,A,D,g);F>k&&(k=F,S=o?i?((m*r.inHeight+A)*r.inWidth+D)*r.inChannels+g:(A*r.inWidth+D)*r.inChannels+g:T*h+N)}a.set(S,m,y,C,g)}}return a}function qf(t,n,e,r){if("linear"===e)return t.linear(n);if("relu"===e)return t.relu(n);if("elu"===e)return t.elu(n);if("relu6"===e)return t.relu6(n);if("prelu"===e)return t.prelu(n,r);throw new Error("Activation "+e+" has not been implemented for the CPU backend.")}var Kf=function(t){function n(){var n=t.call(this)||this;return n.blockSize=48,n.firstUse=!0,n.data=new si(n,Ut),n}return u(n,t),n.prototype.write=function(t,n,e){this.firstUse&&(this.firstUse=!1,h().get("IS_NODE")&&de("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));var r={};return this.data.set(r,{values:t,dtype:e}),r},n.prototype.move=function(t,n,e,r){this.data.set(t,{values:n,dtype:r})},n.prototype.numDataIds=function(){return this.data.numDataIds()},n.prototype.read=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(n){return[2,this.readSync(t)]}))}))},n.prototype.readSync=function(t){var n=this.data.get(t),e=n.dtype,r=n.complexTensors;return"complex64"===e?Si(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(t).values},n.prototype.bufferSync=function(t){var n=this.readSync(t.dataId),e=n;if("string"===t.dtype)try{e=n.map((function(t){return lt(t)}))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return nr(t.shape,t.dtype,e)},n.prototype.makeOutput=function(t,n,e){var r=this.write(t,n,e);return Ut.makeTensorFromDataId(r,n,e,this)},n.prototype.disposeData=function(t){if(this.data.has(t)){var n=this.data.get(t).complexTensors;null!=n&&(n.real.dispose(),n.imag.dispose()),this.data.delete(t)}},n.prototype.time=function(t){return s(this,void 0,void 0,(function(){var n;return c(this,(function(e){return n=ut(),t(),[2,{kernelMs:ut()-n}]}))}))},n.prototype.memory=function(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}},n.prototype.complex=function(t,n){var e=this.makeOutput(null,t.shape,"complex64");return this.data.get(e.dataId).complexTensors={real:Ut.keep(t.clone()),imag:Ut.keep(n.clone())},e},n.prototype.real=function(t){return this.data.get(t.dataId).complexTensors.real.clone()},n.prototype.imag=function(t){return this.data.get(t.dataId).complexTensors.imag.clone()},n.prototype.slice=function(t,n,e){if(Vf(t,"slice"),Yo(t.shape,n,e)){var r=$o(n,t.strides),o=F(e);return Fe(this.readSync(t.dataId).subarray(r,r+o),e,t.dtype)}for(var i=nr(e,t.dtype),a=this.bufferSync(t),u=0;u<i.size;++u){var s=i.indexToLoc(u).map((function(t,e){return t+n[e]}));i.values[u]=a.get.apply(a,s)}return i.toTensor()},n.prototype.stridedSlice=function(t,n,e,r){Vf(t,"stridedSlice");var o=Ko(n,e,r);if(o.some((function(t){return 0===t})))return Fe([],o);for(var i=nr(o,t.dtype),a=this.bufferSync(t),u=0;u<i.size;u++){for(var s=i.indexToLoc(u),c=new Array(s.length),l=0;l<c.length;l++)c[l]=s[l]*r[l]+n[l];i.set.apply(i,[a.get.apply(a,c)].concat(s))}return i.toTensor()},n.prototype.diag=function(t){for(var n=this.readSync(t.dataId),e=nr([t.size,t.size],t.dtype),r=e.values,o=0;o<n.length;o++)r[o*t.size+o]=n[o];return e.toTensor()},n.prototype.unstack=function(t,n){for(var e=t.shape[n],r=new Array(t.rank-1),o=0,i=0;i<t.rank;i++)i!==n&&(r[o++]=t.shape[i]);var a=new Array(t.rank).fill(0),u=t.shape.slice();u[n]=1;var s=new Array(e);for(i=0;i<s.length;i++)a[n]=i,s[i]=this.slice(t,a,u).reshape(r);return s},n.prototype.reverse=function(t,n){Vf(t,"reverse");for(var e=nr(t.shape,t.dtype),r=this.bufferSync(t),o=function(o){var i=e.indexToLoc(o),a=i.slice();n.forEach((function(n){return a[n]=t.shape[n]-1-a[n]})),e.set.apply(e,[r.get.apply(r,a)].concat(i))},i=0;i<e.size;i++)o(i);return e.toTensor()},n.prototype.concat=function(t,n){var e=this;if("complex64"===t[0].dtype){var r=t.map((function(t){return De(t)})),o=t.map((function(t){return Ne(t)}));return Te(this.concat(r,n),this.concat(o,n))}var i=t.map((function(t){var e=F(t.shape.slice(n));return t.as2D(-1,e)})),a=Se(i.map((function(t){return t.shape})),1),u=nr(a,t[0].dtype).values;if(1===i[0].shape[0]){var s=0;i.forEach((function(t){u.set(e.readSync(t.dataId),s),s+=t.size}))}else{var c=0;i.forEach((function(t){for(var n=e.readSync(t.dataId),r=0,o=0;o<t.shape[0];++o)for(var i=o*a[1]+c,s=0;s<t.shape[1];++s)u[i+s]=n[r++];c+=t.shape[1]}))}var l=Se(t.map((function(t){return t.shape})),n);return Fe(u,l,t[0].dtype)},n.prototype.neg=function(t){return Vf(t,"neg"),this.multiply(Oe(-1),t)},n.prototype.add=function(t,n){return"complex64"===t.dtype||"complex64"===n.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),n.cast("complex64"),(function(t,n,e,r){return{real:t+e,imag:n+r}})):this.broadcastedBinaryOp(t,n,Nt(t.dtype,n.dtype),(function(t,n){return t+n}))},n.prototype.addN=function(t){var n=this;Vf(t,"addN");for(var e=t.map((function(t){return n.readSync(t.dataId)})),r=nr(t[0].shape,t[0].dtype),o=r.values,i=0;i<t.length;i++)for(var a=e[i],u=0;u<o.length;u++)o[u]+=a[u];return r.toTensor()},n.prototype.softmax=function(t,n){var e=U([n],t.shape),r=this.max(t,e),o=we(r.shape,e),i=this.subtract(t,r.reshape(o)),a=this.exp(i),u=this.sum(a,e).reshape(o);return Bo(a,u)},n.prototype.subtract=function(t,n){return"complex64"===t.dtype||"complex64"===n.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),n.cast("complex64"),(function(t,n,e,r){return{real:t-e,imag:n-r}})):this.broadcastedBinaryOp(t,n,Nt(t.dtype,n.dtype),(function(t,n){return t-n}))},n.prototype.pow=function(t,n){return Vf([t,n],"pow"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){return Math.pow(t,n)}))},n.prototype.batchMatMul=function(t,n,e,r){Vf([t,n],"matMul");for(var o=e?t.shape[1]:t.shape[2],i=e?t.shape[2]:t.shape[1],a=r?n.shape[1]:n.shape[2],u=t.shape[0],s=this.readSync(t.dataId),c=this.readSync(n.dataId),l=e?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],f=l[0],h=l[1],d=l[2],p=r?[1,n.strides[1],n.strides[0]]:[n.strides[1],1,n.strides[0]],v=p[0],m=p[1],g=p[2],y=i*a,x=nr([u,i,a],t.dtype),b=x.values,w=this.blockSize,C=0;C<u;C++)for(var E=0;E<i;E+=w)for(var R=0;R<a;R+=w)for(var I=0;I<o;I+=w)for(var k=Math.min(E+w,i),S=Math.min(R+w,a),A=Math.min(I+w,o),T=E;T<k;T++)for(var D=R;D<S;D++){for(var N=0,F=I;F<A;F++)N+=s[C*f+T*h+F*d]*c[F*v+D*m+C*g];b[C*y+(T*a+D)]+=N}return x.toTensor()},n.prototype.fusedBatchMatMul=function(t){var n=t.a,e=t.b,r=t.transposeA,o=t.transposeB,i=t.bias,a=t.activation,u=t.preluActivationWeights,s=this.batchMatMul(n,e,r,o);return i&&(s=this.add(s,i)),a&&(s=qf(this,s,a,u)),s},n.prototype.multiply=function(t,n){return"complex64"===t.dtype||"complex64"===n.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),n.cast("complex64"),(function(t,n,e,r){return{real:t*e-n*r,imag:t*r+n*e}})):this.broadcastedBinaryOp(t,n,Nt(t.dtype,n.dtype),(function(t,n){return t*n}))},n.prototype.floorDiv=function(t,n){return Vf([t,n],"floorDiv"),this.broadcastedBinaryOp(t,n,"int32",(function(t,n){return Math.floor(t/n)}))},n.prototype.sum=function(t,n){Vf(t,"sum"),Ce("sum",n,t.rank);for(var e=be(t.shape,n),r=e[0],o=e[1],i=Ge(r,Nt(t.dtype,"int32")),a=F(o),u=this.readSync(i.dataId),s=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*a,f=0,h=0;h<a;++h)f+=s[l+h];u[c]=f}return i},n.prototype.prod=function(t,n){Vf(t,"sum");for(var e=be(t.shape,n),r=e[0],o=e[1],i=Ge(r,Nt(t.dtype,"int32")),a=F(o),u=this.readSync(i.dataId),s=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*a,f=1,h=0;h<a;++h)f*=s[l+h];u[c]=f}return i},n.prototype.unsortedSegmentSum=function(t,n,e){Vf(t,"unsortedSegmentSum");for(var r=[],o=t.rank-n.rank,i=0;i<o;++i)n=n.expandDims(i+1);for(i=0;i<e;++i){var a=Oe(i,"int32"),u=Ec(a,n).asType("float32").mul(t).sum(0);r.push(u)}return fr(r)},n.prototype.argMin=function(t,n){Vf(t,"argMin");var e=[n];Ce("argMin",e,t.rank);for(var r=be(t.shape,e),o=r[0],i=r[1],a=Ge(o,"int32"),u=F(i),s=this.readSync(a.dataId),c=this.readSync(t.dataId),l=0;l<s.length;++l){for(var f=l*u,h=c[f],d=0,p=0;p<u;++p){var v=c[f+p];v<h&&(h=v,d=p)}s[l]=d}return a},n.prototype.argMax=function(t,n){Vf(t,"argMax");var e=[n];Ce("argMax",e,t.rank);for(var r=be(t.shape,e),o=r[0],i=r[1],a=Ge(o,"int32"),u=F(i),s=this.readSync(a.dataId),c=this.readSync(t.dataId),l=0;l<s.length;++l){for(var f=l*u,h=c[f],d=0,p=0;p<u;++p){var v=c[f+p];v>h&&(h=v,d=p)}s[l]=d}return a},n.prototype.cumsum=function(t,n,e,r){if(Vf(t,"cumsum"),n!==t.rank-1)throw new Error("backend.cumsum in CPU expects an inner-most axis="+(t.rank-1)+" but got axis="+n);for(var o=Nt(t.dtype,"int32"),i=Ge(t.shape,o),a=this.readSync(i.dataId),u=this.readSync(t.dataId),s=t.shape[t.rank-1],c=r?function(t,n){return t+s-n-1}:function(t,n){return t+n},l=0;l<u.length;l+=s)for(var f=0;f<s;f++){var h=c(l,f);if(0===f)a[h]=e?0:u[h];else{var d=c(l,f-1);a[h]=e?u[d]+a[d]:u[h]+a[d]}}return i},n.prototype.equal=function(t,n){return Vf([t,n],"equal"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t===n?1:0}))},n.prototype.notEqual=function(t,n){return Vf([t,n],"notEqual"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t!==n?1:0}))},n.prototype.less=function(t,n){return Vf([t,n],"less"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t<n?1:0}))},n.prototype.lessEqual=function(t,n){return Vf([t,n],"lessEqual"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t<=n?1:0}))},n.prototype.greater=function(t,n){return Vf([t,n],"greater"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t>n?1:0}))},n.prototype.greaterEqual=function(t,n){return Vf([t,n],"greaterEqual"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t>=n?1:0}))},n.prototype.logicalNot=function(t){Vf(t,"logicalNot");for(var n=this.readSync(t.dataId),e=new Uint8Array(n.length),r=0;r<n.length;++r)e[r]=n[r]?0:1;return this.makeOutput(e,t.shape,"bool")},n.prototype.logicalAnd=function(t,n){return Vf([t,n],"logicalAnd"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t&&n}))},n.prototype.logicalOr=function(t,n){return Vf([t,n],"logicalOr"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t||n}))},n.prototype.select=function(t,n,e){Vf([t,n,e],"select");for(var r=this.readSync(t.dataId),o=this.readSync(n.dataId),i=this.readSync(e.dataId),a=Ge(n.shape,Nt(n.dtype,e.dtype)),u=this.readSync(a.dataId),s=0,c=0===t.rank||t.rank>1||1===n.rank?1:F(n.shape.slice(1)),l=0;l<r.length;l++)for(var f=0;f<c;f++)1===r[l]?u[s++]=o[l]:u[s++]=i[l];return a},n.prototype.where=function(t){Vf([t],"where");var n=this.readSync(t.dataId);return Vi(t.shape,n)},n.prototype.topk=function(t,n,e){return Vf(t,"topk"),zi(this.readSync(t.dataId),t.shape,t.dtype,n)},n.prototype.min=function(t,n){Vf(t,"min"),Ce("min",n,t.rank);for(var e=be(t.shape,n),r=e[0],o=e[1],i=Ge(r,t.dtype),a=F(o),u=this.readSync(i.dataId),s=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*a,f=s[l],h=0;h<a;++h){var d=s[l+h];d<f&&(f=d)}u[c]=f}return i},n.prototype.minimum=function(t,n){return Vf([t,n],"minimum"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){return Math.min(t,n)}))},n.prototype.mod=function(t,n){return Vf([t,n],"mod"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){var e=t%n;return t<0&&n<0||t>=0&&n>=0?e:(e+n)%n}))},n.prototype.max=function(t,n){Vf(t,"max"),Ce("max",n,t.rank);for(var e=be(t.shape,n),r=e[0],o=e[1],i=Ge(r,t.dtype),a=F(o),u=this.readSync(i.dataId),s=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*a,f=s[l],h=0;h<a;++h){var d=s[l+h];d>f&&(f=d)}u[c]=f}return i},n.prototype.maximum=function(t,n){return Vf([t,n],"maximum"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){return Math.max(t,n)}))},n.prototype.all=function(t,n){Vf(t,"all"),Ce("all",n,t.rank);for(var e=be(t.shape,n),r=e[0],o=e[1],i=Ge(r,t.dtype),a=F(o),u=this.readSync(i.dataId),s=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*a,f=s[l],h=0;h<a;++h){var d=s[l+h];f=f&&d}u[c]=f}return i},n.prototype.any=function(t,n){Vf(t,"any"),Ce("any",n,t.rank);for(var e=be(t.shape,n),r=e[0],o=e[1],i=Ge(r,t.dtype),a=F(o),u=this.readSync(i.dataId),s=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*a,f=s[l],h=0;h<a;++h){var d=s[l+h];f=f||d}u[c]=f}return i},n.prototype.squaredDifference=function(t,n){return Vf([t,n],"squaredDifference"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){var e=t-n;return e*e}))},n.prototype.ceil=function(t){Vf(t,"ceil");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r)e[r]=Math.ceil(n[r]);return this.makeOutput(e,t.shape,"float32")},n.prototype.floor=function(t){Vf(t,"floor");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r)e[r]=Math.floor(n[r]);return this.makeOutput(e,t.shape,"float32")},n.prototype.sign=function(t){Vf(t,"x");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r)n[r]<0?e[r]=-1:n[r]>0?e[r]=1:e[r]=0;return this.makeOutput(e,t.shape,"float32")},n.prototype.isNaN=function(t){Vf(t,"x");for(var n=this.readSync(t.dataId),e=new Uint8Array(n.length),r=0;r<n.length;++r)Number.isNaN(n[r])&&(e[r]=1);return this.makeOutput(e,t.shape,"bool")},n.prototype.isInf=function(t){Vf(t,"x");for(var n=this.readSync(t.dataId),e=new Uint8Array(n.length),r=0;r<n.length;++r)Math.abs(n[r])===1/0&&(e[r]=1);return this.makeOutput(e,t.shape,"bool")},n.prototype.isFinite=function(t){Vf(t,"x");for(var n=this.readSync(t.dataId),e=new Uint8Array(n.length),r=0;r<n.length;++r)Number.isFinite(n[r])&&(e[r]=1);return this.makeOutput(e,t.shape,"bool")},n.prototype.round=function(t){Vf(t,"round");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r){var o=Math.floor(n[r]);n[r]-o<.5?e[r]=Math.floor(n[r]):n[r]-o>.5?e[r]=Math.ceil(n[r]):e[r]=o%2==0?o:o+1}return this.makeOutput(e,t.shape,"float32")},n.prototype.exp=function(t){Vf(t,"exp");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r)e[r]=Math.exp(n[r]);return this.makeOutput(e,t.shape,"float32")},n.prototype.expm1=function(t){Vf(t,"expm1");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r)e[r]=Math.expm1(n[r]);return this.makeOutput(e,t.shape,"float32")},n.prototype.log=function(t){Vf(t,"log");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r){var o=n[r];e[r]=Math.log(o)}return this.makeOutput(e,t.shape,"float32")},n.prototype.log1p=function(t){Vf(t,"log1p");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r){var o=n[r];e[r]=Math.log1p(o)}return this.makeOutput(e,t.shape,"float32")},n.prototype.sqrt=function(t){Vf(t,"sqrt");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r){var o=n[r];e[r]=Math.sqrt(o)}return this.makeOutput(e,t.shape,"float32")},n.prototype.rsqrt=function(t){Vf(t,"rsqrt");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r){var o=n[r];e[r]=1/Math.sqrt(o)}return this.makeOutput(e,t.shape,"float32")},n.prototype.reciprocal=function(t){Vf(t,"reciprocal");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r)e[r]=1/n[r];return this.makeOutput(e,t.shape,"float32")},n.prototype.linear=function(t){return t},n.prototype.relu=function(t){Vf(t,"relu");for(var n=Ge(t.shape,t.dtype),e=this.readSync(n.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)e[o]=Math.max(0,r[o]);return n},n.prototype.relu6=function(t){Vf(t,"relu");for(var n=Ge(t.shape,t.dtype),e=this.readSync(n.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)e[o]=Math.min(Math.max(0,r[o]),6);return n},n.prototype.prelu=function(t,n){return Vf([t,n],"prelu"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){return t<0?n*t:t}))},n.prototype.elu=function(t){Vf(t,"elu");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r){var o=e[r];n[r]=o>=0?o:Math.exp(o)-1}return this.makeOutput(n,t.shape,"float32")},n.prototype.eluDer=function(t,n){Vf([t,n],"eluDer");for(var e=new Float32Array(n.size),r=this.readSync(n.dataId),o=this.readSync(t.dataId),i=0;i<r.length;++i){var a=r[i];e[i]=a>=1?o[i]:o[i]*(a+1)}return this.makeOutput(e,n.shape,"float32")},n.prototype.selu=function(t){Vf(t,"selu");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r){var o=e[r];n[r]=o>=0?1.0507009873554805*o:1.7580993408473768*(Math.exp(o)-1)}return this.makeOutput(n,t.shape,"float32")},n.prototype.clip=function(t,n,e){Vf(t,"clip");for(var r=new Float32Array(t.size),o=this.readSync(t.dataId),i=0;i<o.length;++i){var a=o[i];r[i]=a>e?e:a<n?n:a}return this.makeOutput(r,t.shape,"float32")},n.prototype.abs=function(t){for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.abs(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.complexAbs=function(t){for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<t.size;++r){var o=e[2*r],i=e[2*r+1];n[r]=Math.hypot(o,i)}return this.makeOutput(n,t.shape,"float32")},n.prototype.int=function(t){Vf(t,"int");for(var n=new Int32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=e[r];return this.makeOutput(n,t.shape,"int32")},n.prototype.sigmoid=function(t){Vf(t,"sigmoid");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=1/(1+Math.exp(-e[r]));return this.makeOutput(n,t.shape,"float32")},n.prototype.softplus=function(t){Vf(t,"softplus");for(var n=Math.log(1.1920928955078125e-7)+2,e=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var i,a=r[o]>-n,u=r[o]<n,s=Math.exp(r[o]);i=u?s:a?r[o]:Math.log(1+s),e[o]=i}return this.makeOutput(e,t.shape,"float32")},n.prototype.sin=function(t){Vf(t,"sin");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.sin(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.cos=function(t){Vf(t,"cos");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.cos(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.tan=function(t){Vf(t,"tan");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.tan(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.asin=function(t){Vf(t,"asin");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.asin(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.acos=function(t){Vf(t,"acos");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.acos(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.atan=function(t){Vf(t,"atan");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.atan(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.atan2=function(t,n){return Vf([t,n],"atan2"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){return Math.atan2(t,n)}))},n.prototype.sinh=function(t){Vf(t,"sinh");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.sinh(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.cosh=function(t){Vf(t,"cosh");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.cosh(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.tanh=function(t){Vf(t,"tanh");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=M(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.asinh=function(t){Vf(t,"asinh");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.asinh(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.acosh=function(t){Vf(t,"acosh");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.acosh(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.atanh=function(t){Vf(t,"atanh");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.atanh(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.erf=function(t){Vf(t,"erf");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r){var o=Math.sign(e[r]),i=Math.abs(e[r]),a=1/(1+.3275911*i);n[r]=o*(1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-i*i))}return this.makeOutput(n,t.shape,"float32")},n.prototype.step=function(t,n){void 0===n&&(n=0),Vf(t,"step");for(var e=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var i=r[o];isNaN(i)?e[o]=NaN:e[o]=i>0?1:n}return this.makeOutput(e,t.shape,"float32")},n.prototype.fusedConv2d=function(t){var n=t.input,e=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights,u=this.conv2d(n,e,r);return o&&(u=this.add(u,o)),i&&(u=qf(this,u,i,a)),u},n.prototype.conv2d=function(t,n,e){Vf([t,n],"conv2d");for(var r=e.filterHeight,o=e.filterWidth,i=e.dilationHeight,a=e.dilationWidth,u=e.padInfo.left,s=e.padInfo.top,c="channelsLast"===e.dataFormat,l=nr(e.outShape,t.dtype),f=t.strides[0],h=c?t.strides[1]:t.strides[2],d=c?t.strides[2]:1,p=c?1:t.strides[1],v=l.strides[0],m=c?l.strides[1]:l.strides[2],g=c?l.strides[2]:1,y=c?1:l.strides[1],x=this.readSync(t.dataId),b=this.readSync(n.dataId),w=l.values,C=0;C<e.batchSize;++C)for(var E=C*f,R=C*v,I=0;I<e.outHeight;++I)for(var k=R+I*m,S=I*e.strideHeight-s,A=0;A<r;A++){var T=S+A*i;if(!(T<0||T>=e.inHeight))for(var D=A*n.strides[0],N=E+T*h,F=0;F<e.outWidth;++F)for(var _=k+F*g,O=F*e.strideWidth-u,M=0;M<o;M++){var B=O+M*a;if(!(B<0||B>=e.inWidth))for(var P=N+B*d,L=D+M*n.strides[1],W=0;W<e.inChannels;++W){for(var U=x[P+W*p],z=0;z<e.outChannels;++z)w[_+z*y]+=U*b[L+z];L+=e.outChannels}}}return l.toTensor()},n.prototype.conv3d=function(t,n,e){for(var r=e.filterDepth,o=e.filterHeight,i=e.filterWidth,a=e.dilationDepth,u=e.dilationHeight,s=e.dilationWidth,c=e.padInfo.front,l=e.padInfo.left,f=e.padInfo.top,h=nr(e.outShape,t.dtype),d=this.readSync(t.dataId),p=this.readSync(n.dataId),v=h.values,m=0;m<e.batchSize;++m)for(var g=m*t.strides[0],y=m*h.strides[0],x=0;x<e.outDepth;++x)for(var b=y+x*h.strides[1],w=x*e.strideDepth-c,C=0;C<r;C++){var E=w+C*a;if(!(E<0||E>=e.inDepth))for(var R=C*n.strides[0],I=g+E*t.strides[1],k=0;k<e.outHeight;++k)for(var S=b+k*h.strides[2],A=k*e.strideHeight-f,T=0;T<o;T++){var D=A+T*u;if(!(D<0||D>=e.inHeight))for(var N=R+T*n.strides[1],F=I+D*t.strides[2],_=0;_<e.outWidth;++_)for(var O=S+_*e.outChannels,M=_*e.strideWidth-l,B=0;B<i;B++){var P=M+B*s;if(!(P<0||P>=e.inWidth))for(var L=N+B*n.strides[2],W=F+P*e.inChannels,U=L,z=0;z<e.inChannels;++z){for(var V=d[W+z],G=0;G<e.outChannels;++G)v[O+G]+=V*p[U+G];U+=e.outChannels}}}}return h.toTensor()},n.prototype.conv2dDerInput=function(t,n,e){Vf([t,n],"conv2dDerInput");for(var r=nr(e.inShape,"float32"),o=r.values,i=this.readSync(t.dataId),a=this.readSync(n.dataId),u=n.strides,s=u[0],c=u[1],l=u[2],f=e.batchSize,h=e.filterHeight,d=e.filterWidth,p=e.inChannels,v=e.inHeight,m=e.inWidth,g=e.outChannels,y=e.outHeight,x=e.outWidth,b=e.strideHeight,w=e.strideWidth,C=e.dataFormat,E=h-1-e.padInfo.top,R=d-1-e.padInfo.left,I="channelsLast"===C,k=r.strides[0],S=I?r.strides[1]:r.strides[2],A=I?r.strides[2]:1,T=I?1:r.strides[1],D=t.strides[0],N=I?t.strides[1]:t.strides[2],F=I?t.strides[2]:1,_=I?1:t.strides[1],O=0;O<f;++O)for(var M=0;M<p;++M)for(var B=0;B<v;++B)for(var P=B-E,L=Math.max(0,Math.ceil(P/b)),W=Math.min(y,(h+P)/b),U=0;U<m;++U){for(var z=U-R,V=Math.max(0,Math.ceil(z/w)),G=Math.min(x,(d+z)/w),H=0,q=L;q<W;++q)for(var K=q*b-P,j=V;j<G;++j)for(var X=D*O+N*q+F*j,Y=s*(h-1-K)+c*(d-1-(j*w-z))+l*M,$=0;$<g;++$)H+=i[X+_*$]*a[Y+$];o[k*O+S*B+A*U+T*M]=H}return r.toTensor()},n.prototype.conv3dDerInput=function(t,n,e){for(var r=nr(e.inShape,"float32"),o=r.values,i=r.strides,a=i[0],u=i[1],s=i[2],c=i[3],l=this.readSync(t.dataId),f=t.strides,h=f[0],d=f[1],p=f[2],v=f[3],m=this.readSync(n.dataId),g=n.strides,y=g[0],x=g[1],b=g[2],w=g[3],C=e.batchSize,E=e.filterDepth,R=e.filterHeight,I=e.filterWidth,k=e.inChannels,S=e.inDepth,A=e.inHeight,T=e.inWidth,D=e.outChannels,N=e.outDepth,F=e.outHeight,_=e.outWidth,O=e.strideDepth,M=e.strideHeight,B=e.strideWidth,P=E-1-e.padInfo.front,L=R-1-e.padInfo.top,W=I-1-e.padInfo.left,U=0;U<C;++U)for(var z=0;z<k;++z)for(var V=0;V<S;++V)for(var G=V-P,H=Math.max(0,Math.ceil(G/O)),q=Math.min(N,(E+G)/O),K=0;K<A;++K)for(var j=K-L,X=Math.max(0,Math.ceil(j/M)),Y=Math.min(F,(R+j)/M),$=0;$<T;++$){for(var Q=$-W,J=Math.max(0,Math.ceil(Q/B)),Z=Math.min(_,(I+Q)/B),tt=0,nt=H;nt<q;++nt)for(var et=nt*O-G,rt=X;rt<Y;++rt)for(var ot=rt*M-j,it=J;it<Z;++it)for(var at=h*U+d*nt+p*rt+v*it,ut=y*(E-1-et)+x*(R-1-ot)+b*(I-1-(it*B-Q))+w*z,st=0;st<D;++st)tt+=l[at+st]*m[ut+st];o[a*U+u*V+s*K+c*$+z]=tt}return r.toTensor()},n.prototype.conv2dDerFilter=function(t,n,e){Vf([t,n],"conv2dDerFilter");for(var r=e.strideHeight,o=e.strideWidth,i=e.filterHeight,a=e.filterWidth,u="channelsLast"===e.dataFormat,s=nr(e.filterShape,"float32"),c=e.padInfo.left,l=e.padInfo.top,f=this.bufferSync(t),h=this.bufferSync(n),d=0;d<i;++d)for(var p=Math.max(0,Math.ceil((l-d)/r)),v=Math.min(e.outHeight,(e.inHeight+l-d)/r),m=0;m<a;++m)for(var g=Math.max(0,Math.ceil((c-m)/o)),y=Math.min(e.outWidth,(e.inWidth+c-m)/o),x=0;x<e.inChannels;++x)for(var b=0;b<e.outChannels;++b){for(var w=0,C=0;C<e.batchSize;++C)for(var E=p;E<v;++E)for(var R=d+E*r-l,I=g;I<y;++I){var k=m+I*o-c;w+=u?f.get(C,R,k,x)*h.get(C,E,I,b):f.get(C,x,R,k)*h.get(C,b,E,I)}s.set(w,d,m,x,b)}return s.toTensor()},n.prototype.conv3dDerFilter=function(t,n,e){for(var r=e.strideDepth,o=e.strideHeight,i=e.strideWidth,a=e.filterDepth,u=e.filterHeight,s=e.filterWidth,c=nr(e.filterShape,"float32"),l=c.values,f=c.strides,h=f[0],d=f[1],p=f[2],v=f[3],m=this.readSync(n.dataId),g=n.strides,y=g[0],x=g[1],b=g[2],w=g[3],C=this.readSync(t.dataId),E=t.strides,R=E[0],I=E[1],k=E[2],S=E[3],A=e.padInfo.front,T=e.padInfo.left,D=e.padInfo.top,N=0;N<a;++N)for(var F=Math.max(0,Math.ceil((A-N)/r)),_=Math.min(e.outDepth,(e.inDepth+A-N)/r),O=N*h,M=0;M<u;++M)for(var B=Math.max(0,Math.ceil((D-M)/o)),P=Math.min(e.outHeight,(e.inHeight+D-M)/o),L=M*d+O,W=0;W<s;++W)for(var U=Math.max(0,Math.ceil((T-W)/i)),z=Math.min(e.outWidth,(e.inWidth+T-W)/i),V=W*p+L,G=0;G<e.inChannels;++G)for(var H=G*v+V,q=0;q<e.outChannels;++q){for(var K=0,j=0;j<e.batchSize;++j)for(var X=j*R,Y=j*y,$=F;$<_;++$)for(var Q=(N+$*r-A)*I+X,J=$*x+Y,Z=B;Z<P;++Z)for(var tt=(M+Z*o-D)*k+Q,nt=Z*b+J,et=U;et<z;++et){var rt=et*w+nt;K+=C[(W+et*i-T)*S+tt+G]*m[rt+q]}l[H+q]=K}return c.toTensor()},n.prototype.fusedDepthwiseConv2D=function(t){var n=t.input,e=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights,u=this.depthwiseConv2D(n,e,r);return o&&(u=this.add(u,o)),i&&(u=qf(this,u,i,a)),u},n.prototype.depthwiseConv2D=function(t,n,e){Vf([t,n],"depthwiseConv2D");for(var r=e.filterHeight,o=e.filterWidth,i=e.dilationHeight,a=e.dilationWidth,u=e.padInfo.left,s=e.padInfo.top,c=e.outChannels/e.inChannels,l=nr(e.outShape,t.dtype),f=this.readSync(t.dataId),h=this.readSync(n.dataId),d=l.values,p=0;p<e.batchSize;++p)for(var v=p*t.strides[0],m=p*l.strides[0],g=0;g<e.outHeight;++g)for(var y=m+g*l.strides[1],x=g*e.strideHeight-u,b=0;b<r;++b){var w=x+b*i;if(!(w<0||w>=e.inHeight))for(var C=b*n.strides[0],E=v+w*t.strides[1],R=0;R<e.outWidth;++R)for(var I=y+R*l.strides[2],k=R*e.strideWidth-s,S=0;S<o;++S){var A=k+S*a;if(!(A<0||A>=e.inWidth))for(var T=C+S*n.strides[1],D=E+A*e.inChannels,N=I,F=T,_=0;_<e.inChannels;++_){for(var O=f[D+_],M=0;M<c;++M)d[N+M]+=O*h[F+M];N+=c,F+=c}}}return l.toTensor()},n.prototype.depthwiseConv2DDerInput=function(t,n,e){Vf([t,n],"depthwiseConv2DDerInput");for(var r=nr(e.inShape,"float32"),o=r.values,i=r.strides,a=i[0],u=i[1],s=i[2],c=this.readSync(t.dataId),l=t.strides,f=l[0],h=l[1],d=l[2],p=this.readSync(n.dataId),v=n.strides,m=v[0],g=v[1],y=v[2],x=e.batchSize,b=e.filterHeight,w=e.filterWidth,C=e.inChannels,E=e.inHeight,R=e.inWidth,I=e.outChannels,k=e.outHeight,S=e.outWidth,A=e.strideHeight,T=e.strideWidth,D=b-1-e.padInfo.top,N=w-1-e.padInfo.left,F=I/C,_=0;_<x;++_)for(var O=0;O<C;++O)for(var M=0;M<E;++M)for(var B=M-D,P=Math.max(0,Math.ceil(B/A)),L=Math.min(k,(b+B)/A),W=0;W<R;++W){for(var U=W-N,z=Math.max(0,Math.ceil(U/T)),V=Math.min(S,(w+U)/T),G=0,H=P;H<L;++H)for(var q=H*A-B,K=z;K<V;++K)for(var j=f*_+h*H+d*K,X=m*(b-1-q)+g*(w-1-(K*T-U))+y*O,Y=0;Y<F;++Y)G+=c[j+(O*F+Y)]*p[X+Y];o[a*_+u*M+s*W+O]=G}return r.toTensor()},n.prototype.depthwiseConv2DDerFilter=function(t,n,e){Vf([t,n],"depthwiseConv2DDerFilter");for(var r=e.strideHeight,o=e.strideWidth,i=e.filterHeight,a=e.filterWidth,u=nr(e.filterShape,"float32"),s=e.padInfo.left,c=e.padInfo.top,l=e.outChannels/e.inChannels,f=this.bufferSync(t),h=this.bufferSync(n),d=0;d<i;++d)for(var p=Math.max(0,Math.ceil((c-d)/r)),v=Math.min(e.outHeight,(e.inHeight+c-d)/r),m=0;m<a;++m)for(var g=Math.max(0,Math.ceil((s-m)/o)),y=Math.min(e.outWidth,(e.inWidth+s-m)/o),x=0;x<e.outChannels;++x){for(var b=Math.trunc(x/l),w=x%l,C=0,E=0;E<e.batchSize;++E)for(var R=p;R<v;++R)for(var I=d+R*r-c,k=g;k<y;++k){var S=m+k*o-s;C+=f.get(E,I,S,b)*h.get(E,R,k,x)}u.set(C,d,m,b,w)}return u.toTensor()},n.prototype.tile=function(t,n){return Vf(t,"tile"),Ui(this.bufferSync(t),n)},n.prototype.pad=function(t,n,e){Vf(t,"pad");var r=n.map((function(n,e){return n[0]+t.shape[e]+n[1]})),o=n.map((function(t){return t[0]})),i=this.bufferSync(t),a=nr(r,t.dtype);0!==e&&a.values.fill(e);for(var u=0;u<t.size;u++){var s=i.indexToLoc(u),c=s.map((function(t,n){return t+o[n]}));a.set.apply(a,[i.get.apply(i,s)].concat(c))}return a.toTensor()},n.prototype.gather=function(t,n,e){Vf([t,n],"gather");var r=t.shape.slice(),o=this.readSync(n.dataId);r[e]=o.length;for(var i=nr(r,t.dtype),a=this.bufferSync(t),u=0;u<i.size;++u){var s=i.indexToLoc(u),c=s.slice();c[e]=o[s[e]];var l=a.locToIndex(c);i.values[u]=a.values[l]}return i.toTensor()},n.prototype.batchToSpaceND=function(t,n,e){Vf([t],"batchToSpaceND");var r=n.reduce((function(t,n){return t*n})),o=pr(t.shape,n,r),i=vr(o.length,n.length),a=mr(t.shape,n,r),u=gr(e,n.length),s=yr(a,e,n.length);return ui(t.reshape(o),i).reshape(a).slice(u,s)},n.prototype.spaceToBatchND=function(t,n,e){Vf([t],"spaceToBatchND");var r=n.reduce((function(t,n){return t*n})),o=[[0,0]];o.push.apply(o,e);for(var i=1+n.length;i<t.shape.length;++i)o.push([0,0]);var a=t.pad(o),u=pr(a.shape,n,r,!1),s=vr(u.length,n.length,!1),c=mr(a.shape,n,r,!1);return ui(a.reshape(u),s).reshape(c)},n.prototype.maxPool=function(t,n){return Vf(t,"maxPool"),Gf(this.readSync(t.dataId),t.shape,t.dtype,t.strides,n,"max").toTensor()},n.prototype.maxPoolBackprop=function(t,n,e,r){Vf([n,e],"maxPoolBackprop");for(var o=this.readSync(n.dataId),i=nr(r.outShape,n.dtype,Hf(o,n.shape,n.dtype,r).values),a=r.strideHeight,u=r.strideWidth,s=r.dilationHeight,c=r.dilationWidth,l=r.effectiveFilterHeight,f=r.effectiveFilterWidth,h=f-1-r.padInfo.left,d=l-1-r.padInfo.top,p=nr(n.shape,"float32"),v=this.bufferSync(t),m=0;m<r.batchSize;++m)for(var g=0;g<r.inChannels;++g)for(var y=0;y<r.inHeight;++y)for(var x=0;x<r.inWidth;++x){for(var b=y-d,w=x-h,C=0,E=0;E<l;E+=s){var R=(b+E)/a;if(!(R<0||R>=r.outHeight||Math.floor(R)!==R))for(var I=0;I<f;I+=c){var k=(w+I)/u;if(!(k<0||k>=r.outWidth||Math.floor(k)!==k)){var S=l*f-1-i.get(m,R,k,g)===E*f+I?1:0;0!==S&&(C+=v.get(m,R,k,g)*S)}}}p.set(C,m,y,x,g)}return p.toTensor()},n.prototype.avgPoolBackprop=function(t,n,e){Vf([t,n],"avgPoolBackprop");for(var r=e.strideHeight,o=e.strideWidth,i=e.filterHeight,a=e.filterWidth,u=e.dilationHeight,s=e.dilationWidth,c=e.effectiveFilterHeight,l=e.effectiveFilterWidth,f=l-1-e.padInfo.left,h=c-1-e.padInfo.top,d=nr(n.shape,"float32"),p=1/(i*a),v=this.bufferSync(t),m=0;m<e.batchSize;++m)for(var g=0;g<e.inChannels;++g)for(var y=0;y<e.inHeight;++y)for(var x=0;x<e.inWidth;++x){for(var b=y-h,w=x-f,C=0,E=0;E<c;E+=u){var R=(b+E)/r;if(!(R<0||R>=e.outHeight||Math.floor(R)!==R))for(var I=0;I<l;I+=s){var k=(w+I)/o;k<0||k>=e.outWidth||Math.floor(k)!==k||(C+=v.get(m,R,k,g))}}d.set(C*p,m,y,x,g)}return d.toTensor()},n.prototype.pool3d=function(t,n,e){Vf(t,"pool3d");for(var r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.dilationDepth,u=n.dilationHeight,s=n.dilationWidth,c=n.effectiveFilterDepth,l=n.effectiveFilterHeight,f=n.effectiveFilterWidth,h=n.padInfo.front,d=n.padInfo.top,p=n.padInfo.left,v="max"===e?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=this.readSync(t.dataId),g=nr(n.outShape,t.dtype),y=g.values,x=n.outShape[1]*n.outShape[2]*n.outShape[3]*n.outShape[4],b=n.outShape[2]*n.outShape[3]*n.outShape[4],w=n.outShape[3]*n.outShape[4],C=n.outShape[4],E=0;E<n.batchSize;++E)for(var R=E*x,I=E*t.strides[0],k=0;k<n.inChannels;++k)for(var S=0;S<n.outDepth;++S){for(var A=S*r-h,T=A;T<0;)T+=a;for(var D=Math.min(n.inDepth,c+A),N=R+S*b,F=0;F<n.outHeight;++F){for(var _=F*o-d,O=_;O<0;)O+=u;for(var M=Math.min(n.inHeight,l+_),B=N+F*w,P=0;P<n.outWidth;++P){for(var L=P*i-p,W=L;W<0;)W+=s;for(var U=Math.min(n.inWidth,f+L),z=B+P*C,V=v,G=0,H=0,q=T;q<D;q+=a){for(var K=I+q*t.strides[1],j=O;j<M;j+=u){for(var X=K+j*t.strides[2],Y=W;Y<U;Y+=s){var $=m[X+Y*t.strides[3]+k];if("max"===e&&$>V?V=$:"avg"===e&&(G+=$,H++),isNaN(V))break}if(isNaN(V))break}if(isNaN(V))break}y[z+k]="avg"===e?G/H:V}}}return g.toTensor()},n.prototype.avgPool3d=function(t,n){return Vf(t,"avgPool3d"),this.pool3d(t,n,"avg").toFloat()},n.prototype.avgPool3dBackprop=function(t,n,e){Vf([t,n],"avgPool3dBackprop");for(var r=e.strideDepth,o=e.strideHeight,i=e.strideWidth,a=e.filterDepth,u=e.filterHeight,s=e.filterWidth,c=e.dilationDepth,l=e.dilationHeight,f=e.dilationWidth,h=e.effectiveFilterDepth,d=e.effectiveFilterHeight,p=e.effectiveFilterWidth,v=h-1-e.padInfo.front,m=p-1-e.padInfo.left,g=d-1-e.padInfo.top,y=nr(n.shape,"float32"),x=1/(a*u*s),b=this.bufferSync(t),w=0;w<e.batchSize;++w)for(var C=0;C<e.inChannels;++C)for(var E=0;E<e.inDepth;++E)for(var R=0;R<e.inHeight;++R)for(var I=0;I<e.inWidth;++I){for(var k=E-v,S=R-g,A=I-m,T=0,D=0;D<h;D+=c){var N=(k+D)/r;if(!(N<0||N>=e.outDepth||Math.floor(N)!==N))for(var F=0;F<d;F+=l){var _=(S+F)/o;if(!(_<0||_>=e.outHeight||Math.floor(_)!==_))for(var O=0;O<p;O+=f){var M=(A+O)/i;M<0||M>=e.outWidth||Math.floor(M)!==M||(T+=b.get(w,N,_,M,C))}}}y.set(T*x,w,E,R,I,C)}return y.toTensor()},n.prototype.maxPool3d=function(t,n){return Vf(t,"maxPool3d"),this.pool3d(t,n,"max").toFloat()},n.prototype.maxPool3dPositions=function(t,n){for(var e=nr(n.outShape,"int32"),r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.dilationDepth,u=n.dilationHeight,s=n.dilationWidth,c=n.effectiveFilterDepth,l=n.effectiveFilterHeight,f=n.effectiveFilterWidth,h=n.padInfo.front,d=n.padInfo.top,p=n.padInfo.left,v=this.bufferSync(t),m=0;m<n.batchSize;++m)for(var g=0;g<n.inChannels;++g)for(var y=0;y<n.outDepth;++y){for(var x=y*r-h,b=x;b<0;)b+=a;for(var w=Math.min(n.inDepth,c+x),C=0;C<n.outHeight;++C){for(var E=C*o-d,R=E;R<0;)R+=u;for(var I=Math.min(n.inHeight,l+E),k=0;k<n.outWidth;++k){for(var S=k*i-p,A=S;A<0;)A+=s;for(var T=Math.min(n.inWidth,f+S),D=Number.NEGATIVE_INFINITY,N=-1,F=b;F<w;F+=a)for(var _=F-x,O=R;O<I;O+=u)for(var M=O-E,B=A;B<T;B+=s){var P=B-S,L=v.get(m,F,O,B,g);L>=D&&(D=L,N=_*l*f+M*l+P)}e.set(N,m,y,C,k,g)}}}return e.toTensor()},n.prototype.maxPool3dBackprop=function(t,n,e,r){Vf([n,e],"maxPool3dBackprop");for(var o=this.maxPool3dPositions(n,r),i=r.strideDepth,a=r.strideHeight,u=r.strideWidth,s=r.dilationDepth,c=r.dilationHeight,l=r.dilationWidth,f=r.effectiveFilterDepth,h=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=f-1-r.padInfo.front,v=d-1-r.padInfo.left,m=h-1-r.padInfo.top,g=nr(n.shape,"float32"),y=this.bufferSync(o),x=this.bufferSync(t),b=0;b<r.batchSize;++b)for(var w=0;w<r.inChannels;++w)for(var C=0;C<r.inDepth;++C)for(var E=0;E<r.inHeight;++E)for(var R=0;R<r.inWidth;++R){for(var I=C-p,k=E-m,S=R-v,A=0,T=0;T<f;T+=s){var D=(I+T)/i;if(!(D<0||D>=r.outDepth||Math.floor(D)!==D))for(var N=0;N<h;N+=c){var F=(k+N)/a;if(!(F<0||F>=r.outHeight||Math.floor(F)!==F))for(var _=0;_<d;_+=l){var O=(S+_)/u;if(!(O<0||O>=r.outWidth||Math.floor(O)!==O)){var M=f*h*d-1-y.get(b,D,F,O,w)===T*h*d+N*d+_?1:0;0!==M&&(A+=x.get(b,D,F,O,w)*M)}}}}g.set(A,b,C,E,R,w)}return g.toTensor()},n.prototype.cast=function(t,n){return Ei(t,n,this)},n.prototype.reshape=function(t,n){return Ri(t,n)},n.prototype.avgPool=function(t,n){return Vf(t,"avgPool"),Vf(t,"maxPool"),Gf(this.readSync(t.dataId),t.shape,t.dtype,t.strides,n,"avg").toTensor().toFloat()},n.prototype.resizeBilinear=function(t,n,e,r){Vf(t,"resizeBilinear");for(var o=t.shape,i=o[0],a=o[1],u=o[2],s=o[3],c=this.readSync(t.dataId),l=new Float32Array(F([i,n,e,s])),f=[r&&n>1?a-1:a,r&&e>1?u-1:u],h=[r&&n>1?n-1:n,r&&e>1?e-1:e],d=0,p=f[0]/h[0],v=f[1]/h[1],m=0;m<i;m++)for(var g=0;g<n;g++)for(var y=p*g,x=Math.floor(y),b=y-x,w=Math.min(a-1,Math.ceil(y)),C=m*t.strides[0]+x*t.strides[1],E=m*t.strides[0]+w*t.strides[1],R=0;R<e;R++)for(var I=v*R,k=Math.floor(I),S=I-k,A=Math.min(u-1,Math.ceil(I)),T=C+k*t.strides[2],D=E+k*t.strides[2],N=C+A*t.strides[2],_=E+A*t.strides[2],O=0;O<s;O++){var M=c[T+O],B=c[D+O],P=M+(c[N+O]-M)*S,L=P+(B+(c[_+O]-B)*S-P)*b;l[d++]=L}return Fe(l,[i,n,e,s])},n.prototype.resizeBilinearBackprop=function(t,n,e){Vf([t,n],"resizeBilinearBackprop");for(var r=n.shape,o=r[0],i=r[1],a=r[2],u=r[3],s=t.shape,c=s[1],l=s[2],f=new Float32Array(o*i*a*u),h=[e&&c>1?i-1:i,e&&l>1?a-1:a],d=[e&&c>1?c-1:c,e&&l>1?l-1:l],p=h[0]/d[0],v=h[1]/d[1],m=this.readSync(t.dataId),g=0,y=0;y<o;y++)for(var x=y*n.strides[0],b=0;b<c;b++)for(var w=b*p,C=Math.floor(w),E=Math.min(Math.ceil(w),i-1),R=x+C*n.strides[1],I=x+E*n.strides[1],k=w-C,S=1-k,A=0;A<l;A++)for(var T=A*v,D=Math.floor(T),N=Math.min(Math.ceil(T),a-1),F=T-D,_=1-F,O=R+D*n.strides[2],M=R+N*n.strides[2],B=I+D*n.strides[2],P=I+N*n.strides[2],L=S*_,W=S*F,U=k*_,z=k*F,V=0;V<u;V++){var G=m[g++];f[O+V]+=G*L,f[M+V]+=G*W,f[B+V]+=G*U,f[P+V]+=G*z}return Le(f,[o,a,i,u],n.dtype)},n.prototype.resizeNearestNeighbor=function(t,n,e,r){Vf(t,"resizeNearestNeighbor");for(var o=t.shape,i=o[0],a=o[1],u=o[2],s=o[3],c=this.readSync(t.dataId),l=new Float32Array(i*n*e*s),f=[r&&n>1?a-1:a,r&&e>1?u-1:u],h=[r&&n>1?n-1:n,r&&e>1?e-1:e],d=f[0]/h[0],p=f[1]/h[1],v=0,m=0;m<i;m++)for(var g=m*t.strides[0],y=0;y<n;y++)for(var x=d*y,b=g+Math.min(a-1,r?Math.round(x):Math.floor(x))*t.strides[1],w=0;w<e;w++)for(var C=p*w,E=b+Math.min(u-1,r?Math.round(C):Math.floor(C))*t.strides[2],R=0;R<s;R++){var I=c[E+R];l[v++]=I}return Fe(l,[i,n,e,s],t.dtype)},n.prototype.resizeNearestNeighborBackprop=function(t,n,e){Vf([t,n],"resizeNearestNeighborBackprop");for(var r=n.shape,o=r[0],i=r[1],a=r[2],u=r[3],s=t.shape,c=s[1],l=s[2],f=new Float32Array(o*i*a*u),h=this.readSync(t.dataId),d=[e&&c>1?i-1:i,e&&l>1?a-1:a],p=[e&&c>1?c-1:c,e&&l>1?l-1:l],v=d[0]/p[0],m=d[1]/p[1],g=1/v,y=1/m,x=2*Math.ceil(g)+2,b=2*Math.ceil(y)+2,w=0;w<o;w++)for(var C=w*n.strides[0],E=0;E<i;E++)for(var R=C+E*n.strides[1],I=Math.floor(E*g),k=Math.floor(I-x/2),S=0;S<a;S++)for(var A=R+S*n.strides[2],T=Math.floor(S*y),D=Math.floor(T-b/2),N=0;N<u;N++){for(var F=0,_=0;_<x;_++){var O=_+k;if(!(O<0||O>=c)){var M=C+O*t.strides[1],B=O*v;if(E===Math.min(i-1,e?Math.round(B):Math.floor(B)))for(var P=0;P<b;P++){var L=P+D;if(!(L<0||L>=l)){var W=M+L*t.strides[2],U=L*m;S===Math.min(a-1,e?Math.round(U):Math.floor(U))&&(F+=h[W+N])}}}}f[A+N]=F}return Le(f,n.shape,n.dtype)},n.prototype.batchNormalization=function(t,n,e,r,o,i){Vf([t,n,e,o,i],"batchNorm");for(var a=this.readSync(t.dataId),u=this.readSync(n.dataId),s=this.readSync(e.dataId),c=o?this.readSync(o.dataId):new Float32Array([1]),l=i?this.readSync(i.dataId):new Float32Array([0]),f=new Float32Array(a.length),h=l.length,d=c.length,p=s.length,v=u.length,m=0,g=0,y=0,x=0,b=0;b<a.length;++b)f[b]=l[m++]+(a[b]-u[g++])*c[y++]/Math.sqrt(s[x++]+r),m>=h&&(m=0),g>=v&&(g=0),y>=d&&(y=0),x>=p&&(x=0);return Le(f,t.shape)},n.prototype.localResponseNormalization4D=function(t,n,e,r,o){Vf(t,"localResponseNormalization4D");var i=t.shape[3],a=i-1,u=this.readSync(t.dataId),s=t.size,c=new Float32Array(s);function l(t){for(var e=t%i,r=t-e+Math.max(0,e-n),o=t-e+Math.min(e+n,a),s=0;r<=o;r++){var c=u[r];s+=c*c}return s}for(var f=0;f<s;f++){var h=l(f),d=u[f]*Math.pow(e+r*h,-o);c[f]=d}return Le(c,t.shape)},n.prototype.LRNGrad=function(t,n,e,r,o,i,a){Vf(t,"LRNGrad");for(var u=t.shape[3],s=this.readSync(t.dataId),c=this.readSync(n.dataId),l=this.readSync(e.dataId),f=new Float32Array(t.size),h=t.size,d=0;d<h;d++){for(var p=d%u,v=d-p+Math.max(0,p-r),m=d-p+Math.min(u,p+r+1),g=0,y=v;y<m;y++)g+=Math.pow(c[y],2);for(g=i*g+o,y=v;y<m;y++){var x=-2*i*a*c[y]*l[d]/g;d===y&&(x+=Math.pow(g,-a)),x*=s[d],f[y]+=x}}return Le(f,t.shape)},n.prototype.multinomial=function(t,n,e,r){Vf(t,"multinomial");for(var o=n?t:ii(t),i=o.shape[0],a=o.shape[1],u=Ge([i,e],"int32"),s=this.readSync(u.dataId),c=this.readSync(o.dataId),l=0;l<i;++l){var f=l*a,h=new Float32Array(a-1);h[0]=c[f];for(var d=1;d<h.length;++d)h[d]=h[d-1]+c[f+d];for(var p=As(r.toString()),v=l*e,m=0;m<e;++m){var g=p();s[v+m]=h.length;for(var y=0;y<h.length;y++)if(g<h[y]){s[v+m]=y;break}}}return u},n.prototype.oneHot=function(t,n,e,r){Vf(t,"oneHot");var o=new Float32Array(t.size*n);o.fill(r);for(var i=this.readSync(t.dataId),a=0;a<t.size;++a)i[a]>=0&&i[a]<n&&(o[a*n+i[a]]=e);return Be(o,[t.size,n],"int32")},n.prototype.nonMaxSuppression=function(t,n,e,r,o){return Vf(t,"nonMaxSuppression"),_i(this.readSync(t.dataId),this.readSync(n.dataId),e,r,o)},n.prototype.fft=function(t){return this.fftBatch(t,!1)},n.prototype.ifft=function(t){return this.fftBatch(t,!0)},n.prototype.fftBatch=function(t,n){for(var e=t.shape[0],r=t.shape[1],o=nr(t.shape,"float32"),i=nr(t.shape,"float32"),a=De(t).as2D(e,r),u=Ne(t).as2D(e,r),s=0;s<e;s++)for(var c=a.slice([s,0],[1,r]),l=u.slice([s,0],[1,r]),f=Te(c,l),h=this.readSync(this.fftImpl(f,n).dataId),d=0;d<r;d++){var p=Ai(h,d);o.values[s*r+d]=p.real,i.values[s*r+d]=p.imag}return Te(o.toTensor(),i.toTensor()).as2D(e,r)},n.prototype.fftImpl=function(t,n){var e=t.as1D(),r=e.size;if(this.isExponentOf2(r)){var o=this.fftRadix2(e,r,n).as2D(t.shape[0],t.shape[1]);return n&&(o=Te(De(o).div(Oe(r)),Ne(o).div(Oe(r)))),o}var i=this.readSync(t.dataId),a=function(t){for(var n=new Float32Array(t.length/2),e=new Float32Array(t.length/2),r=0;r<t.length;r+=2)n[r/2]=t[r],e[r/2]=t[r+1];return{real:n,imag:e}}(this.fourierTransformByMatmul(i,r,n));return Te(a.real,a.imag).as2D(t.shape[0],t.shape[1])},n.prototype.isExponentOf2=function(t){return 0==(t&t-1)},n.prototype.fftRadix2=function(t,n,e){if(1===n)return t;var r=this.readSync(t.dataId),o=n/2,i=function(t){for(var n=Math.ceil(t.length/4),e=new Float32Array(n),r=new Float32Array(n),o=0;o<t.length;o+=4)e[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:e,imag:r}}(r),a=Te(i.real,i.imag).as1D(),u=function(t){for(var n=Math.floor(t.length/4),e=new Float32Array(n),r=new Float32Array(n),o=2;o<t.length;o+=4)e[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:e,imag:r}}(r),s=Te(u.real,u.imag).as1D();a=this.fftRadix2(a,o,e),s=this.fftRadix2(s,o,e);var c=function(t,n){for(var e=new Float32Array(t/2),r=new Float32Array(t/2),o=0;o<Math.ceil(t/2);o++){var i=(n?2:-2)*Math.PI*(o/t);e[o]=Math.cos(i),r[o]=Math.sin(i)}return{real:e,imag:r}}(n,e),l=Te(c.real,c.imag).mul(s),f=a.add(l),h=a.sub(l),d=De(f).concat(De(h)),p=Ne(f).concat(Ne(h));return Te(d,p).as1D()},n.prototype.fourierTransformByMatmul=function(t,n,e){for(var r=new Float32Array(2*n),o=0;o<n;o++){for(var i=0,a=0,u=0;u<n;u++){var s=Di(o*u,n,e),c=Ai(t,u);i+=c.real*s.real-c.imag*s.imag,a+=c.real*s.imag+c.imag*s.real}e&&(i/=n,a/=n),Ti(r,i,a,o)}return r},n.prototype.depthToSpace=function(t,n,e){A("NHWC"===e,(function(){return"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+e})),A(n>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+n}));for(var r=t.shape[0],o=t.shape[1],i=t.shape[2],a=t.shape[3],u=o*n,s=i*n,c=a/(n*n),l=this.readSync(t.dataId),f=new Float32Array(r*u*s*c),h=0,d=0;d<r;++d)for(var p=0;p<u;++p)for(var v=Math.floor(p/n),m=p%n,g=0;g<s;++g)for(var y=Math.floor(g/n),x=(m*n+g%n)*c,b=0;b<c;++b){var w=b+x+a*(y+i*(v+o*d));f[h++]=l[w]}return Le(f,[r,u,s,c])},n.prototype.broadcastedBinaryOp=function(t,n,e,r){var o=Pr(t.shape,n.shape),i=nr(o,e),a=this.readSync(t.dataId),u=this.readSync(n.dataId),s=Mr(t.shape,o),c=Mr(n.shape,o),l=i.values;if(s.length+c.length===0)for(var f=0;f<l.length;++f)l[f]=r(a[f%a.length],u[f%u.length]);else{var h=this.bufferSync(t),d=this.bufferSync(n),p=function(e){var o=i.indexToLoc(e),f=o.slice(-t.rank);s.forEach((function(t){return f[t]=0}));var p=h.locToIndex(f),v=o.slice(-n.rank);c.forEach((function(t){return v[t]=0}));var m=d.locToIndex(v);l[e]=r(a[p],u[m])};for(f=0;f<l.length;++f)p(f)}return i.toTensor()},n.prototype.broadcastedBinaryComplexOp=function(t,n,e){var r=Pr(t.shape,n.shape),o=nr(r,"float32"),i=nr(r,"float32"),a=this.readSync(t.dataId),u=this.readSync(n.dataId),s=Mr(t.shape,r),c=Mr(n.shape,r),l=o.values,f=i.values;if(s.length+c.length===0)for(var h=0;h<l.length;h++){var d=h%a.length,p=h%u.length,v=e(a[2*d],a[2*d+1],u[2*p],u[2*p+1]);l[h]=v.real,f[h]=v.imag}else{var m=this.bufferSync(this.data.get(t.dataId).complexTensors.real),g=this.bufferSync(this.data.get(n.dataId).complexTensors.real),y=function(r){var i=o.indexToLoc(r),h=i.slice(-t.rank);s.forEach((function(t){return h[t]=0}));var d=m.locToIndex(h),p=i.slice(-n.rank);c.forEach((function(t){return p[t]=0}));var v=g.locToIndex(p),y=e(a[2*d],a[2*d+1],u[2*v],u[2*v+1]);l[r]=y.real,f[r]=y.imag};for(h=0;h<l.length;h++)y(h)}return this.complex(o.toTensor(),i.toTensor())},n.prototype.split=function(t,n,e){return Wi(t,n,e)},n.prototype.dispose=function(){},n.prototype.floatPrecision=function(){return 32},n.prototype.epsilon=function(){return 1e-7},n.prototype.cropAndResize=function(t,n,e,r,o,i){for(var a=t.shape,u=a[0],s=a[1],c=a[2],l=a[3],f=n.shape[0],h=r[0],d=r[1],p=nr([f,h,d,l],"float32"),v=this.readSync(n.dataId),m=this.readSync(e.dataId),g=this.readSync(t.dataId),y=t.strides,x=p.strides,b=0;b<f;b++){var w=4*b,C=v[w],E=v[w+1],R=v[w+2],I=v[w+3],k=m[b];if(!(k>=u))for(var S=h>1?(R-C)*(s-1)/(h-1):0,A=d>1?(I-E)*(c-1)/(d-1):0,T=0;T<h;T++){var D=h>1?C*(s-1)+T*S:.5*(C+R)*(s-1);if(D<0||D>s-1)for(var N=0;N<d;N++)for(var F=0;F<l;F++){var _=F+N*x[2]+T*x[1]+b*x[0];p.values[_]=i}else if("bilinear"===o){var O=Math.floor(D),M=Math.ceil(D),B=D-O;for(N=0;N<d;N++)if((q=d>1?E*(c-1)+N*A:.5*(E+I)*(c-1))<0||q>c-1)for(F=0;F<l;F++)_=F+N*x[2]+T*x[1]+b*x[0],p.values[_]=i;else{var P=Math.floor(q),L=Math.ceil(q),W=q-P;for(F=0;F<l;F++){var U=g[_=F+P*y[2]+O*y[1]+k*y[0]],z=g[_=F+L*y[2]+O*y[1]+k*y[0]],V=g[_=F+P*y[2]+M*y[1]+k*y[0]],G=U+(z-U)*W,H=V+(g[_=F+L*y[2]+M*y[1]+k*y[0]]-V)*W;_=F+N*x[2]+T*x[1]+b*x[0],p.values[_]=G+(H-G)*B}}}else for(N=0;N<d;++N){var q;if((q=d>1?E*(c-1)+N*A:.5*(E+I)*(c-1))<0||q>c-1)for(F=0;F<l;F++)_=F+N*x[2]+T*x[1]+b*x[0],p.values[_]=i;else{var K=Math.round(q),j=Math.round(D);for(F=0;F<l;F++){var X=F+K*y[2]+j*y[1]+k*y[0],Y=F+N*x[2]+T*x[1]+b*x[0];p.values[Y]=g[X]}}}}}return p.toTensor()},n.prototype.sparseToDense=function(t,n,e,r){var o=Vo(0,t,e),i=o.sliceRank,a=o.numUpdates,u=o.sliceSize,s=o.strides,c=o.outputSize;return this.scatter(t,n,e,c,u,a,i,s,r,!1)},n.prototype.gatherND=function(t,n){var e=n.shape,r=e[e.length-1],o=Po(t,n),i=o[0],a=o[1],u=o[2],s=o[3];if(0===a)return Fe([],i,t.dtype);for(var c=new xt([a,u],t.dtype),l=this.readSync(n.dataId),f=this.readSync(t.dataId),h=0;h<a;h++){for(var d=[],p=0,v=0;v<r;v++){var m=l[h*r+v];p+=m*s[v],d.push(m)}if(p<0||p>=t.size/u)throw new Error("Invalid indices: "+d+" does not index into "+t.shape);for(var g=0;g<u;g++)c.values[h*u+g]=f[p*u+g]}return c.toTensor().reshape(i)},n.prototype.scatterND=function(t,n,e){var r=Vo(0,t,e),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,u=r.strides,s=r.outputSize,c=Oe(0);return this.scatter(t,n,e,s,a,i,o,u,c,!0)},n.prototype.fill=function(t,n,e){var r=G(e=e||Z(n),F(t));return r.fill(n),Ut.makeTensor(r,t,e,this)},n.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)},n.prototype.zerosLike=function(t){var n=G(t.dtype,F(t.shape));return this.makeOutput(n,t.shape,t.dtype)},n.prototype.linspace=function(t,n,e){return Ii(t,n,e)},n.prototype.scatter=function(t,n,e,r,o,i,a,u,s,c){var l=[r/o,o],f=this.readSync(t.dataId),h=this.readSync(n.dataId);if(0===r)return Fe([],e,n.dtype);var d=new xt(l,n.dtype);d.values.fill(this.readSync(s.dataId)[0]);for(var p=0;p<i;p++){for(var v=[],m=0,g=0;g<a;g++){var y=f[p*a+g];v.push(y),m+=y*u[g]}if(m<0||m>=r/o)throw new Error("Invalid indices: "+v+" does not index into "+e);for(var x=0;x<o;x++)c?d.values[m*o+x]+=h[p*o+x]:d.values[m*o+x]=0===n.rank?h[0]:h[p*o+x]}return d.toTensor().reshape(e)},n}(ci);function jf(t,n){return{kernelName:t,backendName:"cpu",kernelFunc:function(e){var r=e.inputs,o=e.backend,i=r,a=i.a,u=i.b,s=o;Vf([a,u],t);var c=s.data.get(a.dataId).values,l=s.data.get(u.dataId).values,f=n(a.shape,u.shape,c,l,a.dtype),h=f[0],d=f[1];return{dataId:s.write(h,d,a.dtype),shape:d,dtype:a.dtype}}}}function Xf(t){return function(n,e,r,o,i){var a=Pr(n,e),u=a.length,s=et(a),c=V(i,F(a)),l=n.length,f=e.length,h=et(n),d=et(e),p=Mr(n,a),v=Mr(e,a);if(p.length+v.length===0)for(var m=0;m<c.length;++m)c[m]=t(r[m%r.length],o[m%o.length]);else{var g=function(n){var e=ht(n,u,s),i=e.slice(-l);p.forEach((function(t){return i[t]=0}));var a=ft(i,l,h),m=e.slice(-f);v.forEach((function(t){return m[t]=0}));var g=ft(m,f,d);c[n]=t(r[a],o[g])};for(m=0;m<c.length;++m)g(m)}return[c,a]}}Ut.registerBackend("cpu",(function(){return new Kf}),1);var Yf=Xf((function(t,n){return t/n})),$f=jf(wr,Yf),Qf={kernelName:"MaxPoolWithArgmax",backendName:"cpu",kernelFunc:function(t){var n=t.inputs,e=t.attrs,r=t.backend,o=n.x,i=e,a=i.filterSize,u=i.strides,s=i.pad,c=i.includeBatchInIndex,l=r;Vf(o,"MaxPoolWithArgmax");var f=l.data.get(o.dataId).values,h=fi(o.shape,a,u,[1,1],s),d=function(t,n,e,r,o){var i=Gf(t,0,e,et(n),o,"max"),a=Hf(t,n,e,o,!0,r);return[i.values,a.values]}(f,o.shape,o.dtype,c,h),p=d[0],v=d[1],m=l.write(p,h.outShape,o.dtype),g=l.write(v,h.outShape,o.dtype);return[{dataId:m,shape:h.outShape,dtype:o.dtype},{dataId:g,shape:h.outShape,dtype:"int32"}]}},Jf={kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=t.attrs,o=n,i=o.boxes,a=o.scores,u=r,s=u.maxOutputSize,c=u.iouThreshold,l=u.scoreThreshold,f=u.softNmsSigma,h=e;Vf(i,"NonMaxSuppressionWithScore");var d=Oi(h.data.get(i.dataId).values,h.data.get(a.dataId).values,s,c,l,f);return[d.selectedIndices,d.selectedScores]}},Zf={kernelName:"Square",backendName:"cpu",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=n.x,o=e;Vf(r,"square");for(var i=o.data.get(r.dataId).values,a=new Float32Array(i.length),u=0;u<i.length;++u){var s=i[u];a[u]=s*s}return{dataId:o.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},th=Xf((function(t,n){var e=t-n;return e*e}));function nh(t,n,e,r,o){for(var i=F(n),a=n.length,u=et(n),s=et(o),c=V(e,F(o)),l=0;l<i;++l){for(var f=ht(l,a,u),h=new Array(f.length),d=0;d<h.length;d++)h[d]=f[r[d]];c[ft(h,a,s)]=t[l]}return c}for(var eh=0,rh=[Jf,Zf,jf(Er,th),$f,{kernelName:"Transpose",backendName:"cpu",kernelFunc:function(t){var n=t.inputs,e=t.attrs,r=t.backend,o=n.x,i=e.perm,a=r;Vf(o,"transpose");for(var u=o.shape.length,s=new Array(u),c=0;c<s.length;c++)s[c]=o.shape[i[c]];var l=nh(a.data.get(o.dataId).values,o.shape,o.dtype,i,s);return{dataId:a.write(l,s,o.dtype),shape:s,dtype:o.dtype}}},Qf];eh<rh.length;eh++)x(rh[eh]);for(var oh,ih=function(t){this.variableNames=["A"];var n=Xi(),e=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+r+".0, "+e+".0);\n\n        vec4 values = "+n.texture2D+"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    "},ah=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var n=Xi(),e=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2("+r+".0, "+e+".0);\n            vec4 values = "+n.texture2D+"(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        "+n.output+" = result;\n      }\n    "},uh=function(t,n){this.variableNames=["A"];for(var e=new Array(t.length),r=0;r<e.length;r++)e[r]=t[n[r]];this.outputShape=e,this.rank=e.length;var o=ia(this.rank),i=function(t){var n=t.length;if(n>6)throw Error("Transpose for rank "+n+" is not yet supported");for(var e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(n),o=0;o<t.length;o++)r[t[o]]=e[o];return r.join()}(n);this.userCode="\n    void main() {\n      "+o+" resRC = getOutputCoords();\n      setOutput(getA("+i+"));\n    }\n    "},sh=function(t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;for(var e=new Array(t.length),r=0;r<e.length;r++)e[r]=t[n[r]];if(this.outputShape=e,this.rank=e.length,this.rank>6)throw Error("Packed transpose for rank "+this.rank+" is not yet supported.");var o=ia(this.rank),i=Ki("rc",this.rank),a=new Array(this.rank);for(r=0;r<n.length;r++)a[n[r]]=i[r];var u="vec2("+a.slice(-2).join()+")",s="++"+i[this.rank-1]+" < "+e[this.rank-1],c="getChannel(getA("+a.join()+"), "+u+")";this.userCode="\n    void main() {\n      "+o+" rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = "+c+";\n      if("+s+") {\n        result[1] = "+c+";\n      }\n      --"+i[this.rank-1]+";\n      if(++"+i[this.rank-2]+" < "+e[this.rank-2]+") {\n        result[2] = "+c+";\n        if("+s+") {\n          result[3] = "+c+";\n        }\n      }\n      setOutput(result);\n    }\n    "},ch=0,lh=[{kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=t.attrs,o=n.pixels,i=r.numChannels,a="undefined"!=typeof HTMLVideoElement&&o instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&o instanceof HTMLImageElement,s=a?[o.videoWidth,o.videoHeight]:[o.width,o.height],c=s[0],l=s[1],f=[l,c],d=[l,c,i];(u||a)&&(null==oh&&(oh=document.createElement("canvas").getContext("2d")),oh.canvas.width=c,oh.canvas.height=l,oh.drawImage(o,0,0,c,l),o=oh.canvas);var p=e.makeTensorInfo(f,"int32");e.texData.get(p.dataId).usage=Ht.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(p.dataId),o);var v=h().getBool("WEBGL_PACK")?new ah(d):new ih(d),m=e.runWebGLProgram(v,[p],"int32");return e.disposeData(p.dataId),m}},{kernelName:wr,backendName:"webgl",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=n;return function(t,n,e){var r=new ya("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,n.shape);return h().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&(r=new ba("\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",t.shape,n.shape,!0)),e.runWebGLProgram(r,[t,n],"float32")}(r.a,r.b,e)}},{kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=t.attrs;de("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");var o=n,i=o.boxes,a=o.scores,u=r,s=u.maxOutputSize,c=u.iouThreshold,l=u.scoreThreshold,f=u.softNmsSigma,h=e,d=Oi(h.readSync(i.dataId),h.readSync(a.dataId),s,c,l,f);return[d.selectedIndices,d.selectedScores]}},{kernelName:"Square",backendName:"webgl",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=n.x,o=e,i=new ts(r.shape,"return x * x;");return o.runWebGLProgram(i,[r],r.dtype)}},{kernelName:Er,backendName:"webgl",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=n,o=r.a,i=r.b,a=e,u=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new ba("return (a - b) * (a - b);",o.shape,i.shape):new ya("return (a - b) * (a - b);",o.shape,i.shape);return a.compileAndRun(u,[o,i])}},{kernelName:"Transpose",backendName:"webgl",kernelFunc:function(t){for(var n,e=t.inputs,r=t.attrs,o=t.backend,i=e.x,a=r.perm,u=o,s=i.shape.length,c=new Array(s),l=0;l<c.length;l++)c[l]=i.shape[a[l]];if(u.shouldExecuteOnCPU([i])){var f=nh(u.texData.get(i.dataId).values,i.shape,i.dtype,a,c);n=u.makeTensorInfo(c,i.dtype),u.texData.get(n.dataId).values=f}else n=function(t,n,e){var r=h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new sh(t.shape,n):new uh(t.shape,n);return e.runWebGLProgram(r,[t],t.dtype)}(i,a,u);return n}},{kernelName:"MaxPoolWithArgmax",backendName:"webgl",kernelFunc:function(t){var n=t.inputs,e=t.attrs,r=t.backend,o=n.x,i=e,a=i.filterSize,u=i.strides,s=i.pad,c=i.includeBatchInIndex,l=r;A(4===o.shape.length,(function(){return"Error in maxPool: input must be rank 4 but got rank "+o.shape.length+"."}));var f=[1,1];A(wi(u,f),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides "+u+" and dilations '"+f+"'"}));var h=fi(o.shape,a,u,f,s),d=function(t,n,e,r){var o=new Du(e,"max",!1),i=r.runWebGLProgram(o,[t],"float32");return o=new Du(e,"max",!0,!0,n),[i,r.runWebGLProgram(o,[t],"float32")]}(o,c,h,l);return[d[0],d[1]]}}];ch<lh.length;ch++)x(lh[ch]);for(var fh=0,hh=[{kernelName:xr,inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1],o=Pr(e.shape,r.shape);return{a:function(){var n=t,r=Br(e.shape,o);return r.length>0&&(n=n.sum(r)),n.reshape(e.shape)},b:function(){var n=t,e=Br(r.shape,o);return e.length>0&&(n=n.sum(e)),n.reshape(r.shape)}}}},{kernelName:"AddN",saveAllInputs:!0,gradFunc:function(t,n){var e={};return n.forEach((function(n,r){e[r]=function(){return t.clone()}})),e}},{kernelName:Sr,gradFunc:function(t,n,e){for(var r=e,o=r.inputShape,i=r.shape,a=Array.from(i),u=o.length-1;u>=0;u--)if(o[u]===i[u])a[u]=1;else if(1!==o[u])throw new Error("broadcastTo(): ["+o+"] cannot be broadcast to ["+i+"].");var s=[];for(u=0;u<a.length;u++)a[u]>1&&s.push(u);return{x:function(){return t.sum(s,!0)}}}},{kernelName:wr,inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1],o=Pr(e.shape,r.shape);return{a:function(){var n=Bo(t,r.toFloat()),i=Br(e.shape,o);return i.length>0?Nl(n,i).reshape(e.shape):n},b:function(){var n=t.mul(e.toFloat()),i=Br(r.shape,o);i.length>0&&(n=Nl(n,i).reshape(r.shape));var a=bc(r);return eo(Bo(n,a.toFloat()))}}}},{kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:function(t,n,e){var r=e.varianceEpsilon,o=n[0],i=n[1],a=n[2],u=n[3],s=Ns(o),c=null==u?Oe(1):u,l=Br(i.shape,s.shape),f=[];if(1===i.rank){for(var h=0;h<s.shape.length-1;++h)f.push(s.shape[h]);f.push(1)}var d=Oo(o,i),p=To(t,c),v=io(Or(a,Oe(r))),m=To(To(To(v,v),v),Oe(-.5));return{x:function(){return 1===i.rank?sr(To(To(t,tc(v.as4D(1,1,1,i.shape[0]),f)),c),o.shape):sr(To(To(t,v),c),o.shape)},mean:function(){var t=To(To(v,Oe(-1)),p);return 1===i.rank&&(t=Nl(t,l)),sr(t,i.shape)},variance:function(){var t=To(To(m,d),p);return 1===i.rank&&(t=Nl(t,l)),sr(t,i.shape)},scale:function(){var n=To(d,v),e=To(t,n);return 1===i.rank&&(e=Nl(e,l)),sr(e,i.shape)},offset:function(){var n=t;return 1===i.rank&&(n=Nl(n,l)),sr(n,i.shape)}}}},{kernelName:Tr,gradFunc:function(t){return{x:function(){return t.toFloat()}}}},{kernelName:Ar,inputsToSave:["indices"],gradFunc:function(t,n){var e=n[0];return{indices:function(){return Ge(e.shape,"float32")}}}},{kernelName:Nr,inputsToSave:["x"],gradFunc:function(t,n,e){var r=n[0],o=e.paddings.map((function(t){return t[0]}));return{x:function(){return t.slice(o,r.shape)}}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return t.mul(e.toFloat().mul(2))}}}},{kernelName:Er,inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1],o=Oe(2);return{a:function(){return To(t,To(o,Oo(e,r)))},b:function(){return To(t,To(o,Oo(r,e)))}}}},{kernelName:Dr,inputsToSave:["x"],gradFunc:function(t,n,e){var r=n[0],o=e.reps;return{x:function(){var n=Xe(r);if(1===r.rank)for(var e=0;e<o[0];++e)n=n.add(t.slice([e*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(e=0;e<o[0];++e)for(var i=0;i<o[1];++i)n=n.add(t.slice([e*r.shape[0],i*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(e=0;e<o[0];++e)for(i=0;i<o[1];++i)for(var a=0;a<o[2];++a)n=n.add(t.slice([e*r.shape[0],i*r.shape[1],a*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(e=0;e<o[0];++e)for(i=0;i<o[1];++i)for(a=0;a<o[2];++a)for(var u=0;u<o[3];++u)n=n.add(t.slice([e*r.shape[0],i*r.shape[1],a*r.shape[2],u*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return n}}}},{kernelName:"Transpose",gradFunc:function(t,n,e){var r=Re(e.perm);return{x:function(){return ui(t,r)}}}}];fh<hh.length;fh++)b(hh[fh]);var dh=function(){function t(){}return t.prototype.fetch=function(t,n){return fetch(t,n)},t.prototype.now=function(){return performance.now()},t.prototype.encode=function(t,n){if("utf-8"!==n&&"utf8"!==n)throw new Error("Browser's encoder only supports utf-8, but got "+n);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)},t.prototype.decode=function(t,n){return new TextDecoder(n).decode(t)},t}();h().get("IS_BROWSER")&&h().setPlatform("browser",new dh);var ph,vh=function(){function t(){this.util=e(12),this.textEncoder=new this.util.TextEncoder}return t.prototype.fetch=function(t,n){return null!=h().global.fetch?h().global.fetch(t,n):(null==ph&&(ph=e(11)),ph(t,n))},t.prototype.now=function(){var t=r.hrtime();return 1e3*t[0]+t[1]/1e6},t.prototype.encode=function(t,n){if("utf-8"!==n&&"utf8"!==n)throw new Error("Node built-in encoder only supports utf-8, but got "+n);return this.textEncoder.encode(t)},t.prototype.decode=function(t,n){return 0===t.length?"":new this.util.TextDecoder(n).decode(t)},t}();h().get("IS_NODE")&&h().setPlatform("node",new vh);var mh={float32:4,int32:4,uint16:2,uint8:1,bool:1};function gh(t,n){for(var e={},r=0,o=function(n){var o=n.name,i=n.dtype,a=n.shape,u=F(a),s=void 0;if("quantization"in n){var c=n.quantization;if("uint8"!==c.dtype&&"uint16"!==c.dtype)throw new Error("Weight "+n.name+" has unknown quantization dtype "+c.dtype+". Supported quantization dtypes are: 'uint8' and 'uint16'.");var l=mh[c.dtype],f=t.slice(r,r+u*l),h="uint8"===c.dtype?new Uint8Array(f):new Uint16Array(f);if("float32"===i)s=Float32Array.from(h,(function(t){return t*c.scale+c.min}));else{if("int32"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);s=Int32Array.from(h,(function(t){return Math.round(t*c.scale+c.min)}))}r+=u*l}else if("string"===i){var d=F(n.shape);s=[];for(var p=0;p<d;p++){var v=new Uint32Array(t.slice(r,r+4))[0];r+=4;var m=new Uint8Array(t.slice(r,r+v));s.push(m),r+=v}}else{var g=mh[i];if(f=t.slice(r,r+u*g),"float32"===i)s=new Float32Array(f);else if("int32"===i)s=new Int32Array(f);else{if("bool"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);s=new Uint8Array(f)}r+=u*g}e[o]=Fe(s,a,i)},i=0,a=n;i<a.length;i++)o(a[i]);return e}function yh(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));var n=0,e=[];t.forEach((function(t){if(n+=t.byteLength,e.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)}));var r=new Uint8Array(n),o=0;return e.forEach((function(t){r.set(new Uint8Array(t.buffer),o),o+=t.byteLength})),r.buffer}var xh=void 0!==o&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function bh(t){return xh?o.byteLength(t):new Blob([t]).size}function wh(t){var n=0;t.forEach((function(t){n+=t.byteLength}));var e=new Uint8Array(n),r=0;return t.forEach((function(t){e.set(new Uint8Array(t),r),r+=t.byteLength})),e.buffer}function Ch(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);var n=t.split("/");return n[n.length-1]}function Eh(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:bh(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:bh(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var Rh=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(n){t.getInstance().saveRouters.push(n)},t.registerLoadRouter=function(n){t.getInstance().loadRouters.push(n)},t.getSaveHandlers=function(n){return t.getHandlers(n,"save")},t.getLoadHandlers=function(n,e){return t.getHandlers(n,"load",e)},t.getHandlers=function(n,e,r){var o=[];return("load"===e?t.getInstance().loadRouters:t.getInstance().saveRouters).forEach((function(t){var e=t(n,r);null!==e&&o.push(e)})),o},t}(),Ih="://",kh=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(n,e){A(null!=n,(function(){return"scheme must not be undefined or null."})),n.endsWith(Ih)&&(n=n.slice(0,n.indexOf(Ih))),A(n.length>0,(function(){return"scheme must not be an empty string."}));var r=t.getInstance();A(null==r.managers[n],(function(){return"A model store manager is already registered for scheme '"+n+"'."})),r.managers[n]=e},t.getManager=function(t){var n=this.getInstance().managers[t];if(null==n)throw new Error("Cannot find model manager for scheme '"+t+"'");return n},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function Sh(t){if(-1===t.indexOf(Ih))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+kh.getSchemes().join(","));return{scheme:t.split(Ih)[0],path:t.split(Ih)[1]}}function Ah(t,n,e){return void 0===e&&(e=!1),s(this,void 0,void 0,(function(){var r,o,i,a,u,s,l,f,h;return c(this,(function(c){switch(c.label){case 0:return A(t!==n,(function(){return"Old path and new path are the same: '"+t+"'"})),A((r=Rh.getLoadHandlers(t)).length>0,(function(){return"Copying failed because no load handler is found for source URL "+t+"."})),A(r.length<2,(function(){return"Copying failed because more than one ("+r.length+") load handlers for source URL "+t+"."})),o=r[0],A((i=Rh.getSaveHandlers(n)).length>0,(function(){return"Copying failed because no save handler is found for destination URL "+n+"."})),A(i.length<2,(function(){return"Copying failed because more than one ("+r.length+") save handlers for destination URL "+n+"."})),a=i[0],u=Sh(t).scheme,s=Sh(t).path,l=u===Sh(t).scheme,[4,o.load()];case 1:return f=c.sent(),e&&l?[4,kh.getManager(u).removeModel(s)]:[3,3];case 2:c.sent(),c.label=3;case 3:return[4,a.save(f)];case 4:return h=c.sent(),!e||l?[3,6]:[4,kh.getManager(u).removeModel(s)];case 5:c.sent(),c.label=6;case 6:return[2,h.modelArtifactsInfo]}}))}))}var Th="models_store",Dh="model_info_store";function Nh(){if(!h().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var t=window||self,n=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==n)throw new Error("The current browser does not appear to support IndexedDB.");return n}function Fh(t){var n=t.result;n.createObjectStore(Th,{keyPath:"modelPath"}),n.createObjectStore(Dh,{keyPath:"modelPath"})}var _h=function(){function t(t){if(this.indexedDB=Nh(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}return t.prototype.save=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(n){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return[2,this.databaseAction(this.modelPath,t)]}))}))},t.prototype.load=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){return[2,this.databaseAction(this.modelPath)]}))}))},t.prototype.databaseAction=function(t,n){var e=this;return new Promise((function(t,r){var o=e.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return Fh(o)},o.onsuccess=function(){var i=o.result;if(null==n){var a=i.transaction(Th,"readonly"),u=a.objectStore(Th).get(e.modelPath);u.onsuccess=function(){if(null==u.result)return i.close(),r(new Error("Cannot find model with path '"+e.modelPath+"' in IndexedDB."));t(u.result.modelArtifacts)},u.onerror=function(t){return i.close(),r(u.error)},a.oncomplete=function(){return i.close()}}else{var s,c=Eh(n),l=i.transaction(Dh,"readwrite"),f=l.objectStore(Dh),h=f.put({modelPath:e.modelPath,modelArtifactsInfo:c});h.onsuccess=function(){var o=(s=i.transaction(Th,"readwrite")).objectStore(Th).put({modelPath:e.modelPath,modelArtifacts:n,modelArtifactsInfo:c});o.onsuccess=function(){return t({modelArtifactsInfo:c})},o.onerror=function(t){var n=(f=l.objectStore(Dh)).delete(e.modelPath);n.onsuccess=function(){return i.close(),r(o.error)},n.onerror=function(t){return i.close(),r(o.error)}}},h.onerror=function(t){return i.close(),r(h.error)},l.oncomplete=function(){null==s?i.close():s.oncomplete=function(){return i.close()}}}},o.onerror=function(t){return r(o.error)}}))},t.URL_SCHEME="indexeddb://",t}(),Oh=function(t){return h().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(_h.URL_SCHEME)?(n=t.slice(_h.URL_SCHEME.length),new _h(n)):null;var n};Rh.registerSaveRouter(Oh),Rh.registerLoadRouter(Oh);var Mh=function(){function t(){this.indexedDB=Nh()}return t.prototype.listModels=function(){return s(this,void 0,void 0,(function(){var t=this;return c(this,(function(n){return[2,new Promise((function(n,e){var r=t.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=function(){return Fh(r)},r.onsuccess=function(){var t=r.result,o=t.transaction(Dh,"readonly"),i=o.objectStore(Dh).getAll();i.onsuccess=function(){for(var t={},e=0,r=i.result;e<r.length;e++){var o=r[e];t[o.modelPath]=o.modelArtifactsInfo}n(t)},i.onerror=function(n){return t.close(),e(i.error)},o.oncomplete=function(){return t.close()}},r.onerror=function(t){return e(r.error)}}))]}))}))},t.prototype.removeModel=function(t){return s(this,void 0,void 0,(function(){var n=this;return c(this,(function(e){var r;return t=(r=t).startsWith(_h.URL_SCHEME)?r.slice(_h.URL_SCHEME.length):r,[2,new Promise((function(e,r){var o=n.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return Fh(o)},o.onsuccess=function(){var n,i=o.result,a=i.transaction(Dh,"readwrite"),u=a.objectStore(Dh),s=u.get(t);s.onsuccess=function(){if(null==s.result)return i.close(),r(new Error("Cannot find model with path '"+t+"' in IndexedDB."));var o=u.delete(t),a=function(){var o=(n=i.transaction(Th,"readwrite")).objectStore(Th).delete(t);o.onsuccess=function(){return e(s.result.modelArtifactsInfo)},o.onerror=function(t){return r(s.error)}};o.onsuccess=a,o.onerror=function(t){return a(),i.close(),r(s.error)}},s.onerror=function(t){return i.close(),r(s.error)},a.oncomplete=function(){null==n?i.close():n.oncomplete=function(){return i.close()}}},o.onerror=function(t){return r(o.error)}}))]}))}))},t}();if(h().getBool("IS_BROWSER"))try{kh.registerManager(_h.URL_SCHEME,new Mh)}catch(a){}var Bh="/",Ph="tensorflowjs_models",Lh="info",Wh="model_topology",Uh="weight_specs",zh="weight_data",Vh="model_metadata";function Gh(t){return{info:[Ph,t,Lh].join(Bh),topology:[Ph,t,Wh].join(Bh),weightSpecs:[Ph,t,Uh].join(Bh),weightData:[Ph,t,zh].join(Bh),modelMetadata:[Ph,t,Vh].join(Bh)}}function Hh(t){var n=t.split(Bh);if(n.length<3)throw new Error("Invalid key format: "+t);return n.slice(1,n.length-1).join(Bh)}var qh=function(){function t(t){if(!h().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=Gh(this.modelPath)}return t.prototype.save=function(t){return s(this,void 0,void 0,(function(){var n,e,r;return c(this,(function(i){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");n=JSON.stringify(t.modelTopology),e=JSON.stringify(t.weightSpecs),r=Eh(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,e),this.LS.setItem(this.keys.weightData,function(t){if(xh)return o.from(t).toString("base64");for(var n=new Uint8Array(t),e="",r=0,i=n.length;r<i;r++)e+=String.fromCharCode(n[r]);return btoa(e)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),[2,{modelArtifactsInfo:r}]}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error("Failed to save model '"+this.modelPath+"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes="+r.modelTopologyBytes+", weightSpecsBytes="+r.weightSpecsBytes+", weightDataBytes="+r.weightDataBytes+".")}return[2]}))}))},t.prototype.load=function(){return s(this,void 0,void 0,(function(){var t,n,e,r,i,a,u;return c(this,(function(s){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error("In local storage, there is no model with name '"+this.modelPath+"'");if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if(n={},null==(e=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error("In local storage, the topology of model '"+this.modelPath+"' is missing.");if(n.modelTopology=e,null==(r=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error("In local storage, the weight specs of model '"+this.modelPath+"' are missing.");if(n.weightSpecs=r,null!=(i=this.LS.getItem(this.keys.modelMetadata))&&(a=JSON.parse(i),n.format=a.format,n.generatedBy=a.generatedBy,n.convertedBy=a.convertedBy,n.userDefinedMetadata=a.userDefinedMetadata),null==(u=this.LS.getItem(this.keys.weightData)))throw new Error("In local storage, the binary weight values of model '"+this.modelPath+"' are missing.");return n.weightData=function(t){if(xh){var n=o.from(t,"base64");return n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength)}for(var e=atob(t),r=new Uint8Array(e.length),i=0;i<e.length;++i)r.set([e.charCodeAt(i)],i);return r.buffer}(u),[2,n]}))}))},t.URL_SCHEME="localstorage://",t}(),Kh=function(t){return h().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(qh.URL_SCHEME)?(n=t.slice(qh.URL_SCHEME.length),new qh(n)):null;var n};Rh.registerSaveRouter(Kh),Rh.registerLoadRouter(Kh);var jh=function(){function t(){A(h().getBool("IS_BROWSER"),(function(){return"Current environment is not a web browser"})),A("undefined"==typeof window||void 0!==window.localStorage,(function(){return"Current browser does not appear to support localStorage"})),this.LS=window.localStorage}return t.prototype.listModels=function(){return s(this,void 0,void 0,(function(){var t,n,e,r,o,i;return c(this,(function(a){for(t={},n=Ph+Bh,e=Bh+Lh,r=0;r<this.LS.length;++r)(o=this.LS.key(r)).startsWith(n)&&o.endsWith(e)&&(i=Hh(o),t[i]=JSON.parse(this.LS.getItem(o)));return[2,t]}))}))},t.prototype.removeModel=function(t){return s(this,void 0,void 0,(function(){var n,e;return c(this,(function(r){var o;if(t=(o=t).startsWith(qh.URL_SCHEME)?o.slice(qh.URL_SCHEME.length):o,n=Gh(t),null==this.LS.getItem(n.info))throw new Error("Cannot find model at path '"+t+"'");return e=JSON.parse(this.LS.getItem(n.info)),this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),[2,e]}))}))},t}();if(h().getBool("IS_BROWSER"))try{kh.registerManager(qh.URL_SCHEME,new jh)}catch(a){}function Xh(t){return new Promise((function(t){return setTimeout(t)})).then(t)}var Yh=function(){function t(n){if(!h().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");n.startsWith(t.URL_SCHEME)&&(n=n.slice(t.URL_SCHEME.length)),null!=n&&0!==n.length||(n="model"),this.modelTopologyFileName=n+".json",this.weightDataFileName=n+".weights.bin"}return t.prototype.save=function(t){return s(this,void 0,void 0,(function(){var n,e,r,o,i,a;return c(this,(function(u){switch(u.label){case 0:if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");if(n=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"})),!(t.modelTopology instanceof ArrayBuffer))return[3,1];throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");case 1:return e=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:e},o=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),(i=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=o,[4,Xh((function(){return i.dispatchEvent(new MouseEvent("click"))}))];case 2:return u.sent(),null==t.weightData?[3,4]:((a=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,a.href=n,[4,Xh((function(){return a.dispatchEvent(new MouseEvent("click"))}))]);case 3:u.sent(),u.label=4;case 4:return[2,{modelArtifactsInfo:Eh(t)}]}}))}))},t.URL_SCHEME="downloads://",t}(),$h=function(){function t(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}return t.prototype.load=function(){return s(this,void 0,void 0,(function(){var t,n,e=this;return c(this,(function(r){return t=this.files[0],n=this.files.slice(1),[2,new Promise((function(r,o){var i=new FileReader;i.onload=function(i){var a=JSON.parse(i.target.result),u=a.modelTopology;if(null!=u){0===n.length&&r({modelTopology:u});var s=a.weightsManifest;if(null!=s){var c;try{c=e.checkManifestAndWeightFiles(s,n)}catch(t){return void o(t)}var l=[],f=[],h=[];s.forEach((function(t){t.paths.forEach((function(t){f.push(t),h.push(null)})),l.push.apply(l,t.weights)})),s.forEach((function(t){t.paths.forEach((function(t){var n=new FileReader;n.onload=function(n){var e=n.target.result,o=f.indexOf(t);h[o]=e,-1===h.indexOf(null)&&r({modelTopology:u,weightSpecs:l,weightData:wh(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},n.onerror=function(n){return o("Failed to weights data from file of path '"+t+"'.")},n.readAsArrayBuffer(c[t])}))}))}else o(new Error("weightManifest field is missing from file "+t.name))}else o(new Error("modelTopology field is missing from file "+t.name))},i.onerror=function(n){return o("Failed to read model topology and weights manifest JSON from file '"+t.name+"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.")},i.readAsText(t)}))]}))}))},t.prototype.checkManifestAndWeightFiles=function(t,n){for(var e=[],r=n.map((function(t){return Ch(t.name)})),o={},i=0,a=t;i<a.length;i++)a[i].paths.forEach((function(t){var i=Ch(t);if(-1!==e.indexOf(i))throw new Error("Duplicate file basename found in weights manifest: '"+i+"'");if(e.push(i),-1===r.indexOf(i))throw new Error("Weight file with basename '"+i+"' is not provided.");o[t]=n[r.indexOf(i)]}));if(e.length!==n.length)throw new Error("Mismatch in the number of files in weights manifest ("+e.length+") and the number of weight files provided ("+n.length+").");return o},t}();function Qh(t,n,e,r){!function(t){A(null!=t&&Array.isArray(t)&&t.length>0,(function(){return"promises must be a none empty array"}))}(t),function(t,n){A(t>=0&&t<=1,(function(){return"Progress fraction must be in range [0, 1], but got startFraction "+t})),A(n>=0&&n<=1,(function(){return"Progress fraction must be in range [0, 1], but got endFraction "+n})),A(n>=t,(function(){return"startFraction must be no more than endFraction, but got startFraction "+t+" and endFraction "+n}))}(e=null==e?0:e,r=null==r?1:r);var o=0;return Promise.all(t.map((function(i){return i.then((function(i){var a=e+ ++o/t.length*(r-e);return n(a),i})),i})))}function Jh(t,n){return s(this,void 0,void 0,(function(){var e,r,o,i,a,u,s,l,f;return c(this,(function(c){switch(c.label){case 0:return null==n&&(n={}),e=null==n.fetchFunc?h().platform.fetch:n.fetchFunc,r=t.map((function(t){return e(t,n.requestInit,{isBinary:!0})})),o=0,i=.5,null!=n.onProgress?[3,2]:[4,Promise.all(r)];case 1:return a=c.sent(),[3,4];case 2:return[4,Qh(r,n.onProgress,o,i)];case 3:a=c.sent(),c.label=4;case 4:return u=a.map((function(t){return t.arrayBuffer()})),s=.5,l=1,null!=n.onProgress?[3,6]:[4,Promise.all(u)];case 5:return f=c.sent(),[3,8];case 6:return[4,Qh(u,n.onProgress,s,l)];case 7:f=c.sent(),c.label=8;case 8:return[2,f]}}))}))}function Zh(t){var n=this;return function(e,r,o){return void 0===r&&(r=""),s(n,void 0,void 0,(function(){var n,i,a,u,s,l,f,h,d,p;return c(this,(function(c){switch(c.label){case 0:if(n=e.map((function(){return!1})),i={},a=null!=o?o.map((function(){return!1})):[],u=[],e.forEach((function(t,e){var r=0;t.weights.forEach((function(t){var s="quantization"in t?t.quantization.dtype:t.dtype,c=mh[s]*F(t.shape),l=function(){n[e]=!0,null==i[e]&&(i[e]=[]),i[e].push({manifestEntry:t,groupOffset:r,sizeBytes:c})};null!=o?o.forEach((function(n,e){n===t.name&&(l(),a[e]=!0)})):l(),u.push(t.name),r+=c}))})),!a.every((function(t){return t})))throw s=o.filter((function(t,n){return!a[n]})),new Error("Could not find weights in manifest with names: "+s.join(", ")+". \nManifest JSON has weights with names: "+u.join(", ")+".");return l=n.reduce((function(t,n,e){return n&&t.push(e),t}),[]),f=[],l.forEach((function(t){e[t].paths.forEach((function(t){var n=r+(r.endsWith("/")?"":"/")+t;f.push(n)}))})),[4,t(f)];case 1:return h=c.sent(),d={},p=0,l.forEach((function(t){for(var n=e[t].paths.length,r=0,o=0;o<n;o++)r+=h[p+o].byteLength;for(var a=new ArrayBuffer(r),u=new Uint8Array(a),s=0,c=0;c<n;c++){var l=new Uint8Array(h[p+c]);u.set(l,s),s+=l.byteLength}i[t].forEach((function(t){var n=gh(a.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var e in n)d[e]=n[e]})),p+=n})),[2,d]}}))}))}}Rh.registerSaveRouter((function(t){return h().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Yh.URL_SCHEME)?function(t){return void 0===t&&(t="model"),new Yh(t)}(t.slice(Yh.URL_SCHEME.length)):null}));var td=function(){function t(t,n){if(this.DEFAULT_METHOD="POST",null==n&&(n={}),this.weightPathPrefix=n.weightPathPrefix,this.onProgress=n.onProgress,null!=n.fetchFunc?(A("function"==typeof n.fetchFunc,(function(){return"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"})),this.fetch=n.fetchFunc):this.fetch=h().platform.fetch,A(null!=t&&t.length>0,(function(){return"URL path for http must not be null, undefined or empty."})),Array.isArray(t)&&A(2===t.length,(function(){return"URL paths for http must have a length of 2, (actual length is "+t.length+")."})),this.path=t,null!=n.requestInit&&null!=n.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=n.requestInit||{}}return t.prototype.save=function(t){return s(this,void 0,void 0,(function(){var n,e,r,o;return c(this,(function(i){switch(i.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return(n=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,e=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:e},n.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&n.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin"),[4,this.fetch(this.path,n)];case 1:if((o=i.sent()).ok)return[2,{modelArtifactsInfo:Eh(t),responses:[o]}];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+o.status+".")}}))}))},t.prototype.load=function(){return s(this,void 0,void 0,(function(){var t,n,e,r,o,i,a,u,s,l,f,h;return c(this,(function(c){switch(c.label){case 0:return[4,this.fetch(this.path,this.requestInit)];case 1:if(!(t=c.sent()).ok)throw new Error("Request to "+this.path+" failed with status code "+t.status+". Please verify this URL points to the model JSON of the model to load.");c.label=2;case 2:return c.trys.push([2,4,,5]),[4,t.json()];case 3:return n=c.sent(),[3,5];case 4:throw c.sent(),e="Failed to parse model JSON of response from "+this.path+".",this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e);case 5:if(r=n.modelTopology,o=n.weightsManifest,i=n.generatedBy,a=n.convertedBy,u=n.format,s=n.userDefinedMetadata,null==r&&null==o)throw new Error("The JSON from HTTP path "+this.path+" contains neither model topology or manifest for weights.");return null==o?[3,7]:[4,this.loadWeights(o)];case 6:h=c.sent(),l=h[0],f=h[1],c.label=7;case 7:return[2,{modelTopology:r,weightSpecs:l,weightData:f,userDefinedMetadata:s,generatedBy:i,convertedBy:a,format:u}]}}))}))},t.prototype.loadWeights=function(t){return s(this,void 0,void 0,(function(){var n,e,r,o,i,a,u,s,l,f,h;return c(this,(function(c){switch(c.label){case 0:for(n=Array.isArray(this.path)?this.path[1]:this.path,e=function(t){var n=t.lastIndexOf("/"),e=t.lastIndexOf("?");return[t.substring(0,n)+"/",e>n?t.substring(e):""]}(n),r=e[0],o=e[1],i=this.weightPathPrefix||r,a=[],u=0,s=t;u<s.length;u++)l=s[u],a.push.apply(a,l.weights);return f=[],t.forEach((function(t){t.paths.forEach((function(t){f.push(i+t+o)}))})),[4,Jh(f,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 1:return h=c.sent(),[2,[a,wh(h)]]}}))}))},t.URL_SCHEME_REGEX=/^https?:\/\//,t}();function nd(t){return null!=t.match(td.URL_SCHEME_REGEX)}var ed=function(t,n){return"undefined"==typeof fetch?null:(Array.isArray(t)?t.every((function(t){return nd(t)})):nd(t))?rd(t,{onProgress:n}):null};function rd(t,n){return new td(t,n)}Rh.registerSaveRouter(ed),Rh.registerLoadRouter(ed);var od,id=function(){function t(t){this.modelArtifacts=t}return t.prototype.load=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){return[2,this.modelArtifacts]}))}))},t}(),ad=function(){function t(t){this.saveHandler=t}return t.prototype.save=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(n){return[2,this.saveHandler(t)]}))}))},t}(),ud=Object.freeze({browserFiles:function(t){return new $h(t)},browserHTTPRequest:function(t,n){return rd(t,n)},concatenateArrayBuffers:wh,decodeWeights:gh,encodeWeights:function(t,n){return s(this,void 0,void 0,(function(){var e,r,o,i,a,u=this;return c(this,(function(l){switch(l.label){case 0:for(e=[],r=[],o=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t),i=function(i){var a=o[i],l=Array.isArray(t)?t[i].tensor:t[a];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype)throw new Error("Unsupported dtype in weight '"+a+"': "+l.dtype);var f={name:a,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){var h=new Promise((function(t){return s(u,void 0,void 0,(function(){var n,e,r,o,i,a,u;return c(this,(function(s){switch(s.label){case 0:return[4,l.bytes()];case 1:for(n=s.sent(),e=n.reduce((function(t,n){return t+n.length}),0)+4*n.length,r=new Uint8Array(e),o=0,i=0;i<n.length;i++)a=n[i],u=new Uint8Array(new Uint32Array([a.length]).buffer),r.set(u,o),o+=4,r.set(a,o),o+=a.length;return t(r),[2]}}))}))}));r.push(h)}else r.push(l.data());null!=n&&(f.group=n),e.push(f)},a=0;a<o.length;++a)i(a);return[4,Promise.all(r)];case 1:return[2,{data:yh(l.sent()),specs:e}]}}))}))},fromMemory:function(t,n,e,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new id(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new id({modelTopology:t})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new id({modelTopology:t,weightSpecs:n,weightData:e,trainingConfig:r}))},getLoadHandlers:function(t,n){return Rh.getLoadHandlers(t,n)},getModelArtifactsInfoForJSON:Eh,getSaveHandlers:function(t){return Rh.getSaveHandlers(t)},http:rd,isHTTPScheme:nd,loadWeights:function(t,n,e,r){return void 0===n&&(n=""),s(this,void 0,void 0,(function(){return c(this,(function(o){return[2,Zh((function(t){return Jh(t,{requestInit:r})}))(t,n,e)]}))}))},registerLoadRouter:function(t){return Rh.registerLoadRouter(t)},registerSaveRouter:function(t){return Rh.registerSaveRouter(t)},weightsLoaderFactory:Zh,withSaveHandler:function(t){return new ad(t)},copyModel:function(t,n){return s(this,void 0,void 0,(function(){return c(this,(function(e){return[2,Ah(t,n,!1)]}))}))},listModels:function(){return s(this,void 0,void 0,(function(){var t,n,e,r,o,i,a;return c(this,(function(u){switch(u.label){case 0:t=kh.getSchemes(),n={},e=0,r=t,u.label=1;case 1:return e<r.length?(o=r[e],[4,kh.getManager(o).listModels()]):[3,4];case 2:for(a in i=u.sent())n[o+Ih+a]=i[a];u.label=3;case 3:return e++,[3,1];case 4:return[2,n]}}))}))},moveModel:function(t,n){return s(this,void 0,void 0,(function(){return c(this,(function(e){return[2,Ah(t,n,!0)]}))}))},removeModel:function(t){return s(this,void 0,void 0,(function(){var n;return c(this,(function(e){return n=Sh(t),[2,kh.getManager(n.scheme).removeModel(n.path)]}))}))}}),sd=Ae({confusionMatrix_:function(t,n,e){var r=me(t,"labels","confusionMatrix"),o=me(n,"predictions","confusionMatrix");A(null==e||e>0&&Number.isInteger(e),(function(){return"If provided, numClasses must be a positive integer, but got "+e})),A(1===r.rank,(function(){return"Expected the rank of labels to be 1, but got "+r.rank})),A(1===o.rank,(function(){return"Expected the rank of predictions to be 1, but got "+o.rank})),A(r.shape[0]===o.shape[0],(function(){return"Mismatch in the number of examples: "+r.shape[0]+" vs. "+o.shape[0]+". Labels and predictions should have the same number of elements."})),A(e>0&&Number.isInteger(e),(function(){return"numClasses is required to be a positive integer, but got "+e}));var i=rc(r.asType("int32"),e),a=rc(o.asType("int32"),e);return i.transpose().matMul(a).asType("int32")}}),cd=Object.freeze({confusionMatrix:sd}),ld=Ae({fromPixels_:function(t,n){if(void 0===n&&(n=3),n>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var e=!1,r=!1,o=!1,i=!1,a=!1;if(t.data instanceof Uint8Array)e=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)i=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);a=!0}if(o&&o&&t.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");if(null!=m("FromPixels",Ut.backendName))return Ut.runKernel("FromPixels",{pixels:t},{numChannels:n});var u,s,c=o?[t.videoWidth,t.videoHeight]:[t.width,t.height],l=c[0],f=c[1];if(a?u=t.getContext("2d").getImageData(0,0,l,f).data:r||e?u=t.data:(i||o)&&(null==od&&(od=document.createElement("canvas").getContext("2d")),od.canvas.width=l,od.canvas.height=f,od.drawImage(t,0,0,l,f),u=od.getImageData(0,0,l,f).data),4===n)s=new Int32Array(u);else{var h=l*f;s=new Int32Array(h*n);for(var d=0;d<h;d++)for(var p=0;p<n;++p)s[d*n+p]=u[4*d+p]}return Pe(s,[f,l,n],"int32")}}),fd=Object.freeze({toPixels:function(t,n){return s(this,void 0,void 0,(function(){var e,r,o,i,a,u,s,l,f,h,d,p,v,m,g,y,x,b,w,C,E,R,I;return c(this,(function(c){switch(c.label){case 0:if(e=me(t,"img","toPixels"),t instanceof Et||(e=e.toInt()),2!==e.rank&&3!==e.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank "+e.rank+".");if(r=e.shape.slice(0,2),o=r[0],i=r[1],(a=2===e.rank?1:e.shape[2])>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);return[4,e.data()];case 1:return u=c.sent(),s=e.min(),l=e.max(),[4,Promise.all([s.data(),l.data()])];case 2:if(f=c.sent(),h=f[0],d=f[1],p=h[0],v=d[0],s.dispose(),l.dispose(),"float32"===e.dtype){if(p<0||v>1)throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range ["+p+" - "+v+"].")}else{if("int32"!==e.dtype)throw new Error("Unsupported type for toPixels: "+e.dtype+". Please use float32 or int32 tensors.");if(p<0||v>255)throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range ["+p+" - "+v+"].")}for(m="float32"===e.dtype?255:1,g=new Uint8ClampedArray(i*o*4),y=0;y<o*i;++y)x=void 0,b=void 0,w=void 0,C=void 0,1===a?(x=u[y]*m,b=u[y]*m,w=u[y]*m,C=255):3===a?(x=u[3*y]*m,b=u[3*y+1]*m,w=u[3*y+2]*m,C=255):4===a&&(x=u[4*y]*m,b=u[4*y+1]*m,w=u[4*y+2]*m,C=u[4*y+3]*m),g[0+(E=4*y)]=Math.round(x),g[E+1]=Math.round(b),g[E+2]=Math.round(w),g[E+3]=Math.round(C);return null!=n&&(n.width=i,n.height=o,R=n.getContext("2d"),I=new ImageData(g,i,o),R.putImageData(I,0,0)),e!==t&&e.dispose(),[2,g]}}))}))},fromPixels:ld}),hd=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,n){return new t(n)},t}(),dd=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(n){t.getMap().classNameMap[n.className]=[n,n.fromConfig]},t}();function pd(t){A(null!=t.className,(function(){return"Class being registered does not have the static className property defined."})),A("string"==typeof t.className,(function(){return"className is required to be a string, but got type "+typeof t.className})),A(t.className.length>0,(function(){return"Class being registered has an empty-string as its className, which is disallowed."})),dd.register(t)}var vd=Object.freeze({Serializable:hd,SerializationMap:dd,registerClass:pd}),md="1.7.4",gd=Object.freeze({gpgpu_util:vu,webgl_util:Hn,forceHalfFloat:function(){h().set("WEBGL_FORCE_F16_TEXTURES",!0)},MathBackendWebGL:xs,setWebGLContext:Xt,GPGPUContext:mu}),yd=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return u(n,t),n.prototype.minimize=function(t,n,e){void 0===n&&(n=!1);var r=this.computeGradients(t,e),o=r.value,i=r.grads;if(null!=e){var a=e.map((function(t){return{name:t.name,tensor:i[t.name]}}));this.applyGradients(a)}else this.applyGradients(i);return ne(i),n?o:(o.dispose(),null)},Object.defineProperty(n.prototype,"iterations",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),n.prototype.incrementIterations=function(){this.iterations_=this.iterations+1},n.prototype.computeGradients=function(t,n){return ei(t,n)},n.prototype.dispose=function(){null!=this.iterations_&&ne(this.iterations_)},n.prototype.saveIterations=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){return null==this.iterations_&&(this.iterations_=0),[2,{name:"iter",tensor:Oe(this.iterations_,"int32")}]}))}))},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("getWeights() is not implemented for this optimizer yet.")}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}))}))},n.prototype.extractIterations=function(t){return s(this,void 0,void 0,(function(){var n;return c(this,(function(e){switch(e.label){case 0:return n=this,[4,t[0].tensor.data()];case 1:return n.iterations_=e.sent()[0],[2,t.slice(1)]}}))}))},n}(hd);Object.defineProperty(yd,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var xd=function(t){function n(n,e,r){void 0===r&&(r=null);var o=t.call(this)||this;return o.learningRate=n,o.rho=e,o.epsilon=r,o.accumulatedGrads=[],o.accumulatedUpdates=[],null==r&&(o.epsilon=Ut.backend.epsilon()),o}return u(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Ut.registeredVariables[e];null==n.accumulatedGrads[r]&&(n.accumulatedGrads[r]={originalName:e+"/accum_grad",variable:te((function(){return Xe(o).variable(!1)}))}),null==n.accumulatedUpdates[r]&&(n.accumulatedUpdates[r]={originalName:e+"/accum_var",variable:te((function(){return Xe(o).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[e];if(null!=i){var a=n.accumulatedGrads[r].variable,u=n.accumulatedUpdates[r].variable;te((function(){var t=a.mul(n.rho).add(i.square().mul(1-n.rho)),e=u.add(n.epsilon).sqrt().div(a.add(n.epsilon).sqrt()).mul(i),r=u.mul(n.rho).add(e.square().mul(1-n.rho));a.assign(t),u.assign(r);var s=e.mul(-n.learningRate).add(o);o.assign(s)}))}})),this.incrementIterations()},n.prototype.dispose=function(){null!=this.accumulatedUpdates&&(ne(this.accumulatedGrads.map((function(t){return t.variable}))),ne(this.accumulatedUpdates.map((function(t){return t.variable}))))},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return t=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return[2,[n.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){var n;return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),n=t.length/2,this.accumulatedGrads=t.slice(0,n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(n,2*n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},n.fromConfig=function(t,n){return new t(n.learningRate,n.rho,n.epsilon)},n.className="Adadelta",n}(yd);pd(xd);var bd=function(t){function n(n,e){void 0===e&&(e=.1);var r=t.call(this)||this;return r.learningRate=n,r.initialAccumulatorValue=e,r.accumulatedGrads=[],r}return u(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Ut.registeredVariables[e];null==n.accumulatedGrads[r]&&(n.accumulatedGrads[r]={originalName:e+"/accumulator",variable:te((function(){return He(o.shape,n.initialAccumulatorValue).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[e];if(null!=i){var a=n.accumulatedGrads[r].variable;te((function(){var t=a.add(i.square());a.assign(t);var e=i.div(t.add(Ut.backend.epsilon()).sqrt()).mul(-n.learningRate).add(o);o.assign(e)}))}})),this.incrementIterations()},n.prototype.dispose=function(){null!=this.accumulatedGrads&&ne(this.accumulatedGrads.map((function(t){return t.variable})))},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulatedGrads.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),this.accumulatedGrads=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},n.fromConfig=function(t,n){return new t(n.learningRate,n.initialAccumulatorValue)},n.className="Adagrad",n}(yd);pd(bd);var wd=function(t){function n(n,e,r,o){void 0===o&&(o=null);var i=t.call(this)||this;return i.learningRate=n,i.beta1=e,i.beta2=r,i.epsilon=o,i.accumulatedFirstMoment=[],i.accumulatedSecondMoment=[],te((function(){i.accBeta1=Oe(e).variable(),i.accBeta2=Oe(r).variable()})),null==o&&(i.epsilon=Ut.backend.epsilon()),i}return u(n,t),n.prototype.applyGradients=function(t){var n=this,e=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);te((function(){var r=Oo(1,n.accBeta1),o=Oo(1,n.accBeta2);e.forEach((function(e,i){var a=Ut.registeredVariables[e];null==n.accumulatedFirstMoment[i]&&(n.accumulatedFirstMoment[i]={originalName:e+"/m",variable:te((function(){return Xe(a).variable(!1)}))}),null==n.accumulatedSecondMoment[i]&&(n.accumulatedSecondMoment[i]={originalName:e+"/v",variable:te((function(){return Xe(a).variable(!1)}))});var u=Array.isArray(t)?t[i].tensor:t[e];if(null!=u){var s=n.accumulatedFirstMoment[i].variable,c=n.accumulatedSecondMoment[i].variable,l=s.mul(n.beta1).add(u.mul(1-n.beta1)),f=c.mul(n.beta2).add(u.square().mul(1-n.beta2)),h=l.div(r),d=f.div(o);s.assign(l),c.assign(f);var p=h.div(d.sqrt().add(n.epsilon)).mul(-n.learningRate).add(a);a.assign(p)}})),n.accBeta1.assign(n.accBeta1.mul(n.beta1)),n.accBeta2.assign(n.accBeta2.mul(n.beta2))})),this.incrementIterations()},n.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ne(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedSecondMoment&&ne(this.accumulatedSecondMoment.map((function(t){return t.variable})))},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return t=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return[2,[n.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){var n,e=this;return c(this,(function(r){switch(r.label){case 0:return[4,this.extractIterations(t)];case 1:return t=r.sent(),te((function(){e.accBeta1.assign(No(e.beta1,e.iterations_+1)),e.accBeta2.assign(No(e.beta2,e.iterations_+1))})),n=t.length/2,this.accumulatedFirstMoment=t.slice(0,n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(n,2*n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},n.fromConfig=function(t,n){return new t(n.learningRate,n.beta1,n.beta2,n.epsilon)},n.className="Adam",n}(yd);pd(wd);var Cd=function(t){function n(n,e,r,o,i){void 0===o&&(o=null),void 0===i&&(i=0);var a=t.call(this)||this;return a.learningRate=n,a.beta1=e,a.beta2=r,a.epsilon=o,a.decay=i,a.accumulatedFirstMoment=[],a.accumulatedWeightedInfNorm=[],te((function(){a.iteration=Oe(0).variable(),a.accBeta1=Oe(e).variable()})),null==o&&(a.epsilon=Ut.backend.epsilon()),a}return u(n,t),n.prototype.applyGradients=function(t){var n=this,e=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);te((function(){var r=Oo(1,n.accBeta1),o=Bo(-n.learningRate,n.iteration.mul(n.decay).add(1));e.forEach((function(e,i){var a=Ut.registeredVariables[e];null==n.accumulatedFirstMoment[i]&&(n.accumulatedFirstMoment[i]={originalName:e+"/m",variable:Xe(a).variable(!1)}),null==n.accumulatedWeightedInfNorm[i]&&(n.accumulatedWeightedInfNorm[i]={originalName:e+"/v",variable:Xe(a).variable(!1)});var u=Array.isArray(t)?t[i].tensor:t[e];if(null!=u){var s=n.accumulatedFirstMoment[i].variable,c=n.accumulatedWeightedInfNorm[i].variable,l=s.mul(n.beta1).add(u.mul(1-n.beta1)),f=c.mul(n.beta2),h=u.abs(),d=f.maximum(h);s.assign(l),c.assign(d);var p=o.div(r).mul(l.div(d.add(n.epsilon))).add(a);a.assign(p)}})),n.iteration.assign(n.iteration.add(1)),n.accBeta1.assign(n.accBeta1.mul(n.beta1))})),this.incrementIterations()},n.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ne(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedWeightedInfNorm&&ne(this.accumulatedWeightedInfNorm.map((function(t){return t.variable})))},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("getWeights() is not implemented for Adamax yet.")}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("setWeights() is not implemented for Adamax yet.")}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},n.fromConfig=function(t,n){return new t(n.learningRate,n.beta1,n.beta2,n.epsilon,n.decay)},n.className="Adamax",n}(yd);pd(Cd);var Ed=function(t){function n(n){var e=t.call(this)||this;return e.learningRate=n,e.setLearningRate(n),e}return u(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Array.isArray(t)?t[r].tensor:t[e];if(null!=o){var i=Ut.registeredVariables[e];te((function(){var t=n.c.mul(o).add(i);i.assign(t)}))}})),this.incrementIterations()},n.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=ee(Oe(-t))},n.prototype.dispose=function(){this.c.dispose()},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()]]}}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:if(0!==(t=n.sent()).length)throw new Error("SGD optimizer does not have settable weights.");return[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate}},n.fromConfig=function(t,n){return new t(n.learningRate)},n.className="SGD",n}(yd);pd(Ed);var Rd=function(t){function n(n,e,r){void 0===r&&(r=!1);var o=t.call(this,n)||this;return o.learningRate=n,o.momentum=e,o.useNesterov=r,o.accumulations=[],o.m=Oe(o.momentum),o}return u(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Ut.registeredVariables[e];null==n.accumulations[r]&&(n.accumulations[r]={originalName:e+"/momentum",variable:te((function(){return Xe(o).variable(!1)}))});var i=n.accumulations[r].variable,a=Array.isArray(t)?t[r].tensor:t[e];null!=a&&te((function(){var t,e=n.m.mul(i).add(a);t=n.useNesterov?n.c.mul(a.add(e.mul(n.m))).add(o):n.c.mul(e).add(o),i.assign(e),o.assign(t)}))})),this.incrementIterations()},n.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&ne(this.accumulations.map((function(t){return t.variable})))},n.prototype.setMomentum=function(t){this.momentum=t},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulations.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),this.accumulations=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},n.fromConfig=function(t,n){return new t(n.learningRate,n.momentum,n.useNesterov)},n.className="Momentum",n}(Ed);pd(Rd);var Id=function(t){function n(n,e,r,o,i){void 0===e&&(e=.9),void 0===r&&(r=0),void 0===o&&(o=null),void 0===i&&(i=!1);var a=t.call(this)||this;if(a.learningRate=n,a.decay=e,a.momentum=r,a.epsilon=o,a.accumulatedMeanSquares=[],a.accumulatedMoments=[],a.accumulatedMeanGrads=[],a.centered=i,null==o&&(a.epsilon=Ut.backend.epsilon()),null==n)throw new Error("learningRate for RMSPropOptimizer must be defined.");return a}return u(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Ut.registeredVariables[e];null==n.accumulatedMeanSquares[r]&&(n.accumulatedMeanSquares[r]={originalName:e+"/rms",variable:te((function(){return Xe(o).variable(!1)}))}),null==n.accumulatedMoments[r]&&(n.accumulatedMoments[r]={originalName:e+"/momentum",variable:te((function(){return Xe(o).variable(!1)}))}),null==n.accumulatedMeanGrads[r]&&n.centered&&(n.accumulatedMeanGrads[r]={originalName:e+"/mg",variable:te((function(){return Xe(o).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[e];if(null!=i){var a=n.accumulatedMeanSquares[r].variable,u=n.accumulatedMoments[r].variable;te((function(){var t=a.mul(n.decay).add(i.square().mul(1-n.decay));if(n.centered){var e=n.accumulatedMeanGrads[r].variable,s=e.mul(n.decay).add(i.mul(1-n.decay)),c=u.mul(n.momentum).add(i.mul(n.learningRate).div(t.sub(s.square().add(n.epsilon)).sqrt()));a.assign(t),e.assign(s),u.assign(c);var l=o.sub(c);o.assign(l)}else{var f=a.mul(n.decay).add(i.square().mul(1-n.decay));c=u.mul(n.momentum).add(i.mul(n.learningRate).div(f.add(n.epsilon).sqrt())),a.assign(f),u.assign(c),l=o.sub(c),o.assign(l)}}))}})),this.incrementIterations()},n.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&ne(this.accumulatedMeanSquares.map((function(t){return t.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&ne(this.accumulatedMeanGrads.map((function(t){return t.variable}))),null!=this.accumulatedMoments&&ne(this.accumulatedMoments.map((function(t){return t.variable})))},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return t=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&t.push.apply(t,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return[2,[n.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){var n;return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),n=this.centered?t.length/3:t.length/2,this.accumulatedMeanSquares=t.slice(0,n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(n,2*n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*n,3*n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}}))),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},n.fromConfig=function(t,n){return new t(n.learningRate,n.decay,n.momentum,n.epsilon,n.centered)},n.className="RMSProp",n}(yd);pd(Id);var kd=function(){function t(){}return t.sgd=function(t){return new Ed(t)},t.momentum=function(t,n,e){return void 0===e&&(e=!1),new Rd(t,n,e)},t.rmsprop=function(t,n,e,r,o){return void 0===n&&(n=.9),void 0===e&&(e=0),void 0===r&&(r=null),void 0===o&&(o=!1),new Id(t,n,e,r,o)},t.adam=function(t,n,e,r){return void 0===t&&(t=.001),void 0===n&&(n=.9),void 0===e&&(e=.999),void 0===r&&(r=null),new wd(t,n,e,r)},t.adadelta=function(t,n,e){return void 0===t&&(t=.001),void 0===n&&(n=.95),void 0===e&&(e=null),new xd(t,n,e)},t.adamax=function(t,n,e,r,o){return void 0===t&&(t=.002),void 0===n&&(n=.9),void 0===e&&(e=.999),void 0===r&&(r=null),void 0===o&&(o=0),new Cd(t,n,e,r,o)},t.adagrad=function(t,n){return void 0===n&&(n=.1),new bd(t,n)},t}(),Sd={sgd:kd.sgd,momentum:kd.momentum,adadelta:kd.adadelta,adagrad:kd.adagrad,rmsprop:kd.rmsprop,adamax:kd.adamax,adam:kd.adam},Ad="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:void 0!==i?i:function(t){return t()};function Td(){return new Promise((function(t){return Ad((function(){return t()}))}))}Et.prototype.add=function(t){return Or(this,t)},Et.prototype.broadcastTo=function(t){return qs(this,t)},Et.prototype.div=function(t){return Bo(this,t)},Et.prototype.divNoNan=function(t){return Zs(this,t)},Et.prototype.squaredDifference=function(t){return wc(this,t)},Et.prototype.tile=function(t){return tc(this,t)},Et.prototype.oneHot=function(t,n,e){return void 0===n&&(n=1),void 0===e&&(e=0),rc(this,t,n,e)},Et.prototype.transpose=function(t){return ui(this,t)},Et.prototype.pad=function(t,n){return oc(this,t,n)},Et.prototype.batchNorm=function(t,n,e,r,o){return Ms(this,t,n,e,r,o)},wt=zf}.call(this,e(1),e(3),e(4).Buffer,e(8).setImmediate)},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n){t.exports=p5},function(t,n){var e,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var s,c=[],l=!1,f=-1;function h(){l&&s&&(l=!1,s.length?c=s.concat(c):f=-1,c.length&&d())}function d(){if(!l){var t=u(h);l=!0;for(var n=c.length;n;){for(s=c,c=[];++f<n;)s&&s[f].run();f=-1,n=c.length}s=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(n){try{return r.call(null,t)}catch(n){return r.call(this,t)}}}(t)}}function p(t,n){this.fun=t,this.array=n}function v(){}o.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)n[e-1]=arguments[e];c.push(new p(t,n)),1!==c.length||l||u(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,n,e){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=e(5),o=e(6),i=e(7);function a(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(t,n){if(a()<n)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(n)).__proto__=s.prototype:(null===t&&(t=new s(n)),t.length=n),t}function s(t,n,e){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(t,n,e);if("number"==typeof t){if("string"==typeof n)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,n,e)}function c(t,n,e,r){if("number"==typeof n)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&n instanceof ArrayBuffer?function(t,n,e,r){if(n.byteLength,e<0||n.byteLength<e)throw new RangeError("'offset' is out of bounds");if(n.byteLength<e+(r||0))throw new RangeError("'length' is out of bounds");n=void 0===e&&void 0===r?new Uint8Array(n):void 0===r?new Uint8Array(n,e):new Uint8Array(n,e,r);s.TYPED_ARRAY_SUPPORT?(t=n).__proto__=s.prototype:t=h(t,n);return t}(t,n,e,r):"string"==typeof n?function(t,n,e){"string"==typeof e&&""!==e||(e="utf8");if(!s.isEncoding(e))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(n,e),o=(t=u(t,r)).write(n,e);o!==r&&(t=t.slice(0,o));return t}(t,n,e):function(t,n){if(s.isBuffer(n)){var e=0|d(n.length);return 0===(t=u(t,e)).length||n.copy(t,0,0,e),t}if(n){if("undefined"!=typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!=typeof n.length||(r=n.length)!=r?u(t,0):h(t,n);if("Buffer"===n.type&&i(n.data))return h(t,n.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,n)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,n){if(l(n),t=u(t,n<0?0:0|d(n)),!s.TYPED_ARRAY_SUPPORT)for(var e=0;e<n;++e)t[e]=0;return t}function h(t,n){var e=n.length<0?0:0|d(n.length);t=u(t,e);for(var r=0;r<e;r+=1)t[r]=255&n[r];return t}function d(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function p(t,n){if(s.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var e=t.length;if(0===e)return 0;for(var r=!1;;)switch(n){case"ascii":case"latin1":case"binary":return e;case"utf8":case"utf-8":case void 0:return U(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*e;case"hex":return e>>>1;case"base64":return z(t).length;default:if(r)return U(t).length;n=(""+n).toLowerCase(),r=!0}}function v(t,n,e){var r=!1;if((void 0===n||n<0)&&(n=0),n>this.length)return"";if((void 0===e||e>this.length)&&(e=this.length),e<=0)return"";if((e>>>=0)<=(n>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return T(this,n,e);case"utf8":case"utf-8":return k(this,n,e);case"ascii":return S(this,n,e);case"latin1":case"binary":return A(this,n,e);case"base64":return I(this,n,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,n,e);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,n,e){var r=t[n];t[n]=t[e],t[e]=r}function g(t,n,e,r,o){if(0===t.length)return-1;if("string"==typeof e?(r=e,e=0):e>2147483647?e=2147483647:e<-2147483648&&(e=-2147483648),e=+e,isNaN(e)&&(e=o?0:t.length-1),e<0&&(e=t.length+e),e>=t.length){if(o)return-1;e=t.length-1}else if(e<0){if(!o)return-1;e=0}if("string"==typeof n&&(n=s.from(n,r)),s.isBuffer(n))return 0===n.length?-1:y(t,n,e,r,o);if("number"==typeof n)return n&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,n,e):Uint8Array.prototype.lastIndexOf.call(t,n,e):y(t,[n],e,r,o);throw new TypeError("val must be string, number or Buffer")}function y(t,n,e,r,o){var i,a=1,u=t.length,s=n.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||n.length<2)return-1;a=2,u/=2,s/=2,e/=2}function c(t,n){return 1===a?t[n]:t.readUInt16BE(n*a)}if(o){var l=-1;for(i=e;i<u;i++)if(c(t,i)===c(n,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===s)return l*a}else-1!==l&&(i-=i-l),l=-1}else for(e+s>u&&(e=u-s),i=e;i>=0;i--){for(var f=!0,h=0;h<s;h++)if(c(t,i+h)!==c(n,h)){f=!1;break}if(f)return i}return-1}function x(t,n,e,r){e=Number(e)||0;var o=t.length-e;r?(r=Number(r))>o&&(r=o):r=o;var i=n.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var u=parseInt(n.substr(2*a,2),16);if(isNaN(u))return a;t[e+a]=u}return a}function b(t,n,e,r){return V(U(n,t.length-e),t,e,r)}function w(t,n,e,r){return V(function(t){for(var n=[],e=0;e<t.length;++e)n.push(255&t.charCodeAt(e));return n}(n),t,e,r)}function C(t,n,e,r){return w(t,n,e,r)}function E(t,n,e,r){return V(z(n),t,e,r)}function R(t,n,e,r){return V(function(t,n){for(var e,r,o,i=[],a=0;a<t.length&&!((n-=2)<0);++a)e=t.charCodeAt(a),r=e>>8,o=e%256,i.push(o),i.push(r);return i}(n,t.length-e),t,e,r)}function I(t,n,e){return 0===n&&e===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(n,e))}function k(t,n,e){e=Math.min(t.length,e);for(var r=[],o=n;o<e;){var i,a,u,s,c=t[o],l=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=e)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(i=t[o+1]))&&(s=(31&c)<<6|63&i)>127&&(l=s);break;case 3:i=t[o+1],a=t[o+2],128==(192&i)&&128==(192&a)&&(s=(15&c)<<12|(63&i)<<6|63&a)>2047&&(s<55296||s>57343)&&(l=s);break;case 4:i=t[o+1],a=t[o+2],u=t[o+3],128==(192&i)&&128==(192&a)&&128==(192&u)&&(s=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&u)>65535&&s<1114112&&(l=s)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=f}return function(t){var n=t.length;if(n<=4096)return String.fromCharCode.apply(String,t);var e="",r=0;for(;r<n;)e+=String.fromCharCode.apply(String,t.slice(r,r+=4096));return e}(r)}n.Buffer=s,n.SlowBuffer=function(t){+t!=t&&(t=0);return s.alloc(+t)},n.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),n.kMaxLength=a(),s.poolSize=8192,s._augment=function(t){return t.__proto__=s.prototype,t},s.from=function(t,n,e){return c(null,t,n,e)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(t,n,e){return function(t,n,e,r){return l(n),n<=0?u(t,n):void 0!==e?"string"==typeof r?u(t,n).fill(e,r):u(t,n).fill(e):u(t,n)}(null,t,n,e)},s.allocUnsafe=function(t){return f(null,t)},s.allocUnsafeSlow=function(t){return f(null,t)},s.isBuffer=function(t){return!(null==t||!t._isBuffer)},s.compare=function(t,n){if(!s.isBuffer(t)||!s.isBuffer(n))throw new TypeError("Arguments must be Buffers");if(t===n)return 0;for(var e=t.length,r=n.length,o=0,i=Math.min(e,r);o<i;++o)if(t[o]!==n[o]){e=t[o],r=n[o];break}return e<r?-1:r<e?1:0},s.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(t,n){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return s.alloc(0);var e;if(void 0===n)for(n=0,e=0;e<t.length;++e)n+=t[e].length;var r=s.allocUnsafe(n),o=0;for(e=0;e<t.length;++e){var a=t[e];if(!s.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},s.byteLength=p,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var n=0;n<t;n+=2)m(this,n,n+1);return this},s.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var n=0;n<t;n+=4)m(this,n,n+3),m(this,n+1,n+2);return this},s.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var n=0;n<t;n+=8)m(this,n,n+7),m(this,n+1,n+6),m(this,n+2,n+5),m(this,n+3,n+4);return this},s.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?k(this,0,t):v.apply(this,arguments)},s.prototype.equals=function(t){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===s.compare(this,t)},s.prototype.inspect=function(){var t="",e=n.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,e).match(/.{2}/g).join(" "),this.length>e&&(t+=" ... ")),"<Buffer "+t+">"},s.prototype.compare=function(t,n,e,r,o){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===n&&(n=0),void 0===e&&(e=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),n<0||e>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&n>=e)return 0;if(r>=o)return-1;if(n>=e)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(r>>>=0),a=(e>>>=0)-(n>>>=0),u=Math.min(i,a),c=this.slice(r,o),l=t.slice(n,e),f=0;f<u;++f)if(c[f]!==l[f]){i=c[f],a=l[f];break}return i<a?-1:a<i?1:0},s.prototype.includes=function(t,n,e){return-1!==this.indexOf(t,n,e)},s.prototype.indexOf=function(t,n,e){return g(this,t,n,e,!0)},s.prototype.lastIndexOf=function(t,n,e){return g(this,t,n,e,!1)},s.prototype.write=function(t,n,e,r){if(void 0===n)r="utf8",e=this.length,n=0;else if(void 0===e&&"string"==typeof n)r=n,e=this.length,n=0;else{if(!isFinite(n))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");n|=0,isFinite(e)?(e|=0,void 0===r&&(r="utf8")):(r=e,e=void 0)}var o=this.length-n;if((void 0===e||e>o)&&(e=o),t.length>0&&(e<0||n<0)||n>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return x(this,t,n,e);case"utf8":case"utf-8":return b(this,t,n,e);case"ascii":return w(this,t,n,e);case"latin1":case"binary":return C(this,t,n,e);case"base64":return E(this,t,n,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,n,e);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function S(t,n,e){var r="";e=Math.min(t.length,e);for(var o=n;o<e;++o)r+=String.fromCharCode(127&t[o]);return r}function A(t,n,e){var r="";e=Math.min(t.length,e);for(var o=n;o<e;++o)r+=String.fromCharCode(t[o]);return r}function T(t,n,e){var r=t.length;(!n||n<0)&&(n=0),(!e||e<0||e>r)&&(e=r);for(var o="",i=n;i<e;++i)o+=W(t[i]);return o}function D(t,n,e){for(var r=t.slice(n,e),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function N(t,n,e){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+n>e)throw new RangeError("Trying to access beyond buffer length")}function F(t,n,e,r,o,i){if(!s.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(n>o||n<i)throw new RangeError('"value" argument is out of bounds');if(e+r>t.length)throw new RangeError("Index out of range")}function _(t,n,e,r){n<0&&(n=65535+n+1);for(var o=0,i=Math.min(t.length-e,2);o<i;++o)t[e+o]=(n&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function O(t,n,e,r){n<0&&(n=4294967295+n+1);for(var o=0,i=Math.min(t.length-e,4);o<i;++o)t[e+o]=n>>>8*(r?o:3-o)&255}function M(t,n,e,r,o,i){if(e+r>t.length)throw new RangeError("Index out of range");if(e<0)throw new RangeError("Index out of range")}function B(t,n,e,r,i){return i||M(t,0,e,4),o.write(t,n,e,r,23,4),e+4}function P(t,n,e,r,i){return i||M(t,0,e,8),o.write(t,n,e,r,52,8),e+8}s.prototype.slice=function(t,n){var e,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(n=void 0===n?r:~~n)<0?(n+=r)<0&&(n=0):n>r&&(n=r),n<t&&(n=t),s.TYPED_ARRAY_SUPPORT)(e=this.subarray(t,n)).__proto__=s.prototype;else{var o=n-t;e=new s(o,void 0);for(var i=0;i<o;++i)e[i]=this[i+t]}return e},s.prototype.readUIntLE=function(t,n,e){t|=0,n|=0,e||N(t,n,this.length);for(var r=this[t],o=1,i=0;++i<n&&(o*=256);)r+=this[t+i]*o;return r},s.prototype.readUIntBE=function(t,n,e){t|=0,n|=0,e||N(t,n,this.length);for(var r=this[t+--n],o=1;n>0&&(o*=256);)r+=this[t+--n]*o;return r},s.prototype.readUInt8=function(t,n){return n||N(t,1,this.length),this[t]},s.prototype.readUInt16LE=function(t,n){return n||N(t,2,this.length),this[t]|this[t+1]<<8},s.prototype.readUInt16BE=function(t,n){return n||N(t,2,this.length),this[t]<<8|this[t+1]},s.prototype.readUInt32LE=function(t,n){return n||N(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},s.prototype.readUInt32BE=function(t,n){return n||N(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},s.prototype.readIntLE=function(t,n,e){t|=0,n|=0,e||N(t,n,this.length);for(var r=this[t],o=1,i=0;++i<n&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*n)),r},s.prototype.readIntBE=function(t,n,e){t|=0,n|=0,e||N(t,n,this.length);for(var r=n,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*n)),i},s.prototype.readInt8=function(t,n){return n||N(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},s.prototype.readInt16LE=function(t,n){n||N(t,2,this.length);var e=this[t]|this[t+1]<<8;return 32768&e?4294901760|e:e},s.prototype.readInt16BE=function(t,n){n||N(t,2,this.length);var e=this[t+1]|this[t]<<8;return 32768&e?4294901760|e:e},s.prototype.readInt32LE=function(t,n){return n||N(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},s.prototype.readInt32BE=function(t,n){return n||N(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},s.prototype.readFloatLE=function(t,n){return n||N(t,4,this.length),o.read(this,t,!0,23,4)},s.prototype.readFloatBE=function(t,n){return n||N(t,4,this.length),o.read(this,t,!1,23,4)},s.prototype.readDoubleLE=function(t,n){return n||N(t,8,this.length),o.read(this,t,!0,52,8)},s.prototype.readDoubleBE=function(t,n){return n||N(t,8,this.length),o.read(this,t,!1,52,8)},s.prototype.writeUIntLE=function(t,n,e,r){(t=+t,n|=0,e|=0,r)||F(this,t,n,e,Math.pow(2,8*e)-1,0);var o=1,i=0;for(this[n]=255&t;++i<e&&(o*=256);)this[n+i]=t/o&255;return n+e},s.prototype.writeUIntBE=function(t,n,e,r){(t=+t,n|=0,e|=0,r)||F(this,t,n,e,Math.pow(2,8*e)-1,0);var o=e-1,i=1;for(this[n+o]=255&t;--o>=0&&(i*=256);)this[n+o]=t/i&255;return n+e},s.prototype.writeUInt8=function(t,n,e){return t=+t,n|=0,e||F(this,t,n,1,255,0),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[n]=255&t,n+1},s.prototype.writeUInt16LE=function(t,n,e){return t=+t,n|=0,e||F(this,t,n,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8):_(this,t,n,!0),n+2},s.prototype.writeUInt16BE=function(t,n,e){return t=+t,n|=0,e||F(this,t,n,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[n]=t>>>8,this[n+1]=255&t):_(this,t,n,!1),n+2},s.prototype.writeUInt32LE=function(t,n,e){return t=+t,n|=0,e||F(this,t,n,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[n+3]=t>>>24,this[n+2]=t>>>16,this[n+1]=t>>>8,this[n]=255&t):O(this,t,n,!0),n+4},s.prototype.writeUInt32BE=function(t,n,e){return t=+t,n|=0,e||F(this,t,n,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[n]=t>>>24,this[n+1]=t>>>16,this[n+2]=t>>>8,this[n+3]=255&t):O(this,t,n,!1),n+4},s.prototype.writeIntLE=function(t,n,e,r){if(t=+t,n|=0,!r){var o=Math.pow(2,8*e-1);F(this,t,n,e,o-1,-o)}var i=0,a=1,u=0;for(this[n]=255&t;++i<e&&(a*=256);)t<0&&0===u&&0!==this[n+i-1]&&(u=1),this[n+i]=(t/a>>0)-u&255;return n+e},s.prototype.writeIntBE=function(t,n,e,r){if(t=+t,n|=0,!r){var o=Math.pow(2,8*e-1);F(this,t,n,e,o-1,-o)}var i=e-1,a=1,u=0;for(this[n+i]=255&t;--i>=0&&(a*=256);)t<0&&0===u&&0!==this[n+i+1]&&(u=1),this[n+i]=(t/a>>0)-u&255;return n+e},s.prototype.writeInt8=function(t,n,e){return t=+t,n|=0,e||F(this,t,n,1,127,-128),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[n]=255&t,n+1},s.prototype.writeInt16LE=function(t,n,e){return t=+t,n|=0,e||F(this,t,n,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8):_(this,t,n,!0),n+2},s.prototype.writeInt16BE=function(t,n,e){return t=+t,n|=0,e||F(this,t,n,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[n]=t>>>8,this[n+1]=255&t):_(this,t,n,!1),n+2},s.prototype.writeInt32LE=function(t,n,e){return t=+t,n|=0,e||F(this,t,n,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8,this[n+2]=t>>>16,this[n+3]=t>>>24):O(this,t,n,!0),n+4},s.prototype.writeInt32BE=function(t,n,e){return t=+t,n|=0,e||F(this,t,n,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),s.TYPED_ARRAY_SUPPORT?(this[n]=t>>>24,this[n+1]=t>>>16,this[n+2]=t>>>8,this[n+3]=255&t):O(this,t,n,!1),n+4},s.prototype.writeFloatLE=function(t,n,e){return B(this,t,n,!0,e)},s.prototype.writeFloatBE=function(t,n,e){return B(this,t,n,!1,e)},s.prototype.writeDoubleLE=function(t,n,e){return P(this,t,n,!0,e)},s.prototype.writeDoubleBE=function(t,n,e){return P(this,t,n,!1,e)},s.prototype.copy=function(t,n,e,r){if(e||(e=0),r||0===r||(r=this.length),n>=t.length&&(n=t.length),n||(n=0),r>0&&r<e&&(r=e),r===e)return 0;if(0===t.length||0===this.length)return 0;if(n<0)throw new RangeError("targetStart out of bounds");if(e<0||e>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-n<r-e&&(r=t.length-n+e);var o,i=r-e;if(this===t&&e<n&&n<r)for(o=i-1;o>=0;--o)t[o+n]=this[o+e];else if(i<1e3||!s.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+n]=this[o+e];else Uint8Array.prototype.set.call(t,this.subarray(e,e+i),n);return i},s.prototype.fill=function(t,n,e,r){if("string"==typeof t){if("string"==typeof n?(r=n,n=0,e=this.length):"string"==typeof e&&(r=e,e=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!s.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(n<0||this.length<n||this.length<e)throw new RangeError("Out of range index");if(e<=n)return this;var i;if(n>>>=0,e=void 0===e?this.length:e>>>0,t||(t=0),"number"==typeof t)for(i=n;i<e;++i)this[i]=t;else{var a=s.isBuffer(t)?t:U(new s(t,r).toString()),u=a.length;for(i=0;i<e-n;++i)this[i+n]=a[i%u]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function W(t){return t<16?"0"+t.toString(16):t.toString(16)}function U(t,n){var e;n=n||1/0;for(var r=t.length,o=null,i=[],a=0;a<r;++a){if((e=t.charCodeAt(a))>55295&&e<57344){if(!o){if(e>56319){(n-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(n-=3)>-1&&i.push(239,191,189);continue}o=e;continue}if(e<56320){(n-=3)>-1&&i.push(239,191,189),o=e;continue}e=65536+(o-55296<<10|e-56320)}else o&&(n-=3)>-1&&i.push(239,191,189);if(o=null,e<128){if((n-=1)<0)break;i.push(e)}else if(e<2048){if((n-=2)<0)break;i.push(e>>6|192,63&e|128)}else if(e<65536){if((n-=3)<0)break;i.push(e>>12|224,e>>6&63|128,63&e|128)}else{if(!(e<1114112))throw new Error("Invalid code point");if((n-=4)<0)break;i.push(e>>18|240,e>>12&63|128,e>>6&63|128,63&e|128)}}return i}function z(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(L,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function V(t,n,e,r){for(var o=0;o<r&&!(o+e>=n.length||o>=t.length);++o)n[o+e]=t[o];return o}}).call(this,e(1))},function(t,n,e){"use strict";n.byteLength=function(t){var n=c(t),e=n[0],r=n[1];return 3*(e+r)/4-r},n.toByteArray=function(t){var n,e,r=c(t),a=r[0],u=r[1],s=new i(function(t,n,e){return 3*(n+e)/4-e}(0,a,u)),l=0,f=u>0?a-4:a;for(e=0;e<f;e+=4)n=o[t.charCodeAt(e)]<<18|o[t.charCodeAt(e+1)]<<12|o[t.charCodeAt(e+2)]<<6|o[t.charCodeAt(e+3)],s[l++]=n>>16&255,s[l++]=n>>8&255,s[l++]=255&n;2===u&&(n=o[t.charCodeAt(e)]<<2|o[t.charCodeAt(e+1)]>>4,s[l++]=255&n);1===u&&(n=o[t.charCodeAt(e)]<<10|o[t.charCodeAt(e+1)]<<4|o[t.charCodeAt(e+2)]>>2,s[l++]=n>>8&255,s[l++]=255&n);return s},n.fromByteArray=function(t){for(var n,e=t.length,o=e%3,i=[],a=0,u=e-o;a<u;a+=16383)i.push(f(t,a,a+16383>u?u:a+16383));1===o?(n=t[e-1],i.push(r[n>>2]+r[n<<4&63]+"==")):2===o&&(n=(t[e-2]<<8)+t[e-1],i.push(r[n>>10]+r[n>>4&63]+r[n<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,s=a.length;u<s;++u)r[u]=a[u],o[a.charCodeAt(u)]=u;function c(t){var n=t.length;if(n%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var e=t.indexOf("=");return-1===e&&(e=n),[e,e===n?0:4-e%4]}function l(t){return r[t>>18&63]+r[t>>12&63]+r[t>>6&63]+r[63&t]}function f(t,n,e){for(var r,o=[],i=n;i<e;i+=3)r=(t[i]<<16&16711680)+(t[i+1]<<8&65280)+(255&t[i+2]),o.push(l(r));return o.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,n){n.read=function(t,n,e,r,o){var i,a,u=8*o-r-1,s=(1<<u)-1,c=s>>1,l=-7,f=e?o-1:0,h=e?-1:1,d=t[n+f];for(f+=h,i=d&(1<<-l)-1,d>>=-l,l+=u;l>0;i=256*i+t[n+f],f+=h,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+t[n+f],f+=h,l-=8);if(0===i)i=1-c;else{if(i===s)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=c}return(d?-1:1)*a*Math.pow(2,i-r)},n.write=function(t,n,e,r,o,i){var a,u,s,c=8*i-o-1,l=(1<<c)-1,f=l>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,p=r?1:-1,v=n<0||0===n&&1/n<0?1:0;for(n=Math.abs(n),isNaN(n)||n===1/0?(u=isNaN(n)?1:0,a=l):(a=Math.floor(Math.log(n)/Math.LN2),n*(s=Math.pow(2,-a))<1&&(a--,s*=2),(n+=a+f>=1?h/s:h*Math.pow(2,1-f))*s>=2&&(a++,s/=2),a+f>=l?(u=0,a=l):a+f>=1?(u=(n*s-1)*Math.pow(2,o),a+=f):(u=n*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;t[e+d]=255&u,d+=p,u/=256,o-=8);for(a=a<<o|u,c+=o;c>0;t[e+d]=255&a,d+=p,a/=256,c-=8);t[e+d-p]|=128*v}},function(t,n){var e={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==e.call(t)}},function(t,n,e){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(t,n){this._id=t,this._clearFn=n}n.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},n.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},n.clearTimeout=n.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},n.enroll=function(t,n){clearTimeout(t._idleTimeoutId),t._idleTimeout=n},n.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},n._unrefActive=n.active=function(t){clearTimeout(t._idleTimeoutId);var n=t._idleTimeout;n>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),n))},e(9),n.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,n.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,e(1))},function(t,n,e){(function(t,n){!function(t,e){"use strict";if(!t.setImmediate){var r,o,i,a,u,s=1,c={},l=!1,f=t.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(t);h=h&&h.setTimeout?h:t,"[object process]"==={}.toString.call(t.process)?r=function(t){n.nextTick((function(){p(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var n=!0,e=t.onmessage;return t.onmessage=function(){n=!1},t.postMessage("","*"),t.onmessage=e,n}}()?t.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){p(t.data)},r=function(t){i.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,r=function(t){var n=f.createElement("script");n.onreadystatechange=function(){p(t),n.onreadystatechange=null,o.removeChild(n),n=null},o.appendChild(n)}):r=function(t){setTimeout(p,0,t)}:(a="setImmediate$"+Math.random()+"$",u=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(a)&&p(+n.data.slice(a.length))},t.addEventListener?t.addEventListener("message",u,!1):t.attachEvent("onmessage",u),r=function(n){t.postMessage(a+n,"*")}),h.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var n=new Array(arguments.length-1),e=0;e<n.length;e++)n[e]=arguments[e+1];var o={callback:t,args:n};return c[s]=o,r(s),s++},h.clearImmediate=d}function d(t){delete c[t]}function p(t){if(l)setTimeout(p,0,t);else{var n=c[t];if(n){l=!0;try{!function(t){var n=t.callback,e=t.args;switch(e.length){case 0:n();break;case 1:n(e[0]);break;case 2:n(e[0],e[1]);break;case 3:n(e[0],e[1],e[2]);break;default:n.apply(void 0,e)}}(n)}finally{d(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,e(1),e(3))},function(t,n){},function(t,n){},function(t,n){},function(t,n,e){"use strict";e.r(n),e.d(n,"add",(function(){return s})),e.d(n,"sub",(function(){return c})),e.d(n,"mult",(function(){return l})),e.d(n,"div",(function(){return f})),e.d(n,"dot",(function(){return h})),e.d(n,"abs",(function(){return d})),e.d(n,"ceil",(function(){return p})),e.d(n,"constrain",(function(){return v})),e.d(n,"exp",(function(){return m})),e.d(n,"floor",(function(){return g})),e.d(n,"log",(function(){return y})),e.d(n,"max",(function(){return x})),e.d(n,"min",(function(){return b})),e.d(n,"mod",(function(){return w})),e.d(n,"pow",(function(){return C})),e.d(n,"round",(function(){return E})),e.d(n,"sq",(function(){return R})),e.d(n,"sqrt",(function(){return I})),e.d(n,"sum",(function(){return k})),e.d(n,"acos",(function(){return S})),e.d(n,"asin",(function(){return A})),e.d(n,"atan",(function(){return T})),e.d(n,"atan2",(function(){return D})),e.d(n,"cos",(function(){return N})),e.d(n,"sin",(function(){return F})),e.d(n,"tan",(function(){return _})),e.d(n,"complex",(function(){return O})),e.d(n,"copy",(function(){return M})),e.d(n,"eye",(function(){return B})),e.d(n,"fill",(function(){return P})),e.d(n,"linspace",(function(){return L})),e.d(n,"ones",(function(){return W})),e.d(n,"random",(function(){return U})),e.d(n,"randomGaussian",(function(){return z})),e.d(n,"range",(function(){return V})),e.d(n,"zeros",(function(){return G})),e.d(n,"flatten",(function(){return H})),e.d(n,"pad",(function(){return q})),e.d(n,"reshape",(function(){return K})),e.d(n,"concat",(function(){return j})),e.d(n,"reverse",(function(){return X})),e.d(n,"slice",(function(){return Y})),e.d(n,"split",(function(){return $})),e.d(n,"stack",(function(){return Q})),e.d(n,"unstack",(function(){return J})),e.d(n,"memory",(function(){return Z})),e.d(n,"tidy",(function(){return tt})),e.d(n,"startScope",(function(){return nt})),e.d(n,"endScope",(function(){return et})),e.d(n,"keep",(function(){return rt})),e.d(n,"dispose",(function(){return ot})),e.d(n,"tfc",(function(){return r})),e.d(n,"Tensor",(function(){return u}));var r=e(0),o=e(2),i=function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function a(t){try{s(r.next(t))}catch(t){i(t)}}function u(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,u)}s((r=r.apply(t,n||[])).next())}))},a=function(t,n){var e,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(t,a)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},u=function(){function t(n){if(this.isComplex=!1,"number"==typeof n)this.tensor=r.scalar(n);else if(n instanceof Array)this.tensor=r.tensor(n);else if(n instanceof o.Vector){var e=n.array();this.tensor=r.tensor(e)}else if(n instanceof t)this.tensor=n.tensor;else{if(!(n instanceof r.Tensor))throw new Error("Tensors must be created from Numbers, Arrays, or p5.Vectors.");this.tensor=n}}return t.prototype.toString=function(){return this.tensor.toString()},t.prototype.array=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,this.tensor.array()];case 1:return[2,t.sent()]}}))}))},t.prototype.arraySync=function(){return this.tensor.arraySync()},t.prototype.toVector=function(){var t=JSON.stringify(this.tensor.shape);if("[2]"===t||"[3]"===t){var n=this.arraySync();return o.prototype.createVector().set(n)}throw new Error("Tensor cannot be represented as 3D vector")},t.prototype.dispose=function(){this.tensor.dispose()},t.prototype.equals=function(n){var e=this;if(n instanceof t){if(n.isComplex&&this.isComplex)return this.complexEquals(n);if(n.isComplex||this.isComplex)throw new Error("Both tensors must be either real or complex.")}var o=!1;return r.tidy((function(){var i=new t(n);if(e.tensor.rank!==i.tensor.rank)throw new Error("Both tensors must have the same rank.");1===r.all(e.tensor.equal(i.tensor)).arraySync()&&(o=!0)})),o},t.prototype.real=function(){var n=this;if(!this.isComplex)throw new Error("Tensor must be complex to use this method.");return new t(r.tidy((function(){return r.real(n.tensor)})))},t.prototype.imag=function(){var n=this;if(!this.isComplex)throw new Error("Tensor must be complex to use this method.");return new t(r.tidy((function(){return r.imag(n.tensor)})))},t.prototype.complexEquals=function(t){var n=this,e=!1;return r.tidy((function(){var r=n.real().equals(t.real()),o=n.imag().equals(t.imag());r&&o&&(e=!0)})),e},t.prototype.add=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.add(r.tensor)})),i=new t(o);return n instanceof t&&this.isComplex&&n.isComplex&&(i.isComplex=!0),i},t.prototype.sub=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.sub(r.tensor)})),i=new t(o);return n instanceof t&&this.isComplex&&n.isComplex&&(i.isComplex=!0),i},t.prototype.mult=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.mul(r.tensor)})),i=new t(o);return n instanceof t&&this.isComplex&&n.isComplex&&(i.isComplex=!0),i},t.prototype.div=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.div(r.tensor)})),i=new t(o);return n instanceof t&&this.isComplex&&n.isComplex&&(i.isComplex=!0),i},t.prototype.dot=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.dot(r.tensor)}));return new t(o)},t.prototype.abs=function(){var n=this;return new t(r.tidy((function(){return n.tensor.abs()})))},t.prototype.ceil=function(){var n=this;return new t(r.tidy((function(){return n.tensor.ceil()})))},t.prototype.constrain=function(n,e){var o=this;return new t(r.tidy((function(){return o.tensor.clipByValue(n,e)})))},t.prototype.exp=function(){var n=this;return new t(r.tidy((function(){return n.tensor.exp()})))},t.prototype.floor=function(){var n=this;return new t(r.tidy((function(){return n.tensor.floor()})))},t.prototype.log=function(){var n=this;return new t(r.tidy((function(){return n.tensor.log()})))},t.prototype.max=function(){var t,n=this;return r.tidy((function(){var e=r.max(n.tensor);t=e.arraySync()})),t},t.prototype.min=function(){var t,n=this;return r.tidy((function(){var e=r.min(n.tensor);t=e.arraySync()})),t},t.prototype.mod=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.mod(r.tensor)}));return new t(o)},t.prototype.pow=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.pow(r.tensor)}));return new t(o)},t.prototype.round=function(){var n=this;return new t(r.tidy((function(){return n.tensor.round()})))},t.prototype.sq=function(){var n=this;return new t(r.tidy((function(){return n.tensor.square()})))},t.prototype.sqrt=function(){var n=this;return new t(r.tidy((function(){return n.tensor.sqrt()})))},t.prototype.sum=function(n){var e=this;return new t(r.tidy((function(){return e.tensor.sum(n)})))},t.prototype.acos=function(){var n=this;return new t(r.tidy((function(){return n.tensor.acos()})))},t.prototype.asin=function(){var n=this;return new t(r.tidy((function(){return n.tensor.asin()})))},t.prototype.atan=function(){var n=this;return new t(r.tidy((function(){return n.tensor.atan()})))},t.prototype.atan2=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.atan2(r.tensor)}));return new t(o)},t.prototype.cos=function(){var n=this;return new t(r.tidy((function(){return n.tensor.cos()})))},t.prototype.sin=function(){var n=this;return new t(r.tidy((function(){return n.tensor.sin()})))},t.prototype.tan=function(){var n=this;return new t(r.tidy((function(){return n.tensor.tan()})))},t.complex=function(n,e){var o=new t(r.tidy((function(){var o,i;if("number"==typeof n&&"number"==typeof e)o=r.tensor(n),i=r.tensor(e);else{if(!(n instanceof t&&e instanceof t))throw new Error("Components must be either Numbers or Tensors");o=r.clone(n.tensor),i=r.clone(e.tensor)}return r.complex(o,i)})));return o.isComplex=!0,o},t.prototype.copy=function(){var n=this;return new t(r.tidy((function(){return n.tensor.clone()})))},t.eye=function(n,e){return new t(r.tidy((function(){return r.eye(n,e)})))},t.fill=function(n,e){return new t(r.tidy((function(){return r.fill(n,e)})))},t.linspace=function(n,e,o){return new t(r.tidy((function(){return r.linspace(n,e,o)})))},t.ones=function(n){return new t(r.tidy((function(){return r.ones(n)})))},t.random=function(n){return new t(r.tidy((function(){return r.randomUniform(n)})))},t.randomGaussian=function(n,e,o){return new t(r.tidy((function(){return r.randomNormal(n,e,o)})))},t.range=function(n,e,o){return new t(r.tidy((function(){return r.range(n,e,o)})))},t.zeros=function(n){return new t(r.tidy((function(){return r.zeros(n)})))},t.prototype.flatten=function(){var n=this;return new t(r.tidy((function(){return n.tensor.flatten()})))},t.prototype.pad=function(n,e){var o=this;return new t(r.tidy((function(){return o.tensor.pad(n,e)})))},t.prototype.reshape=function(n){var e=this;return new t(r.tidy((function(){return e.tensor.reshape(n)})))},t.prototype.concat=function(n,e){var o=this;return new t(r.tidy((function(){var i=[o.tensor];if(n instanceof t)i.push(n.tensor);else if(Array.isArray(n)){var a=n.map((function(t){return t.tensor}));Array.prototype.push.apply(i,a)}return r.concat(i,e)})))},t.prototype.reverse=function(n){var e=this;return new t(r.tidy((function(){return e.tensor.reverse(n)})))},t.prototype.slice=function(n,e){var o=this;return new t(r.tidy((function(){return o.tensor.slice(n,e)})))},t.prototype.split=function(n,e){var o=this;return r.tidy((function(){return o.tensor.split(n,e)})).map((function(n){return new t(n)}))},t.stack=function(n,e){return new t(r.tidy((function(){for(var t=new Array(n.length),o=0;o<n.length;o+=1)t[o]=n[o].tensor;return r.stack(t,e)})))},t.prototype.unstack=function(n){var e=this;return r.tidy((function(){return e.tensor.unstack(n)})).map((function(n){return new t(n)}))},t.prototype.addRows=function(n,e,o){var i=this;return void 0===o&&(o=1),new t(r.tidy((function(){if(2!==i.tensor.shape.length)throw new Error("Elementary row operations are only defined on matrices.");var t=i.tensor.slice(0,e),r=i.tensor.slice(n,1),a=i.tensor.slice(e,1),u=i.tensor.slice(e+1,i.tensor.shape[0]-e-1);return a=a.add(r.mul(o)),t.concat([a,u])})))},t.prototype.subRows=function(n,e,o){var i=this;return void 0===o&&(o=1),new t(r.tidy((function(){if(2!==i.tensor.shape.length)throw new Error("Elementary row operations are only defined on matrices.");var t=i.tensor.slice(0,e),r=i.tensor.slice(n,1),a=i.tensor.slice(e,1),u=i.tensor.slice(e+1,i.tensor.shape[0]-e-1);return a=a.sub(r.mul(o)),t.concat([a,u])})))},t.prototype.swapRows=function(n,e){var o=this,i=Math.min(n,e),a=Math.max(n,e);return new t(r.tidy((function(){if(2!==o.tensor.shape.length)throw new Error("Elementary row operations are only defined on matrices.");var t=o.tensor.slice(0,i),n=o.tensor.slice(i,1),e=o.tensor.slice(i+1,a-i-1),r=o.tensor.slice(a,1),u=o.tensor.slice(a+1,o.tensor.shape[0]-a-1);return t.concat([r,e,n,u])})))},t.prototype.mulRow=function(n,e){var o=this;return new t(r.tidy((function(){if(2!==o.tensor.shape.length)throw new Error("Elementary row operations are only defined on matrices.");var t=o.tensor.slice(0,n),r=o.tensor.slice(n,1),i=o.tensor.slice(n+1,o.tensor.shape[0]-n-1);return r=r.mul(e),t.concat([r,i])})))},t}(),s=function(t,n){return t.add(n)},c=function(t,n){return t.sub(n)},l=function(t,n){return t.mult(n)},f=function(t,n){return t.div(n)},h=function(t,n){return t.dot(n)},d=function(t){return t.abs()},p=function(t){return t.ceil()},v=function(t,n,e){return t.constrain(n,e)},m=function(t){return t.exp()},g=function(t){return t.floor()},y=function(t){return t.log()},x=function(t){return t.max()},b=function(t){return t.min()},w=function(t,n){return t.mod(n)},C=function(t,n){return t.pow(n)},E=function(t){return t.round()},R=function(t){return t.sq()},I=function(t){return t.sqrt()},k=function(t,n){return t.sum(n)},S=function(t){return t.acos()},A=function(t){return t.asin()},T=function(t){return t.atan()},D=function(t,n){return t.atan2(n)},N=function(t){return t.cos()},F=function(t){return t.sin()},_=function(t){return t.tan()},O=function(t,n){return u.complex(t,n)},M=function(t){return t.copy()},B=function(t,n){return u.eye(t,n)},P=function(t,n){return u.fill(t,n)},L=function(t,n,e){return u.linspace(t,n,e)},W=function(t){return u.ones(t)},U=function(t){return u.random(t)},z=function(t,n,e){return u.randomGaussian(t,n,e)},V=function(t,n,e){return u.range(t,n,e)},G=function(t){return u.zeros(t)},H=function(t){return t.flatten()},q=function(t,n,e){return t.pad(n,e)},K=function(t,n){return t.reshape(n)},j=function(t,n){if(t.length<2)throw new Error("Two or more tensors must be provided.");var e=t[0],r=t.slice(1);return e.concat(r,n)},X=function(t,n){return t.reverse(n)},Y=function(t,n,e){return t.slice(n,e)},$=function(t,n,e){return t.split(n,e)},Q=function(t,n){return u.stack(t,n)},J=function(t,n){return t.unstack(n)},Z=r.memory,tt=r.tidy,nt=function(){return r.engine().startScope()},et=function(){return r.engine().endScope()},rt=function(t){t instanceof u?r.keep(t.tensor):t instanceof Array&&t.forEach((function(t){return r.keep(t.tensor)}))},ot=function(t){t instanceof u?t.dispose():t instanceof Array&&t.forEach((function(t){return t.dispose()}))};p5.prototype.createTensor=function(t){return new u(t)},p5.prototype.registerMethod("init",nt),p5.prototype.registerMethod("pre",nt),p5.prototype.registerMethod("post",et),p5.prototype.registerMethod("remove",et)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,