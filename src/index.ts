import * as tfc from '@tensorflow/tfjs-core';
import * as cpu from '@tensorflow/tfjs-backend-cpu';
import * as webgl from '@tensorflow/tfjs-backend-webgl';

import { Tensor, createTensor } from './tensor/index';
import {
  add,
  sub,
  mult,
  div,
  dot,
  abs,
  ceil,
  constrain,
  exp,
  floor,
  log,
  max,
  min,
  mod,
  pow,
  round,
  sq,
  sqrt,
  sum,
  acos,
  asin,
  atan,
  atan2,
  cos,
  sin,
  tan,
  complex,
  copy,
  eye,
  fill,
  linspace,
  ones,
  random,
  randomGaussian,
  range,
  zeros,
  flatten,
  pad,
  reshape,
  concat,
  reverse,
  slice,
  split,
  stack,
  unstack,
  sort,
} from './tensor/ufunc';
import {
  memory,
  tidy,
  startScope,
  endScope,
  keep,
  dispose,
} from './tensor/memory';
import { fromImage, toImage } from './image/index';
import { ptp, percentile, quantile } from './stats/index';

declare const p5: any;

p5.prototype.createTensor = createTensor;
p5.prototype.registerMethod('init', startScope);
p5.prototype.registerMethod('pre', startScope);
p5.prototype.registerMethod('post', endScope);
p5.prototype.registerMethod('remove', endScope);

const { setBackend, getBackend } = tfc;

export {
  add,
  sub,
  mult,
  div,
  dot,
  abs,
  ceil,
  constrain,
  exp,
  floor,
  log,
  max,
  min,
  mod,
  pow,
  round,
  sq,
  sqrt,
  sum,
  acos,
  asin,
  atan,
  atan2,
  cos,
  sin,
  tan,
  complex,
  copy,
  eye,
  fill,
  linspace,
  ones,
  random,
  randomGaussian,
  range,
  zeros,
  flatten,
  pad,
  reshape,
  concat,
  reverse,
  slice,
  split,
  stack,
  unstack,
  sort,
  memory,
  tidy,
  startScope,
  endScope,
  keep,
  dispose,
  tfc,
  Tensor,
  fromImage,
  toImage,
  getBackend,
  setBackend,
  cpu,
  webgl,
  ptp,
  percentile,
  quantile,
};
